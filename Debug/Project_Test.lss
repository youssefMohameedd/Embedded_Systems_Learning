
Project_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000006a8  0000073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800078  00800078  00000754  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001818  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a78  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f0e  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00003a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044bb  00000000  00000000  00003ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011d3  00000000  00000000  00008187  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000935a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000013af  00000000  00000000  0000942a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	02 d0       	rcall	.+4      	; 0x8c <main>
  88:	0d c3       	rjmp	.+1562   	; 0x6a4 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <main>:

#include <Keypad.h>

int main(void)
{	
	LCD_Init();
  8c:	ac d0       	rcall	.+344    	; 0x1e6 <LCD_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	8f e1       	ldi	r24, 0x1F	; 31
  90:	9e e4       	ldi	r25, 0x4E	; 78
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0x6>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0xc>
	_delay_ms(5);
	Keypad_Init();
  98:	00 00       	nop
	uint8 val ;
	while(1)
	{
		val = Keypad_Read_Char();
  9a:	0b d0       	rcall	.+22     	; 0xb2 <Keypad_Init>
		if(val != 'N') LCD_Write_Char(val);
  9c:	17 d0       	rcall	.+46     	; 0xcc <Keypad_Read_Char>
  9e:	8e 34       	cpi	r24, 0x4E	; 78
  a0:	09 f0       	breq	.+2      	; 0xa4 <main+0x18>
  a2:	d9 d0       	rcall	.+434    	; 0x256 <LCD_Write_Char>
  a4:	8f e1       	ldi	r24, 0x1F	; 31
  a6:	9e e4       	ldi	r25, 0x4E	; 78
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x1c>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x22>
  ae:	00 00       	nop
  b0:	f5 cf       	rjmp	.-22     	; 0x9c <main+0x10>

000000b2 <Keypad_Init>:


void Keypad_Init(void)
{
	//Keypad Pinout (From Left to Right) r1-r2-r3-r4-c1-c2-c3-c4
	Set_Port_Direction(PD,0xF0);
  b2:	60 ef       	ldi	r22, 0xF0	; 240
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	ae d2       	rcall	.+1372   	; 0x614 <Set_Port_Direction>
	Write_Port(PD,0xFF);
  b8:	6f ef       	ldi	r22, 0xFF	; 255
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	bb d2       	rcall	.+1398   	; 0x634 <Write_Port>
  be:	83 ef       	ldi	r24, 0xF3	; 243
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <Keypad_Init+0x10>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <Keypad_Init+0x16>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <Keypad_Read_Char>:
}

// we needn't use the debounced Push-Button function, as halting CPU performance wouldn't
//affect the Data Display of the LCD
uint8 Keypad_Read_Char(void)
{
  cc:	6f 92       	push	r6
  ce:	7f 92       	push	r7
  d0:	8f 92       	push	r8
  d2:	9f 92       	push	r9
  d4:	af 92       	push	r10
  d6:	bf 92       	push	r11
  d8:	cf 92       	push	r12
  da:	df 92       	push	r13
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	04 e7       	ldi	r16, 0x74	; 116
  ea:	10 e0       	ldi	r17, 0x00	; 0
  ec:	c1 2c       	mov	r12, r1
  ee:	d1 2c       	mov	r13, r1
	
	for (uint8 i = 0 ; i<4 ; i++)
	{
		Write_Channel(rows[i],LOW);
  f0:	46 01       	movw	r8, r12
  f2:	58 01       	movw	r10, r16
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	f8 01       	movw	r30, r16
  f8:	80 81       	ld	r24, Z
  fa:	c9 d1       	rcall	.+914    	; 0x48e <Write_Channel>
  fc:	c0 e7       	ldi	r28, 0x70	; 112
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	61 2c       	mov	r6, r1
 102:	71 2c       	mov	r7, r1
		
		for(uint8 j = 0 ; j<4 ;j++)
		{
			if(Read_Channel(cols[j])==0)
 104:	73 01       	movw	r14, r6
 106:	89 91       	ld	r24, Y+
 108:	4f d2       	rcall	.+1182   	; 0x5a8 <Read_Channel>
 10a:	81 11       	cpse	r24, r1
 10c:	13 c0       	rjmp	.+38     	; 0x134 <Keypad_Read_Char+0x68>
			{
				while(Read_Channel(cols[j])==0);
 10e:	e3 01       	movw	r28, r6
 110:	c0 59       	subi	r28, 0x90	; 144
 112:	df 4f       	sbci	r29, 0xFF	; 255
 114:	88 81       	ld	r24, Y
 116:	48 d2       	rcall	.+1168   	; 0x5a8 <Read_Channel>
 118:	88 23       	and	r24, r24
 11a:	e1 f3       	breq	.-8      	; 0x114 <Keypad_Read_Char+0x48>
				return KeyPad[i][j];
 11c:	c4 01       	movw	r24, r8
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	80 5a       	subi	r24, 0xA0	; 160
 128:	9f 4f       	sbci	r25, 0xFF	; 255
 12a:	fc 01       	movw	r30, r24
 12c:	ee 0d       	add	r30, r14
 12e:	ff 1d       	adc	r31, r15
 130:	80 81       	ld	r24, Z
 132:	15 c0       	rjmp	.+42     	; 0x15e <Keypad_Read_Char+0x92>
 134:	ff ef       	ldi	r31, 0xFF	; 255
 136:	6f 1a       	sub	r6, r31
 138:	7f 0a       	sbc	r7, r31
	
	for (uint8 i = 0 ; i<4 ; i++)
	{
		Write_Channel(rows[i],LOW);
		
		for(uint8 j = 0 ; j<4 ;j++)
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	68 16       	cp	r6, r24
 13e:	71 04       	cpc	r7, r1
 140:	09 f7       	brne	.-62     	; 0x104 <Keypad_Read_Char+0x38>
 142:	0f 5f       	subi	r16, 0xFF	; 255
 144:	1f 4f       	sbci	r17, 0xFF	; 255
				return KeyPad[i][j];
			}
			
		}
		
		Write_Channel(rows[i],HIGH);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	f5 01       	movw	r30, r10
 14a:	80 81       	ld	r24, Z
 14c:	a0 d1       	rcall	.+832    	; 0x48e <Write_Channel>
 14e:	ff ef       	ldi	r31, 0xFF	; 255
 150:	cf 1a       	sub	r12, r31
 152:	df 0a       	sbc	r13, r31
// we needn't use the debounced Push-Button function, as halting CPU performance wouldn't
//affect the Data Display of the LCD
uint8 Keypad_Read_Char(void)
{
	
	for (uint8 i = 0 ; i<4 ; i++)
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	c8 16       	cp	r12, r24
 158:	d1 04       	cpc	r13, r1
 15a:	51 f6       	brne	.-108    	; 0xf0 <Keypad_Read_Char+0x24>
		}
		
		Write_Channel(rows[i],HIGH);
		
	}
	return 'N';
 15c:	8e e4       	ldi	r24, 0x4E	; 78
	
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	df 90       	pop	r13
 16c:	cf 90       	pop	r12
 16e:	bf 90       	pop	r11
 170:	af 90       	pop	r10
 172:	9f 90       	pop	r9
 174:	8f 90       	pop	r8
 176:	7f 90       	pop	r7
 178:	6f 90       	pop	r6
 17a:	08 95       	ret

0000017c <LCD_Latch>:
#include <Bit_Math.h>

static uint8 AC = 0; // Address Counter initialization 

void LCD_Latch(void) {
	Write_Channel(LCD_E, HIGH);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	8b e0       	ldi	r24, 0x0B	; 11
 180:	86 d1       	rcall	.+780    	; 0x48e <Write_Channel>
 182:	89 ef       	ldi	r24, 0xF9	; 249
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Latch+0xa>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_Latch+0x10>
 18c:	00 00       	nop
	_delay_ms(1); 
	Write_Channel(LCD_E, LOW);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	8b e0       	ldi	r24, 0x0B	; 11
 192:	7d d1       	rcall	.+762    	; 0x48e <Write_Channel>
 194:	89 ef       	ldi	r24, 0xF9	; 249
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Latch+0x1c>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Latch+0x22>
 19e:	00 00       	nop
 1a0:	08 95       	ret

000001a2 <LCD_Write_Cmd>:
	_delay_ms(1);
}

void LCD_Write_Cmd(uint8 cmd) {
 1a2:	cf 93       	push	r28
 1a4:	c8 2f       	mov	r28, r24
	
	Write_Channel(LCD_RS, LOW);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	89 e0       	ldi	r24, 0x09	; 9
 1aa:	71 d1       	rcall	.+738    	; 0x48e <Write_Channel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_Write_Cmd+0xc>
	_delay_us(2);
	
	Write_Nibble(LCD_PORT, HIGH, cmd >> 4); // Send higher nibble
 1ae:	4c 2f       	mov	r20, r28
 1b0:	42 95       	swap	r20
 1b2:	4f 70       	andi	r20, 0x0F	; 15
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 1b8:	5e d2       	rcall	.+1212   	; 0x676 <Write_Nibble>
 1ba:	e0 df       	rcall	.-64     	; 0x17c <LCD_Latch>

	Write_Nibble(LCD_PORT, HIGH, cmd & 0x0F); // Send lower nibble
 1bc:	4c 2f       	mov	r20, r28
 1be:	4f 70       	andi	r20, 0x0F	; 15
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 1c4:	58 d2       	rcall	.+1200   	; 0x676 <Write_Nibble>
 1c6:	da df       	rcall	.-76     	; 0x17c <LCD_Latch>
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	8a 95       	dec	r24
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_Write_Cmd+0x28>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_Write_Cmd+0x2e>

	 _delay_us(50);
	 if(cmd == 0x01 || cmd == 0x02 ) _delay_ms(2);
 1d0:	c1 50       	subi	r28, 0x01	; 1
 1d2:	c2 30       	cpi	r28, 0x02	; 2
 1d4:	30 f4       	brcc	.+12     	; 0x1e2 <LCD_Write_Cmd+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	83 ef       	ldi	r24, 0xF3	; 243
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCD_Write_Cmd+0x38>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCD_Write_Cmd+0x3e>
 1e0:	00 00       	nop
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <LCD_Init>:

void LCD_Init(void) {
	
	
	Set_Port_Direction(LCD_PORT, 0xFF);
 1e6:	6f ef       	ldi	r22, 0xFF	; 255
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	14 d2       	rcall	.+1064   	; 0x614 <Set_Port_Direction>
	Set_Channel_Direction(LCD_E, OUTPUT);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	8b e0       	ldi	r24, 0x0B	; 11
 1f0:	5f d0       	rcall	.+190    	; 0x2b0 <Set_Channel_Direction>
	Set_Channel_Direction(LCD_RS, OUTPUT);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	89 e0       	ldi	r24, 0x09	; 9
 1f6:	5c d0       	rcall	.+184    	; 0x2b0 <Set_Channel_Direction>
	Set_Channel_Direction(LCD_RW, OUTPUT);
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	8a e0       	ldi	r24, 0x0A	; 10
 1fc:	59 d0       	rcall	.+178    	; 0x2b0 <Set_Channel_Direction>
 1fe:	83 ed       	ldi	r24, 0xD3	; 211
 200:	90 e3       	ldi	r25, 0x30	; 48
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_Init+0x1c>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_Init+0x22>
 208:	00 00       	nop
	_delay_ms(50); // Wait for LCD power-up
	Write_Channel(LCD_RW, LOW); // Always in write mode
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	8a e0       	ldi	r24, 0x0A	; 10
	
	LCD_Write_Cmd(FOUR_BIT_MODE);
 20e:	3f d1       	rcall	.+638    	; 0x48e <Write_Channel>
 210:	82 e0       	ldi	r24, 0x02	; 2
	LCD_Write_Cmd(FUNCTION_SET);
 212:	c7 df       	rcall	.-114    	; 0x1a2 <LCD_Write_Cmd>
 214:	88 e2       	ldi	r24, 0x28	; 40
	LCD_Write_Cmd(DISPLAY_CONTROL);
 216:	c5 df       	rcall	.-118    	; 0x1a2 <LCD_Write_Cmd>
 218:	8f e0       	ldi	r24, 0x0F	; 15
 21a:	c3 df       	rcall	.-122    	; 0x1a2 <LCD_Write_Cmd>
	LCD_Write_Cmd(DISPLAY_CLEAR); // Returns Home by Default
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	c1 df       	rcall	.-126    	; 0x1a2 <LCD_Write_Cmd>
 220:	86 e0       	ldi	r24, 0x06	; 6
	LCD_Write_Cmd(ENTRY_MODE_SET);
 222:	bf cf       	rjmp	.-130    	; 0x1a2 <LCD_Write_Cmd>
 224:	08 95       	ret

00000226 <LCD_Move_Pos>:
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	40 f4       	brcc	.+16     	; 0x23a <LCD_Move_Pos+0x14>
}

void LCD_Move_Pos(uint8 row, uint8 col)
{
	uint8 index ;
	if(row <2 && col <16)	index =(row*LINE_2_BASE_ADDRESS) + col;
 22a:	60 31       	cpi	r22, 0x10	; 16
 22c:	48 f4       	brcc	.+18     	; 0x240 <LCD_Move_Pos+0x1a>
 22e:	96 2f       	mov	r25, r22
 230:	20 e4       	ldi	r18, 0x40	; 64
 232:	82 9f       	mul	r24, r18
 234:	90 0d       	add	r25, r0
 236:	11 24       	eor	r1, r1
 238:	08 c0       	rjmp	.+16     	; 0x24a <LCD_Move_Pos+0x24>
	else if (row >1 )		index = LINE_2_BASE_ADDRESS + col ;
 23a:	90 e4       	ldi	r25, 0x40	; 64
 23c:	96 0f       	add	r25, r22
 23e:	05 c0       	rjmp	.+10     	; 0x24a <LCD_Move_Pos+0x24>
	else if (col >16)		index = LINE_2_BASE_ADDRESS + (col%16); // wrapping exceeding columns
 240:	61 31       	cpi	r22, 0x11	; 17
 242:	18 f0       	brcs	.+6      	; 0x24a <LCD_Move_Pos+0x24>
 244:	6f 70       	andi	r22, 0x0F	; 15
 246:	90 e4       	ldi	r25, 0x40	; 64
 248:	96 0f       	add	r25, r22
	AC = index;			// necessary for end of line string bug handling
 24a:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <__data_end>
	SET_BIT(index,7);   // Command Selection to modify the Address Counter value
	LCD_Write_Cmd(index);
 24e:	89 2f       	mov	r24, r25
 250:	80 68       	ori	r24, 0x80	; 128
 252:	a7 cf       	rjmp	.-178    	; 0x1a2 <LCD_Write_Cmd>
 254:	08 95       	ret

00000256 <LCD_Write_Char>:

}

void LCD_Write_Char(uint8 character)
 {	
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
	 //Handling end of Line string initiations
	if(AC == 0x10) LCD_Move_Pos(1,0);
 25a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 25e:	80 31       	cpi	r24, 0x10	; 16
 260:	19 f4       	brne	.+6      	; 0x268 <LCD_Write_Char+0x12>
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	df df       	rcall	.-66     	; 0x226 <LCD_Move_Pos>
	if(AC > 0x4F)
 268:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 26c:	80 35       	cpi	r24, 0x50	; 80
 26e:	20 f0       	brcs	.+8      	; 0x278 <LCD_Write_Char+0x22>
	 {
		 AC = 0 ;
 270:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
		 LCD_Write_Cmd(RETURN_HOME);
 274:	80 e8       	ldi	r24, 0x80	; 128
 276:	95 df       	rcall	.-214    	; 0x1a2 <LCD_Write_Cmd>
	 }
	
	Write_Channel(LCD_RS, HIGH);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	89 e0       	ldi	r24, 0x09	; 9
 27c:	08 d1       	rcall	.+528    	; 0x48e <Write_Channel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCD_Write_Char+0x2a>
	_delay_us(2);

	Write_Nibble(LCD_PORT, HIGH, character >> 4);   // Send higher nibble
 280:	4c 2f       	mov	r20, r28
 282:	42 95       	swap	r20
 284:	4f 70       	andi	r20, 0x0F	; 15
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 28a:	f5 d1       	rcall	.+1002   	; 0x676 <Write_Nibble>

	Write_Nibble(LCD_PORT, HIGH, character & 0x0F); // Send lower nibble
 28c:	77 df       	rcall	.-274    	; 0x17c <LCD_Latch>
 28e:	4c 2f       	mov	r20, r28
 290:	4f 70       	andi	r20, 0x0F	; 15
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 296:	ef d1       	rcall	.+990    	; 0x676 <Write_Nibble>
 298:	71 df       	rcall	.-286    	; 0x17c <LCD_Latch>
 29a:	80 e1       	ldi	r24, 0x10	; 16
 29c:	8a 95       	dec	r24
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_Write_Char+0x46>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCD_Write_Char+0x4c>

	_delay_us(50);
	AC++;
 2a2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 
	
}
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <Set_Channel_Direction>:
	if(Significance == HIGH)	value =  (value &0xF0) >> 4 ; 
	else if (Significance == LOW) value = (value &0x0F) ;
	

	return value ;
}
 2b0:	98 2f       	mov	r25, r24
 2b2:	97 70       	andi	r25, 0x07	; 7
 2b4:	86 95       	lsr	r24
 2b6:	86 95       	lsr	r24
 2b8:	86 95       	lsr	r24
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <Set_Channel_Direction+0x10>
 2be:	40 c0       	rjmp	.+128    	; 0x340 <Set_Channel_Direction+0x90>
 2c0:	38 f0       	brcs	.+14     	; 0x2d0 <Set_Channel_Direction+0x20>
 2c2:	82 30       	cpi	r24, 0x02	; 2
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <Set_Channel_Direction+0x18>
 2c6:	74 c0       	rjmp	.+232    	; 0x3b0 <Set_Channel_Direction+0x100>
 2c8:	83 30       	cpi	r24, 0x03	; 3
 2ca:	09 f4       	brne	.+2      	; 0x2ce <Set_Channel_Direction+0x1e>
 2cc:	a9 c0       	rjmp	.+338    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 2ce:	08 95       	ret
 2d0:	61 11       	cpse	r22, r1
 2d2:	12 c0       	rjmp	.+36     	; 0x2f8 <Set_Channel_Direction+0x48>
 2d4:	4a b3       	in	r20, 0x1a	; 26
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	b9 01       	movw	r22, r18
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <Set_Channel_Direction+0x32>
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	9a 95       	dec	r25
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <Set_Channel_Direction+0x2e>
 2e6:	cb 01       	movw	r24, r22
 2e8:	80 95       	com	r24
 2ea:	94 2f       	mov	r25, r20
 2ec:	98 23       	and	r25, r24
 2ee:	9a bb       	out	0x1a, r25	; 26
 2f0:	9b b3       	in	r25, 0x1b	; 27
 2f2:	89 23       	and	r24, r25
 2f4:	8b bb       	out	0x1b, r24	; 27
 2f6:	08 95       	ret
 2f8:	62 30       	cpi	r22, 0x02	; 2
 2fa:	91 f4       	brne	.+36     	; 0x320 <Set_Channel_Direction+0x70>
 2fc:	4a b3       	in	r20, 0x1a	; 26
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	b9 01       	movw	r22, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <Set_Channel_Direction+0x5a>
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	9a 95       	dec	r25
 30c:	e2 f7       	brpl	.-8      	; 0x306 <Set_Channel_Direction+0x56>
 30e:	cb 01       	movw	r24, r22
 310:	96 2f       	mov	r25, r22
 312:	90 95       	com	r25
 314:	94 23       	and	r25, r20
 316:	9a bb       	out	0x1a, r25	; 26
 318:	9b b3       	in	r25, 0x1b	; 27
 31a:	89 2b       	or	r24, r25
 31c:	8b bb       	out	0x1b, r24	; 27
 31e:	08 95       	ret
 320:	61 30       	cpi	r22, 0x01	; 1
 322:	09 f0       	breq	.+2      	; 0x326 <Set_Channel_Direction+0x76>
 324:	b3 c0       	rjmp	.+358    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 326:	4a b3       	in	r20, 0x1a	; 26
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	b9 01       	movw	r22, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <Set_Channel_Direction+0x84>
 330:	66 0f       	add	r22, r22
 332:	77 1f       	adc	r23, r23
 334:	9a 95       	dec	r25
 336:	e2 f7       	brpl	.-8      	; 0x330 <Set_Channel_Direction+0x80>
 338:	cb 01       	movw	r24, r22
 33a:	84 2b       	or	r24, r20
 33c:	8a bb       	out	0x1a, r24	; 26
 33e:	08 95       	ret
 340:	61 11       	cpse	r22, r1
 342:	12 c0       	rjmp	.+36     	; 0x368 <Set_Channel_Direction+0xb8>
 344:	47 b3       	in	r20, 0x17	; 23
 346:	21 e0       	ldi	r18, 0x01	; 1
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	b9 01       	movw	r22, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <Set_Channel_Direction+0xa2>
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	9a 95       	dec	r25
 354:	e2 f7       	brpl	.-8      	; 0x34e <Set_Channel_Direction+0x9e>
 356:	cb 01       	movw	r24, r22
 358:	80 95       	com	r24
 35a:	94 2f       	mov	r25, r20
 35c:	98 23       	and	r25, r24
 35e:	97 bb       	out	0x17, r25	; 23
 360:	98 b3       	in	r25, 0x18	; 24
 362:	89 23       	and	r24, r25
 364:	88 bb       	out	0x18, r24	; 24
 366:	08 95       	ret
 368:	62 30       	cpi	r22, 0x02	; 2
 36a:	91 f4       	brne	.+36     	; 0x390 <Set_Channel_Direction+0xe0>
 36c:	47 b3       	in	r20, 0x17	; 23
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <Set_Channel_Direction+0xca>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	9a 95       	dec	r25
 37c:	e2 f7       	brpl	.-8      	; 0x376 <Set_Channel_Direction+0xc6>
 37e:	cb 01       	movw	r24, r22
 380:	96 2f       	mov	r25, r22
 382:	90 95       	com	r25
 384:	94 23       	and	r25, r20
 386:	97 bb       	out	0x17, r25	; 23
 388:	98 b3       	in	r25, 0x18	; 24
 38a:	89 2b       	or	r24, r25
 38c:	88 bb       	out	0x18, r24	; 24
 38e:	08 95       	ret
 390:	61 30       	cpi	r22, 0x01	; 1
 392:	09 f0       	breq	.+2      	; 0x396 <Set_Channel_Direction+0xe6>
 394:	7b c0       	rjmp	.+246    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 396:	47 b3       	in	r20, 0x17	; 23
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	b9 01       	movw	r22, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <Set_Channel_Direction+0xf4>
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	9a 95       	dec	r25
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <Set_Channel_Direction+0xf0>
 3a8:	cb 01       	movw	r24, r22
 3aa:	84 2b       	or	r24, r20
 3ac:	87 bb       	out	0x17, r24	; 23
 3ae:	08 95       	ret
 3b0:	61 11       	cpse	r22, r1
 3b2:	12 c0       	rjmp	.+36     	; 0x3d8 <Set_Channel_Direction+0x128>
 3b4:	44 b3       	in	r20, 0x14	; 20
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	b9 01       	movw	r22, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <Set_Channel_Direction+0x112>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	9a 95       	dec	r25
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <Set_Channel_Direction+0x10e>
 3c6:	cb 01       	movw	r24, r22
 3c8:	80 95       	com	r24
 3ca:	94 2f       	mov	r25, r20
 3cc:	98 23       	and	r25, r24
 3ce:	94 bb       	out	0x14, r25	; 20
 3d0:	95 b3       	in	r25, 0x15	; 21
 3d2:	89 23       	and	r24, r25
 3d4:	85 bb       	out	0x15, r24	; 21
 3d6:	08 95       	ret
 3d8:	62 30       	cpi	r22, 0x02	; 2
 3da:	91 f4       	brne	.+36     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3dc:	44 b3       	in	r20, 0x14	; 20
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	b9 01       	movw	r22, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <Set_Channel_Direction+0x13a>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	9a 95       	dec	r25
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <Set_Channel_Direction+0x136>
 3ee:	cb 01       	movw	r24, r22
 3f0:	96 2f       	mov	r25, r22
 3f2:	90 95       	com	r25
 3f4:	94 23       	and	r25, r20
 3f6:	94 bb       	out	0x14, r25	; 20
 3f8:	95 b3       	in	r25, 0x15	; 21
 3fa:	89 2b       	or	r24, r25
 3fc:	85 bb       	out	0x15, r24	; 21
 3fe:	08 95       	ret
 400:	61 30       	cpi	r22, 0x01	; 1
 402:	09 f0       	breq	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	43 c0       	rjmp	.+134    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 406:	44 b3       	in	r20, 0x14	; 20
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	b9 01       	movw	r22, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	66 0f       	add	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	9a 95       	dec	r25
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	cb 01       	movw	r24, r22
 41a:	84 2b       	or	r24, r20
 41c:	84 bb       	out	0x14, r24	; 20
 41e:	08 95       	ret
 420:	61 11       	cpse	r22, r1
 422:	12 c0       	rjmp	.+36     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 424:	41 b3       	in	r20, 0x11	; 17
 426:	21 e0       	ldi	r18, 0x01	; 1
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	b9 01       	movw	r22, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	9a 95       	dec	r25
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	cb 01       	movw	r24, r22
 438:	80 95       	com	r24
 43a:	94 2f       	mov	r25, r20
 43c:	98 23       	and	r25, r24
 43e:	91 bb       	out	0x11, r25	; 17
 440:	92 b3       	in	r25, 0x12	; 18
 442:	89 23       	and	r24, r25
 444:	82 bb       	out	0x12, r24	; 18
 446:	08 95       	ret
 448:	62 30       	cpi	r22, 0x02	; 2
 44a:	91 f4       	brne	.+36     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 44c:	41 b3       	in	r20, 0x11	; 17
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	b9 01       	movw	r22, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	9a 95       	dec	r25
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	cb 01       	movw	r24, r22
 460:	96 2f       	mov	r25, r22
 462:	90 95       	com	r25
 464:	94 23       	and	r25, r20
 466:	91 bb       	out	0x11, r25	; 17
 468:	92 b3       	in	r25, 0x12	; 18
 46a:	89 2b       	or	r24, r25
 46c:	82 bb       	out	0x12, r24	; 18
 46e:	08 95       	ret
 470:	61 30       	cpi	r22, 0x01	; 1
 472:	61 f4       	brne	.+24     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 474:	41 b3       	in	r20, 0x11	; 17
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	b9 01       	movw	r22, r18
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	9a 95       	dec	r25
 484:	e2 f7       	brpl	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 486:	cb 01       	movw	r24, r22
 488:	84 2b       	or	r24, r20
 48a:	81 bb       	out	0x11, r24	; 17
 48c:	08 95       	ret

0000048e <Write_Channel>:
 48e:	98 2f       	mov	r25, r24
 490:	97 70       	andi	r25, 0x07	; 7
 492:	86 95       	lsr	r24
 494:	86 95       	lsr	r24
 496:	86 95       	lsr	r24
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	41 f1       	breq	.+80     	; 0x4ec <Write_Channel+0x5e>
 49c:	38 f0       	brcs	.+14     	; 0x4ac <Write_Channel+0x1e>
 49e:	82 30       	cpi	r24, 0x02	; 2
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <Write_Channel+0x16>
 4a2:	44 c0       	rjmp	.+136    	; 0x52c <Write_Channel+0x9e>
 4a4:	83 30       	cpi	r24, 0x03	; 3
 4a6:	09 f4       	brne	.+2      	; 0x4aa <Write_Channel+0x1c>
 4a8:	60 c0       	rjmp	.+192    	; 0x56a <Write_Channel+0xdc>
 4aa:	08 95       	ret
 4ac:	61 11       	cpse	r22, r1
 4ae:	0e c0       	rjmp	.+28     	; 0x4cc <Write_Channel+0x3e>
 4b0:	4b b3       	in	r20, 0x1b	; 27
 4b2:	21 e0       	ldi	r18, 0x01	; 1
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	b9 01       	movw	r22, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <Write_Channel+0x30>
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	9a 95       	dec	r25
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <Write_Channel+0x2c>
 4c2:	cb 01       	movw	r24, r22
 4c4:	80 95       	com	r24
 4c6:	84 23       	and	r24, r20
 4c8:	8b bb       	out	0x1b, r24	; 27
 4ca:	08 95       	ret
 4cc:	61 30       	cpi	r22, 0x01	; 1
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <Write_Channel+0x44>
 4d0:	6a c0       	rjmp	.+212    	; 0x5a6 <Write_Channel+0x118>
 4d2:	4b b3       	in	r20, 0x1b	; 27
 4d4:	21 e0       	ldi	r18, 0x01	; 1
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	b9 01       	movw	r22, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <Write_Channel+0x52>
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	9a 95       	dec	r25
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <Write_Channel+0x4e>
 4e4:	cb 01       	movw	r24, r22
 4e6:	84 2b       	or	r24, r20
 4e8:	8b bb       	out	0x1b, r24	; 27
 4ea:	08 95       	ret
 4ec:	61 11       	cpse	r22, r1
 4ee:	0e c0       	rjmp	.+28     	; 0x50c <Write_Channel+0x7e>
 4f0:	48 b3       	in	r20, 0x18	; 24
 4f2:	21 e0       	ldi	r18, 0x01	; 1
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	b9 01       	movw	r22, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <Write_Channel+0x70>
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	9a 95       	dec	r25
 500:	e2 f7       	brpl	.-8      	; 0x4fa <Write_Channel+0x6c>
 502:	cb 01       	movw	r24, r22
 504:	80 95       	com	r24
 506:	84 23       	and	r24, r20
 508:	88 bb       	out	0x18, r24	; 24
 50a:	08 95       	ret
 50c:	61 30       	cpi	r22, 0x01	; 1
 50e:	09 f0       	breq	.+2      	; 0x512 <Write_Channel+0x84>
 510:	4a c0       	rjmp	.+148    	; 0x5a6 <Write_Channel+0x118>
 512:	48 b3       	in	r20, 0x18	; 24
 514:	21 e0       	ldi	r18, 0x01	; 1
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	b9 01       	movw	r22, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <Write_Channel+0x92>
 51c:	66 0f       	add	r22, r22
 51e:	77 1f       	adc	r23, r23
 520:	9a 95       	dec	r25
 522:	e2 f7       	brpl	.-8      	; 0x51c <Write_Channel+0x8e>
 524:	cb 01       	movw	r24, r22
 526:	84 2b       	or	r24, r20
 528:	88 bb       	out	0x18, r24	; 24
 52a:	08 95       	ret
 52c:	61 11       	cpse	r22, r1
 52e:	0e c0       	rjmp	.+28     	; 0x54c <Write_Channel+0xbe>
 530:	45 b3       	in	r20, 0x15	; 21
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	b9 01       	movw	r22, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <Write_Channel+0xb0>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	9a 95       	dec	r25
 540:	e2 f7       	brpl	.-8      	; 0x53a <Write_Channel+0xac>
 542:	cb 01       	movw	r24, r22
 544:	80 95       	com	r24
 546:	84 23       	and	r24, r20
 548:	85 bb       	out	0x15, r24	; 21
 54a:	08 95       	ret
 54c:	61 30       	cpi	r22, 0x01	; 1
 54e:	59 f5       	brne	.+86     	; 0x5a6 <Write_Channel+0x118>
 550:	45 b3       	in	r20, 0x15	; 21
 552:	21 e0       	ldi	r18, 0x01	; 1
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	b9 01       	movw	r22, r18
 558:	02 c0       	rjmp	.+4      	; 0x55e <Write_Channel+0xd0>
 55a:	66 0f       	add	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	9a 95       	dec	r25
 560:	e2 f7       	brpl	.-8      	; 0x55a <Write_Channel+0xcc>
 562:	cb 01       	movw	r24, r22
 564:	84 2b       	or	r24, r20
 566:	85 bb       	out	0x15, r24	; 21
 568:	08 95       	ret
 56a:	61 11       	cpse	r22, r1
 56c:	0e c0       	rjmp	.+28     	; 0x58a <Write_Channel+0xfc>
 56e:	42 b3       	in	r20, 0x12	; 18
 570:	21 e0       	ldi	r18, 0x01	; 1
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	b9 01       	movw	r22, r18
 576:	02 c0       	rjmp	.+4      	; 0x57c <Write_Channel+0xee>
 578:	66 0f       	add	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	9a 95       	dec	r25
 57e:	e2 f7       	brpl	.-8      	; 0x578 <Write_Channel+0xea>
 580:	cb 01       	movw	r24, r22
 582:	80 95       	com	r24
 584:	84 23       	and	r24, r20
 586:	82 bb       	out	0x12, r24	; 18
 588:	08 95       	ret
 58a:	61 30       	cpi	r22, 0x01	; 1
 58c:	61 f4       	brne	.+24     	; 0x5a6 <Write_Channel+0x118>
 58e:	42 b3       	in	r20, 0x12	; 18
 590:	21 e0       	ldi	r18, 0x01	; 1
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	b9 01       	movw	r22, r18
 596:	02 c0       	rjmp	.+4      	; 0x59c <Write_Channel+0x10e>
 598:	66 0f       	add	r22, r22
 59a:	77 1f       	adc	r23, r23
 59c:	9a 95       	dec	r25
 59e:	e2 f7       	brpl	.-8      	; 0x598 <Write_Channel+0x10a>
 5a0:	cb 01       	movw	r24, r22
 5a2:	84 2b       	or	r24, r20
 5a4:	82 bb       	out	0x12, r24	; 18
 5a6:	08 95       	ret

000005a8 <Read_Channel>:
 5a8:	28 2f       	mov	r18, r24
 5aa:	27 70       	andi	r18, 0x07	; 7
 5ac:	86 95       	lsr	r24
 5ae:	86 95       	lsr	r24
 5b0:	86 95       	lsr	r24
 5b2:	81 30       	cpi	r24, 0x01	; 1
 5b4:	81 f0       	breq	.+32     	; 0x5d6 <Read_Channel+0x2e>
 5b6:	28 f0       	brcs	.+10     	; 0x5c2 <Read_Channel+0x1a>
 5b8:	82 30       	cpi	r24, 0x02	; 2
 5ba:	b9 f0       	breq	.+46     	; 0x5ea <Read_Channel+0x42>
 5bc:	83 30       	cpi	r24, 0x03	; 3
 5be:	f9 f0       	breq	.+62     	; 0x5fe <Read_Channel+0x56>
 5c0:	27 c0       	rjmp	.+78     	; 0x610 <Read_Channel+0x68>
 5c2:	89 b3       	in	r24, 0x19	; 25
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <Read_Channel+0x24>
 5c8:	95 95       	asr	r25
 5ca:	87 95       	ror	r24
 5cc:	2a 95       	dec	r18
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <Read_Channel+0x20>
 5d0:	98 2f       	mov	r25, r24
 5d2:	91 70       	andi	r25, 0x01	; 1
 5d4:	1d c0       	rjmp	.+58     	; 0x610 <Read_Channel+0x68>
 5d6:	86 b3       	in	r24, 0x16	; 22
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <Read_Channel+0x38>
 5dc:	95 95       	asr	r25
 5de:	87 95       	ror	r24
 5e0:	2a 95       	dec	r18
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <Read_Channel+0x34>
 5e4:	98 2f       	mov	r25, r24
 5e6:	91 70       	andi	r25, 0x01	; 1
 5e8:	13 c0       	rjmp	.+38     	; 0x610 <Read_Channel+0x68>
 5ea:	83 b3       	in	r24, 0x13	; 19
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <Read_Channel+0x4c>
 5f0:	95 95       	asr	r25
 5f2:	87 95       	ror	r24
 5f4:	2a 95       	dec	r18
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <Read_Channel+0x48>
 5f8:	98 2f       	mov	r25, r24
 5fa:	91 70       	andi	r25, 0x01	; 1
 5fc:	09 c0       	rjmp	.+18     	; 0x610 <Read_Channel+0x68>
 5fe:	80 b3       	in	r24, 0x10	; 16
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	02 c0       	rjmp	.+4      	; 0x608 <Read_Channel+0x60>
 604:	95 95       	asr	r25
 606:	87 95       	ror	r24
 608:	2a 95       	dec	r18
 60a:	e2 f7       	brpl	.-8      	; 0x604 <Read_Channel+0x5c>
 60c:	98 2f       	mov	r25, r24
 60e:	91 70       	andi	r25, 0x01	; 1
 610:	89 2f       	mov	r24, r25
 612:	08 95       	ret

00000614 <Set_Port_Direction>:
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	41 f0       	breq	.+16     	; 0x628 <Set_Port_Direction+0x14>
 618:	28 f0       	brcs	.+10     	; 0x624 <Set_Port_Direction+0x10>
 61a:	82 30       	cpi	r24, 0x02	; 2
 61c:	39 f0       	breq	.+14     	; 0x62c <Set_Port_Direction+0x18>
 61e:	83 30       	cpi	r24, 0x03	; 3
 620:	39 f0       	breq	.+14     	; 0x630 <Set_Port_Direction+0x1c>
 622:	08 95       	ret
 624:	6a bb       	out	0x1a, r22	; 26
 626:	08 95       	ret
 628:	67 bb       	out	0x17, r22	; 23
 62a:	08 95       	ret
 62c:	64 bb       	out	0x14, r22	; 20
 62e:	08 95       	ret
 630:	61 bb       	out	0x11, r22	; 17
 632:	08 95       	ret

00000634 <Write_Port>:
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	41 f0       	breq	.+16     	; 0x648 <Write_Port+0x14>
 638:	28 f0       	brcs	.+10     	; 0x644 <Write_Port+0x10>
 63a:	82 30       	cpi	r24, 0x02	; 2
 63c:	39 f0       	breq	.+14     	; 0x64c <Write_Port+0x18>
 63e:	83 30       	cpi	r24, 0x03	; 3
 640:	39 f0       	breq	.+14     	; 0x650 <Write_Port+0x1c>
 642:	08 95       	ret
 644:	6b bb       	out	0x1b, r22	; 27
 646:	08 95       	ret
 648:	68 bb       	out	0x18, r22	; 24
 64a:	08 95       	ret
 64c:	65 bb       	out	0x15, r22	; 21
 64e:	08 95       	ret
 650:	62 bb       	out	0x12, r22	; 18
 652:	08 95       	ret

00000654 <Read_Port>:
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	41 f0       	breq	.+16     	; 0x668 <Read_Port+0x14>
 658:	28 f0       	brcs	.+10     	; 0x664 <Read_Port+0x10>
 65a:	82 30       	cpi	r24, 0x02	; 2
 65c:	39 f0       	breq	.+14     	; 0x66c <Read_Port+0x18>
 65e:	83 30       	cpi	r24, 0x03	; 3
 660:	39 f0       	breq	.+14     	; 0x670 <Read_Port+0x1c>
 662:	07 c0       	rjmp	.+14     	; 0x672 <Read_Port+0x1e>
 664:	99 b3       	in	r25, 0x19	; 25
 666:	05 c0       	rjmp	.+10     	; 0x672 <Read_Port+0x1e>
 668:	96 b3       	in	r25, 0x16	; 22
 66a:	03 c0       	rjmp	.+6      	; 0x672 <Read_Port+0x1e>
 66c:	93 b3       	in	r25, 0x13	; 19
 66e:	01 c0       	rjmp	.+2      	; 0x672 <Read_Port+0x1e>
 670:	90 b3       	in	r25, 0x10	; 16
 672:	89 2f       	mov	r24, r25
 674:	08 95       	ret

00000676 <Write_Nibble>:

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
 676:	cf 93       	push	r28
 678:	df 93       	push	r29
 67a:	d8 2f       	mov	r29, r24
 67c:	c4 2f       	mov	r28, r20
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 67e:	61 30       	cpi	r22, 0x01	; 1
 680:	41 f4       	brne	.+16     	; 0x692 <Write_Nibble+0x1c>
}
//Below Functions can be improved (Ask ChatGPT)
uint8 Read_Nibble(DIO_Port Port_ID , uint8 Significance)
{
	
	uint8 value = Read_Port(Port_ID);
 682:	e8 df       	rcall	.-48     	; 0x654 <Read_Port>
	return value ;
}

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 684:	8f 70       	andi	r24, 0x0F	; 15
 686:	90 e1       	ldi	r25, 0x10	; 16
 688:	c9 9f       	mul	r28, r25
 68a:	b0 01       	movw	r22, r0
 68c:	11 24       	eor	r1, r1
 68e:	68 2b       	or	r22, r24
}
//Below Functions can be improved (Ask ChatGPT)
uint8 Read_Nibble(DIO_Port Port_ID , uint8 Significance)
{
	
	uint8 value = Read_Port(Port_ID);
 690:	04 c0       	rjmp	.+8      	; 0x69a <Write_Nibble+0x24>
 692:	e0 df       	rcall	.-64     	; 0x654 <Read_Port>
	return value ;
}

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 694:	80 7f       	andi	r24, 0xF0	; 240
 696:	68 2f       	mov	r22, r24
	Write_Port(Port_ID,Value);
 698:	6c 2b       	or	r22, r28
 69a:	8d 2f       	mov	r24, r29
 69c:	cb df       	rcall	.-106    	; 0x634 <Write_Port>
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	08 95       	ret

000006a4 <_exit>:
 6a4:	f8 94       	cli

000006a6 <__stop_program>:
 6a6:	ff cf       	rjmp	.-2      	; 0x6a6 <__stop_program>

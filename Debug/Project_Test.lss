
Project_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000058e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013dd  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094d  00000000  00000000  00001b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d6e  00000000  00000000  0000246a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  000031d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004317  00000000  00000000  00003360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bc9  00000000  00000000  00007677  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00008240  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001345  00000000  00000000  00008310  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	02 d0       	rcall	.+4      	; 0x66 <main>
  62:	93 c2       	rjmp	.+1318   	; 0x58a <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <main>:
#include <util/delay.h>


int main(void)
{	
	SSD_init();
  66:	90 d0       	rcall	.+288    	; 0x188 <SSD_init>
	Buzzer_Init();
  68:	72 d0       	rcall	.+228    	; 0x14e <Buzzer_Init>
	PushB_Init(PushB0);
  6a:	88 e0       	ldi	r24, 0x08	; 8
  6c:	6d d0       	rcall	.+218    	; 0x148 <PushB_Init>
	PushB_Init(PushB1);
  6e:	8e e1       	ldi	r24, 0x1E	; 30
  70:	6b d0       	rcall	.+214    	; 0x148 <PushB_Init>
	PushB_Init(PushB2);
  72:	8a e1       	ldi	r24, 0x1A	; 26
  74:	69 d0       	rcall	.+210    	; 0x148 <PushB_Init>
  76:	0f 2e       	mov	r0, r31
	
	uint8 PushB0_Status = 0 ;
	uint8 PushB1_Status = 0 ;
	uint8 PushB2_Status = 0 ;
	uint8 Flag = 0 ;
	sint8 value = 26 ;
  78:	fa e1       	ldi	r31, 0x1A	; 26
  7a:	ef 2e       	mov	r14, r31
  7c:	f0 2d       	mov	r31, r0
  7e:	c1 2c       	mov	r12, r1
	PushB_Init(PushB2);
	
	uint8 PushB0_Status = 0 ;
	uint8 PushB1_Status = 0 ;
	uint8 PushB2_Status = 0 ;
	uint8 Flag = 0 ;
  80:	00 e0       	ldi	r16, 0x00	; 0
	PushB_Init(PushB1);
	PushB_Init(PushB2);
	
	uint8 PushB0_Status = 0 ;
	uint8 PushB1_Status = 0 ;
	uint8 PushB2_Status = 0 ;
  82:	a1 2c       	mov	r10, r1
	PushB_Init(PushB0);
	PushB_Init(PushB1);
	PushB_Init(PushB2);
	
	uint8 PushB0_Status = 0 ;
	uint8 PushB1_Status = 0 ;
  84:	b1 2c       	mov	r11, r1
	Buzzer_Init();
	PushB_Init(PushB0);
	PushB_Init(PushB1);
	PushB_Init(PushB2);
	
	uint8 PushB0_Status = 0 ;
  86:	d1 2c       	mov	r13, r1
		if(PushB0_Status == 0 && Debounced_Read_PushB(PushB0))
		{
			PushB0_Status = 1;
			value++ ;
		}
		else if(!Debounced_Read_PushB(PushB0) == 1) PushB0_Status = 0;
  88:	99 24       	eor	r9, r9
		if(value > 99 ) value = 0;
		if(value < 0  ) value = 99;
		
		if(PushB0_Status == 0 && Debounced_Read_PushB(PushB0))
		{
			PushB0_Status = 1;
  8a:	93 94       	inc	r9
  8c:	f1 2c       	mov	r15, r1
  8e:	83 e6       	ldi	r24, 0x63	; 99
	uint8 Flag = 0 ;
	sint8 value = 26 ;
	
	while(1)
	{
		if(value > 99 ) value = 0;
  90:	8e 15       	cp	r24, r14
  92:	3c f0       	brlt	.+14     	; 0xa2 <main+0x3c>
  94:	ee 20       	and	r14, r14
		if(value < 0  ) value = 99;
  96:	34 f4       	brge	.+12     	; 0xa4 <main+0x3e>
  98:	0f 2e       	mov	r0, r31
  9a:	f3 e6       	ldi	r31, 0x63	; 99
  9c:	ef 2e       	mov	r14, r31
  9e:	f0 2d       	mov	r31, r0
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <main+0x3e>
	uint8 Flag = 0 ;
	sint8 value = 26 ;
	
	while(1)
	{
		if(value > 99 ) value = 0;
  a2:	e1 2c       	mov	r14, r1
		if(value < 0  ) value = 99;
		
		if(PushB0_Status == 0 && Debounced_Read_PushB(PushB0))
  a4:	b1 10       	cpse	r11, r1
  a6:	07 c0       	rjmp	.+14     	; 0xb6 <main+0x50>
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	58 d0       	rcall	.+176    	; 0x15c <Debounced_Read_PushB>
  ac:	88 23       	and	r24, r24
  ae:	19 f0       	breq	.+6      	; 0xb6 <main+0x50>
		{
			PushB0_Status = 1;
			value++ ;
  b0:	e3 94       	inc	r14
		if(value > 99 ) value = 0;
		if(value < 0  ) value = 99;
		
		if(PushB0_Status == 0 && Debounced_Read_PushB(PushB0))
		{
			PushB0_Status = 1;
  b2:	b9 2c       	mov	r11, r9
			value++ ;
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <main+0x5a>
		}
		else if(!Debounced_Read_PushB(PushB0) == 1) PushB0_Status = 0;
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	51 d0       	rcall	.+162    	; 0x15c <Debounced_Read_PushB>
  ba:	81 11       	cpse	r24, r1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <main+0x5a>
  be:	bd 2c       	mov	r11, r13
		if(PushB1_Status == 0 && Debounced_Read_PushB(PushB1))
  c0:	a1 10       	cpse	r10, r1
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <main+0x6c>
  c4:	8e e1       	ldi	r24, 0x1E	; 30
  c6:	4a d0       	rcall	.+148    	; 0x15c <Debounced_Read_PushB>
  c8:	88 23       	and	r24, r24
  ca:	19 f0       	breq	.+6      	; 0xd2 <main+0x6c>
		{
			PushB1_Status = 1;
			value-- ;
  cc:	ea 94       	dec	r14
			value++ ;
		}
		else if(!Debounced_Read_PushB(PushB0) == 1) PushB0_Status = 0;
		if(PushB1_Status == 0 && Debounced_Read_PushB(PushB1))
		{
			PushB1_Status = 1;
  ce:	a9 2c       	mov	r10, r9
			value-- ;
  d0:	05 c0       	rjmp	.+10     	; 0xdc <main+0x76>
		}
		else if(!Debounced_Read_PushB(PushB1) == 1) PushB1_Status = 0;
  d2:	8e e1       	ldi	r24, 0x1E	; 30
  d4:	43 d0       	rcall	.+134    	; 0x15c <Debounced_Read_PushB>
  d6:	81 11       	cpse	r24, r1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <main+0x76>
	
		
		if(PushB2_Status == 0 && Debounced_Read_PushB(PushB2))
  da:	ad 2c       	mov	r10, r13
  dc:	01 11       	cpse	r16, r1
  de:	04 c0       	rjmp	.+8      	; 0xe8 <main+0x82>
  e0:	8a e1       	ldi	r24, 0x1A	; 26
  e2:	3c d0       	rcall	.+120    	; 0x15c <Debounced_Read_PushB>
  e4:	81 11       	cpse	r24, r1
  e6:	08 c0       	rjmp	.+16     	; 0xf8 <main+0x92>
			//while(Debounced_Read_PushB(PushB2));
			//PushB2_Status = 0;
			
		}
		
		else if(!Debounced_Read_PushB(PushB2) == 1)	 
  e8:	8a e1       	ldi	r24, 0x1A	; 26
  ea:	38 d0       	rcall	.+112    	; 0x15c <Debounced_Read_PushB>
  ec:	81 11       	cpse	r24, r1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <main+0x8c>
  f0:	0d 2d       	mov	r16, r13
			PushB2_Status = 0;
			
	
		if(Flag)
  f2:	c1 10       	cpse	r12, r1
  f4:	03 c0       	rjmp	.+6      	; 0xfc <main+0x96>
	
		
		if(PushB2_Status == 0 && Debounced_Read_PushB(PushB2))
		{
			PushB2_Status = 1;
			Flag = 1;
  f6:	25 c0       	rjmp	.+74     	; 0x142 <main+0xdc>
		else if(!Debounced_Read_PushB(PushB1) == 1) PushB1_Status = 0;
	
		
		if(PushB2_Status == 0 && Debounced_Read_PushB(PushB2))
		{
			PushB2_Status = 1;
  f8:	c9 2c       	mov	r12, r9
			PushB2_Status = 0;
			
	
		if(Flag)
		{
			for(value ; value >=0 ; value--)
  fa:	09 2d       	mov	r16, r9
  fc:	ee 20       	and	r14, r14
			{
				for(uint8 counter = 0 ; counter <50 ; counter ++)
				{
					SSD_Write_Two_Digits(value);
  fe:	f4 f4       	brge	.+60     	; 0x13c <main+0xd6>
 100:	20 c0       	rjmp	.+64     	; 0x142 <main+0xdc>
 102:	1d 2f       	mov	r17, r29
					if(!Debounced_Read_PushB(PushB2)) PushB2_Status = 0 ;
 104:	8d 2f       	mov	r24, r29
 106:	78 d0       	rcall	.+240    	; 0x1f8 <SSD_Write_Two_Digits>
 108:	8a e1       	ldi	r24, 0x1A	; 26
 10a:	28 d0       	rcall	.+80     	; 0x15c <Debounced_Read_PushB>
 10c:	88 23       	and	r24, r24
	
					if(PushB2_Status == 0 && Debounced_Read_PushB(PushB2))
 10e:	11 f0       	breq	.+4      	; 0x114 <main+0xae>
 110:	01 11       	cpse	r16, r1
 112:	0c c0       	rjmp	.+24     	; 0x12c <main+0xc6>
 114:	8a e1       	ldi	r24, 0x1A	; 26
 116:	22 d0       	rcall	.+68     	; 0x15c <Debounced_Read_PushB>
 118:	88 23       	and	r24, r24
 11a:	39 f0       	breq	.+14     	; 0x12a <main+0xc4>
					{
						Flag = 0 ;
						while(Debounced_Read_PushB(PushB2));
 11c:	8a e1       	ldi	r24, 0x1A	; 26
 11e:	1e d0       	rcall	.+60     	; 0x15c <Debounced_Read_PushB>
 120:	81 11       	cpse	r24, r1
 122:	fc cf       	rjmp	.-8      	; 0x11c <main+0xb6>
 124:	cd 2c       	mov	r12, r13
 126:	0d 2d       	mov	r16, r13
 128:	0c c0       	rjmp	.+24     	; 0x142 <main+0xdc>
 12a:	0f 2d       	mov	r16, r15
 12c:	c1 50       	subi	r28, 0x01	; 1
	
		if(Flag)
		{
			for(value ; value >=0 ; value--)
			{
				for(uint8 counter = 0 ; counter <50 ; counter ++)
 12e:	49 f7       	brne	.-46     	; 0x102 <main+0x9c>
						break;
					
					}
					
				}
				if(!Flag) break;
 130:	cc 20       	and	r12, r12
 132:	39 f0       	breq	.+14     	; 0x142 <main+0xdc>
 134:	ee 24       	eor	r14, r14
 136:	ea 94       	dec	r14
 138:	e1 0e       	add	r14, r17
			PushB2_Status = 0;
			
	
		if(Flag)
		{
			for(value ; value >=0 ; value--)
 13a:	1a f0       	brmi	.+6      	; 0x142 <main+0xdc>
		else if(!Debounced_Read_PushB(PushB1) == 1) PushB1_Status = 0;
	
		
		if(PushB2_Status == 0 && Debounced_Read_PushB(PushB2))
		{
			PushB2_Status = 1;
 13c:	c2 e3       	ldi	r28, 0x32	; 50
		{
			for(value ; value >=0 ; value--)
			{
				for(uint8 counter = 0 ; counter <50 ; counter ++)
				{
					SSD_Write_Two_Digits(value);
 13e:	de 2d       	mov	r29, r14
 140:	e0 cf       	rjmp	.-64     	; 0x102 <main+0x9c>
			}
			
				
		}
		
		SSD_Write_Two_Digits(value);
 142:	8e 2d       	mov	r24, r14
 144:	59 d0       	rcall	.+178    	; 0x1f8 <SSD_Write_Two_Digits>
 146:	a3 cf       	rjmp	.-186    	; 0x8e <main+0x28>

00000148 <PushB_Init>:
	}
 148:	60 e0       	ldi	r22, 0x00	; 0
	Write_Channel(LED,Level);
}

void Write_Buzzer(DIO_Channel Buzzer ,STD_Level Level)
{
	Write_Channel(Buzzer,Level);
 14a:	6d c0       	rjmp	.+218    	; 0x226 <Set_Channel_Direction>
 14c:	08 95       	ret

0000014e <Buzzer_Init>:
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	69 d0       	rcall	.+210    	; 0x226 <Set_Channel_Direction>
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	55 c1       	rjmp	.+682    	; 0x404 <Write_Channel>
 15a:	08 95       	ret

0000015c <Debounced_Read_PushB>:
}


STD_Level Debounced_Read_PushB (DIO_Channel PushB)
{
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
	
	if(Read_Channel(PushB)== HIGH)
 160:	de d1       	rcall	.+956    	; 0x51e <Read_Channel>
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	69 f4       	brne	.+26     	; 0x180 <Debounced_Read_PushB+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	83 ed       	ldi	r24, 0xD3	; 211
 168:	90 e3       	ldi	r25, 0x30	; 48
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <Debounced_Read_PushB+0xe>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <Debounced_Read_PushB+0x14>
 170:	00 00       	nop
	{
		_delay_ms(50);
		if(Read_Channel(PushB) == HIGH)
 172:	8c 2f       	mov	r24, r28
 174:	d4 d1       	rcall	.+936    	; 0x51e <Read_Channel>
		{
			return HIGH;
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	19 f0       	breq	.+6      	; 0x182 <Debounced_Read_PushB+0x26>
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	01 c0       	rjmp	.+2      	; 0x182 <Debounced_Read_PushB+0x26>
		}
	}
	return LOW;
 180:	90 e0       	ldi	r25, 0x00	; 0

}
 182:	89 2f       	mov	r24, r25
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <SSD_init>:
#include <DIO_HW.h>


void SSD_init()
{
	Set_Channel_Direction(EN1 , OUTPUT);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	89 e0       	ldi	r24, 0x09	; 9
 18c:	4c d0       	rcall	.+152    	; 0x226 <Set_Channel_Direction>
	Set_Channel_Direction(EN2 , OUTPUT);
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	8a e0       	ldi	r24, 0x0A	; 10
 192:	49 d0       	rcall	.+146    	; 0x226 <Set_Channel_Direction>
	Write_Channel(EN1,HIGH);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	89 e0       	ldi	r24, 0x09	; 9
 198:	35 d1       	rcall	.+618    	; 0x404 <Write_Channel>
	Write_Channel(EN2,LOW);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	8a e0       	ldi	r24, 0x0A	; 10
 19e:	32 d1       	rcall	.+612    	; 0x404 <Write_Channel>
 1a0:	8a b3       	in	r24, 0x1a	; 26
	DDRA_REG |= 0xF0;
 1a2:	80 6f       	ori	r24, 0xF0	; 240
 1a4:	8a bb       	out	0x1a, r24	; 26
 1a6:	8b b3       	in	r24, 0x1b	; 27
	PORTA_REG &= 0x0F;
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	08 95       	ret

000001ae <SSD_Write_One_Digit>:
 1ae:	6a 30       	cpi	r22, 0x0A	; 10
	
}
void SSD_Write_One_Digit(SSD_Num SSD_Number , uint8 value)
{
	if(  value >= 0 && value < 10  )
 1b0:	38 f4       	brcc	.+14     	; 0x1c0 <SSD_Write_One_Digit+0x12>
	{
		uint8 PortData = PORTA_REG & 0x0F; 
 1b2:	9b b3       	in	r25, 0x1b	; 27
 1b4:	9f 70       	andi	r25, 0x0F	; 15
		value = value << 4 ;
		PortData = PortData | value ;
 1b6:	62 95       	swap	r22
 1b8:	60 7f       	andi	r22, 0xF0	; 240
 1ba:	69 2b       	or	r22, r25
		PORTA_REG = PortData;
 1bc:	6b bb       	out	0x1b, r22	; 27
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <SSD_Write_One_Digit+0x18>
	}
	else	PORTA_REG &= 0x0F;
 1c0:	9b b3       	in	r25, 0x1b	; 27
 1c2:	9f 70       	andi	r25, 0x0F	; 15
 1c4:	9b bb       	out	0x1b, r25	; 27
	
	switch(SSD_Number)
 1c6:	88 23       	and	r24, r24
 1c8:	19 f0       	breq	.+6      	; 0x1d0 <SSD_Write_One_Digit+0x22>
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	41 f0       	breq	.+16     	; 0x1de <SSD_Write_One_Digit+0x30>
 1ce:	0d c0       	rjmp	.+26     	; 0x1ea <SSD_Write_One_Digit+0x3c>
	{
		case SSD_1:
		Write_Channel(EN1,HIGH);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	89 e0       	ldi	r24, 0x09	; 9
 1d4:	17 d1       	rcall	.+558    	; 0x404 <Write_Channel>
		Write_Channel(EN2,LOW);
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	8a e0       	ldi	r24, 0x0A	; 10
 1da:	14 d1       	rcall	.+552    	; 0x404 <Write_Channel>
		break;
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <SSD_Write_One_Digit+0x3c>
		case SSD_2:
		Write_Channel(EN1,LOW);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	89 e0       	ldi	r24, 0x09	; 9
 1e2:	10 d1       	rcall	.+544    	; 0x404 <Write_Channel>
		Write_Channel(EN2,HIGH);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	8a e0       	ldi	r24, 0x0A	; 10
 1e8:	0d d1       	rcall	.+538    	; 0x404 <Write_Channel>
 1ea:	8f e3       	ldi	r24, 0x3F	; 63
 1ec:	9c e9       	ldi	r25, 0x9C	; 156
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <SSD_Write_One_Digit+0x40>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <SSD_Write_One_Digit+0x46>
 1f4:	00 00       	nop
 1f6:	08 95       	ret

000001f8 <SSD_Write_Two_Digits>:
 1f8:	cf 93       	push	r28
void SSD_Write_Two_Digits(uint8 value)
{
	uint8 First_Digit = value % 10 ;
	uint8 Second_Digit = value / 10 ;
	
	SSD_Write_One_Digit(SSD_1,First_Digit);
 1fa:	cd ec       	ldi	r28, 0xCD	; 205
 1fc:	8c 9f       	mul	r24, r28
 1fe:	c1 2d       	mov	r28, r1
 200:	11 24       	eor	r1, r1
 202:	c6 95       	lsr	r28
 204:	c6 95       	lsr	r28
 206:	c6 95       	lsr	r28
 208:	2c 2f       	mov	r18, r28
 20a:	22 0f       	add	r18, r18
 20c:	92 2f       	mov	r25, r18
 20e:	99 0f       	add	r25, r25
 210:	99 0f       	add	r25, r25
 212:	92 0f       	add	r25, r18
 214:	68 2f       	mov	r22, r24
 216:	69 1b       	sub	r22, r25
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	c9 df       	rcall	.-110    	; 0x1ae <SSD_Write_One_Digit>
	SSD_Write_One_Digit(SSD_2,Second_Digit);
 21c:	6c 2f       	mov	r22, r28
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	c6 df       	rcall	.-116    	; 0x1ae <SSD_Write_One_Digit>

	
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <Set_Channel_Direction>:
		break;
		case PC:
		TOGGLE_BIT(PORTC_REG,pin);
		break;
		case PD:
		TOGGLE_BIT(PORTD_REG,pin);
 226:	98 2f       	mov	r25, r24
 228:	97 70       	andi	r25, 0x07	; 7
 22a:	86 95       	lsr	r24
 22c:	86 95       	lsr	r24
 22e:	86 95       	lsr	r24
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	09 f4       	brne	.+2      	; 0x236 <Set_Channel_Direction+0x10>
 234:	40 c0       	rjmp	.+128    	; 0x2b6 <Set_Channel_Direction+0x90>
 236:	38 f0       	brcs	.+14     	; 0x246 <Set_Channel_Direction+0x20>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	09 f4       	brne	.+2      	; 0x23e <Set_Channel_Direction+0x18>
 23c:	74 c0       	rjmp	.+232    	; 0x326 <Set_Channel_Direction+0x100>
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	09 f4       	brne	.+2      	; 0x244 <Set_Channel_Direction+0x1e>
 242:	a9 c0       	rjmp	.+338    	; 0x396 <Set_Channel_Direction+0x170>
 244:	08 95       	ret
 246:	61 11       	cpse	r22, r1
 248:	12 c0       	rjmp	.+36     	; 0x26e <Set_Channel_Direction+0x48>
 24a:	4a b3       	in	r20, 0x1a	; 26
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	b9 01       	movw	r22, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <Set_Channel_Direction+0x32>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	9a 95       	dec	r25
 25a:	e2 f7       	brpl	.-8      	; 0x254 <Set_Channel_Direction+0x2e>
 25c:	cb 01       	movw	r24, r22
 25e:	80 95       	com	r24
 260:	94 2f       	mov	r25, r20
 262:	98 23       	and	r25, r24
 264:	9a bb       	out	0x1a, r25	; 26
 266:	9b b3       	in	r25, 0x1b	; 27
 268:	89 23       	and	r24, r25
 26a:	8b bb       	out	0x1b, r24	; 27
 26c:	08 95       	ret
 26e:	62 30       	cpi	r22, 0x02	; 2
 270:	91 f4       	brne	.+36     	; 0x296 <Set_Channel_Direction+0x70>
 272:	4a b3       	in	r20, 0x1a	; 26
 274:	21 e0       	ldi	r18, 0x01	; 1
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	b9 01       	movw	r22, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <Set_Channel_Direction+0x5a>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	9a 95       	dec	r25
 282:	e2 f7       	brpl	.-8      	; 0x27c <Set_Channel_Direction+0x56>
 284:	cb 01       	movw	r24, r22
 286:	96 2f       	mov	r25, r22
 288:	90 95       	com	r25
 28a:	94 23       	and	r25, r20
 28c:	9a bb       	out	0x1a, r25	; 26
 28e:	9b b3       	in	r25, 0x1b	; 27
 290:	89 2b       	or	r24, r25
 292:	8b bb       	out	0x1b, r24	; 27
 294:	08 95       	ret
 296:	61 30       	cpi	r22, 0x01	; 1
 298:	09 f0       	breq	.+2      	; 0x29c <Set_Channel_Direction+0x76>
 29a:	b3 c0       	rjmp	.+358    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 29c:	4a b3       	in	r20, 0x1a	; 26
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	b9 01       	movw	r22, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <Set_Channel_Direction+0x84>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	9a 95       	dec	r25
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <Set_Channel_Direction+0x80>
 2ae:	cb 01       	movw	r24, r22
 2b0:	84 2b       	or	r24, r20
 2b2:	8a bb       	out	0x1a, r24	; 26
 2b4:	08 95       	ret
 2b6:	61 11       	cpse	r22, r1
 2b8:	12 c0       	rjmp	.+36     	; 0x2de <Set_Channel_Direction+0xb8>
 2ba:	47 b3       	in	r20, 0x17	; 23
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	b9 01       	movw	r22, r18
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <Set_Channel_Direction+0xa2>
 2c4:	66 0f       	add	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	9a 95       	dec	r25
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <Set_Channel_Direction+0x9e>
 2cc:	cb 01       	movw	r24, r22
 2ce:	80 95       	com	r24
 2d0:	94 2f       	mov	r25, r20
 2d2:	98 23       	and	r25, r24
 2d4:	97 bb       	out	0x17, r25	; 23
 2d6:	98 b3       	in	r25, 0x18	; 24
 2d8:	89 23       	and	r24, r25
 2da:	88 bb       	out	0x18, r24	; 24
 2dc:	08 95       	ret
 2de:	62 30       	cpi	r22, 0x02	; 2
 2e0:	91 f4       	brne	.+36     	; 0x306 <Set_Channel_Direction+0xe0>
 2e2:	47 b3       	in	r20, 0x17	; 23
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	b9 01       	movw	r22, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <Set_Channel_Direction+0xca>
 2ec:	66 0f       	add	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	9a 95       	dec	r25
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <Set_Channel_Direction+0xc6>
 2f4:	cb 01       	movw	r24, r22
 2f6:	96 2f       	mov	r25, r22
 2f8:	90 95       	com	r25
 2fa:	94 23       	and	r25, r20
 2fc:	97 bb       	out	0x17, r25	; 23
 2fe:	98 b3       	in	r25, 0x18	; 24
 300:	89 2b       	or	r24, r25
 302:	88 bb       	out	0x18, r24	; 24
 304:	08 95       	ret
 306:	61 30       	cpi	r22, 0x01	; 1
 308:	09 f0       	breq	.+2      	; 0x30c <Set_Channel_Direction+0xe6>
 30a:	7b c0       	rjmp	.+246    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 30c:	47 b3       	in	r20, 0x17	; 23
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	b9 01       	movw	r22, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <Set_Channel_Direction+0xf4>
 316:	66 0f       	add	r22, r22
 318:	77 1f       	adc	r23, r23
 31a:	9a 95       	dec	r25
 31c:	e2 f7       	brpl	.-8      	; 0x316 <Set_Channel_Direction+0xf0>
 31e:	cb 01       	movw	r24, r22
 320:	84 2b       	or	r24, r20
 322:	87 bb       	out	0x17, r24	; 23
 324:	08 95       	ret
 326:	61 11       	cpse	r22, r1
 328:	12 c0       	rjmp	.+36     	; 0x34e <Set_Channel_Direction+0x128>
 32a:	44 b3       	in	r20, 0x14	; 20
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	b9 01       	movw	r22, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <Set_Channel_Direction+0x112>
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	9a 95       	dec	r25
 33a:	e2 f7       	brpl	.-8      	; 0x334 <Set_Channel_Direction+0x10e>
 33c:	cb 01       	movw	r24, r22
 33e:	80 95       	com	r24
 340:	94 2f       	mov	r25, r20
 342:	98 23       	and	r25, r24
 344:	94 bb       	out	0x14, r25	; 20
 346:	95 b3       	in	r25, 0x15	; 21
 348:	89 23       	and	r24, r25
 34a:	85 bb       	out	0x15, r24	; 21
 34c:	08 95       	ret
 34e:	62 30       	cpi	r22, 0x02	; 2
 350:	91 f4       	brne	.+36     	; 0x376 <Set_Channel_Direction+0x150>
 352:	44 b3       	in	r20, 0x14	; 20
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	b9 01       	movw	r22, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <Set_Channel_Direction+0x13a>
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	9a 95       	dec	r25
 362:	e2 f7       	brpl	.-8      	; 0x35c <Set_Channel_Direction+0x136>
 364:	cb 01       	movw	r24, r22
 366:	96 2f       	mov	r25, r22
 368:	90 95       	com	r25
 36a:	94 23       	and	r25, r20
 36c:	94 bb       	out	0x14, r25	; 20
 36e:	95 b3       	in	r25, 0x15	; 21
 370:	89 2b       	or	r24, r25
 372:	85 bb       	out	0x15, r24	; 21
 374:	08 95       	ret
 376:	61 30       	cpi	r22, 0x01	; 1
 378:	09 f0       	breq	.+2      	; 0x37c <Set_Channel_Direction+0x156>
 37a:	43 c0       	rjmp	.+134    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 37c:	44 b3       	in	r20, 0x14	; 20
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	b9 01       	movw	r22, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <Set_Channel_Direction+0x164>
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	9a 95       	dec	r25
 38c:	e2 f7       	brpl	.-8      	; 0x386 <Set_Channel_Direction+0x160>
 38e:	cb 01       	movw	r24, r22
 390:	84 2b       	or	r24, r20
 392:	84 bb       	out	0x14, r24	; 20
 394:	08 95       	ret
 396:	61 11       	cpse	r22, r1
 398:	12 c0       	rjmp	.+36     	; 0x3be <Set_Channel_Direction+0x198>
 39a:	41 b3       	in	r20, 0x11	; 17
 39c:	21 e0       	ldi	r18, 0x01	; 1
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	b9 01       	movw	r22, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <Set_Channel_Direction+0x182>
 3a4:	66 0f       	add	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	9a 95       	dec	r25
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <Set_Channel_Direction+0x17e>
 3ac:	cb 01       	movw	r24, r22
 3ae:	80 95       	com	r24
 3b0:	94 2f       	mov	r25, r20
 3b2:	98 23       	and	r25, r24
 3b4:	91 bb       	out	0x11, r25	; 17
 3b6:	92 b3       	in	r25, 0x12	; 18
 3b8:	89 23       	and	r24, r25
 3ba:	82 bb       	out	0x12, r24	; 18
 3bc:	08 95       	ret
 3be:	62 30       	cpi	r22, 0x02	; 2
 3c0:	91 f4       	brne	.+36     	; 0x3e6 <Set_Channel_Direction+0x1c0>
 3c2:	41 b3       	in	r20, 0x11	; 17
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	b9 01       	movw	r22, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <Set_Channel_Direction+0x1aa>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	9a 95       	dec	r25
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <Set_Channel_Direction+0x1a6>
 3d4:	cb 01       	movw	r24, r22
 3d6:	96 2f       	mov	r25, r22
 3d8:	90 95       	com	r25
 3da:	94 23       	and	r25, r20
 3dc:	91 bb       	out	0x11, r25	; 17
 3de:	92 b3       	in	r25, 0x12	; 18
 3e0:	89 2b       	or	r24, r25
 3e2:	82 bb       	out	0x12, r24	; 18
 3e4:	08 95       	ret
 3e6:	61 30       	cpi	r22, 0x01	; 1
 3e8:	61 f4       	brne	.+24     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3ea:	41 b3       	in	r20, 0x11	; 17
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	b9 01       	movw	r22, r18
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <Set_Channel_Direction+0x1d2>
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	9a 95       	dec	r25
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <Set_Channel_Direction+0x1ce>
 3fc:	cb 01       	movw	r24, r22
 3fe:	84 2b       	or	r24, r20
 400:	81 bb       	out	0x11, r24	; 17
 402:	08 95       	ret

00000404 <Write_Channel>:
 404:	98 2f       	mov	r25, r24
 406:	97 70       	andi	r25, 0x07	; 7
 408:	86 95       	lsr	r24
 40a:	86 95       	lsr	r24
 40c:	86 95       	lsr	r24
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	41 f1       	breq	.+80     	; 0x462 <Write_Channel+0x5e>
 412:	38 f0       	brcs	.+14     	; 0x422 <Write_Channel+0x1e>
 414:	82 30       	cpi	r24, 0x02	; 2
 416:	09 f4       	brne	.+2      	; 0x41a <Write_Channel+0x16>
 418:	44 c0       	rjmp	.+136    	; 0x4a2 <Write_Channel+0x9e>
 41a:	83 30       	cpi	r24, 0x03	; 3
 41c:	09 f4       	brne	.+2      	; 0x420 <Write_Channel+0x1c>
 41e:	60 c0       	rjmp	.+192    	; 0x4e0 <Write_Channel+0xdc>
 420:	08 95       	ret
 422:	61 11       	cpse	r22, r1
 424:	0e c0       	rjmp	.+28     	; 0x442 <Write_Channel+0x3e>
 426:	4b b3       	in	r20, 0x1b	; 27
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	b9 01       	movw	r22, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <Write_Channel+0x30>
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	9a 95       	dec	r25
 436:	e2 f7       	brpl	.-8      	; 0x430 <Write_Channel+0x2c>
 438:	cb 01       	movw	r24, r22
 43a:	80 95       	com	r24
 43c:	84 23       	and	r24, r20
 43e:	8b bb       	out	0x1b, r24	; 27
 440:	08 95       	ret
 442:	61 30       	cpi	r22, 0x01	; 1
 444:	09 f0       	breq	.+2      	; 0x448 <Write_Channel+0x44>
 446:	6a c0       	rjmp	.+212    	; 0x51c <Write_Channel+0x118>
 448:	4b b3       	in	r20, 0x1b	; 27
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	b9 01       	movw	r22, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <Write_Channel+0x52>
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	9a 95       	dec	r25
 458:	e2 f7       	brpl	.-8      	; 0x452 <Write_Channel+0x4e>
 45a:	cb 01       	movw	r24, r22
 45c:	84 2b       	or	r24, r20
 45e:	8b bb       	out	0x1b, r24	; 27
 460:	08 95       	ret
 462:	61 11       	cpse	r22, r1
 464:	0e c0       	rjmp	.+28     	; 0x482 <Write_Channel+0x7e>
 466:	48 b3       	in	r20, 0x18	; 24
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	b9 01       	movw	r22, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <Write_Channel+0x70>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	9a 95       	dec	r25
 476:	e2 f7       	brpl	.-8      	; 0x470 <Write_Channel+0x6c>
 478:	cb 01       	movw	r24, r22
 47a:	80 95       	com	r24
 47c:	84 23       	and	r24, r20
 47e:	88 bb       	out	0x18, r24	; 24
 480:	08 95       	ret
 482:	61 30       	cpi	r22, 0x01	; 1
 484:	09 f0       	breq	.+2      	; 0x488 <Write_Channel+0x84>
 486:	4a c0       	rjmp	.+148    	; 0x51c <Write_Channel+0x118>
 488:	48 b3       	in	r20, 0x18	; 24
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	b9 01       	movw	r22, r18
 490:	02 c0       	rjmp	.+4      	; 0x496 <Write_Channel+0x92>
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	9a 95       	dec	r25
 498:	e2 f7       	brpl	.-8      	; 0x492 <Write_Channel+0x8e>
 49a:	cb 01       	movw	r24, r22
 49c:	84 2b       	or	r24, r20
 49e:	88 bb       	out	0x18, r24	; 24
 4a0:	08 95       	ret
 4a2:	61 11       	cpse	r22, r1
 4a4:	0e c0       	rjmp	.+28     	; 0x4c2 <Write_Channel+0xbe>
 4a6:	45 b3       	in	r20, 0x15	; 21
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	b9 01       	movw	r22, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <Write_Channel+0xb0>
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	9a 95       	dec	r25
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <Write_Channel+0xac>
 4b8:	cb 01       	movw	r24, r22
 4ba:	80 95       	com	r24
 4bc:	84 23       	and	r24, r20
 4be:	85 bb       	out	0x15, r24	; 21
 4c0:	08 95       	ret
 4c2:	61 30       	cpi	r22, 0x01	; 1
 4c4:	59 f5       	brne	.+86     	; 0x51c <Write_Channel+0x118>
 4c6:	45 b3       	in	r20, 0x15	; 21
 4c8:	21 e0       	ldi	r18, 0x01	; 1
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	b9 01       	movw	r22, r18
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <Write_Channel+0xd0>
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	9a 95       	dec	r25
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <Write_Channel+0xcc>
 4d8:	cb 01       	movw	r24, r22
 4da:	84 2b       	or	r24, r20
 4dc:	85 bb       	out	0x15, r24	; 21
 4de:	08 95       	ret
 4e0:	61 11       	cpse	r22, r1
 4e2:	0e c0       	rjmp	.+28     	; 0x500 <Write_Channel+0xfc>
 4e4:	42 b3       	in	r20, 0x12	; 18
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	b9 01       	movw	r22, r18
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <Write_Channel+0xee>
 4ee:	66 0f       	add	r22, r22
 4f0:	77 1f       	adc	r23, r23
 4f2:	9a 95       	dec	r25
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <Write_Channel+0xea>
 4f6:	cb 01       	movw	r24, r22
 4f8:	80 95       	com	r24
 4fa:	84 23       	and	r24, r20
 4fc:	82 bb       	out	0x12, r24	; 18
 4fe:	08 95       	ret
 500:	61 30       	cpi	r22, 0x01	; 1
 502:	61 f4       	brne	.+24     	; 0x51c <Write_Channel+0x118>
 504:	42 b3       	in	r20, 0x12	; 18
 506:	21 e0       	ldi	r18, 0x01	; 1
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	b9 01       	movw	r22, r18
 50c:	02 c0       	rjmp	.+4      	; 0x512 <Write_Channel+0x10e>
 50e:	66 0f       	add	r22, r22
 510:	77 1f       	adc	r23, r23
 512:	9a 95       	dec	r25
 514:	e2 f7       	brpl	.-8      	; 0x50e <Write_Channel+0x10a>
 516:	cb 01       	movw	r24, r22
 518:	84 2b       	or	r24, r20
 51a:	82 bb       	out	0x12, r24	; 18
 51c:	08 95       	ret

0000051e <Read_Channel>:

STD_Level Read_Channel(DIO_Channel Ch_ID)
{
	STD_Level Level;
	uint8 port = Ch_ID/8 ;
	uint8 pin = Ch_ID%8 ;
 51e:	28 2f       	mov	r18, r24
 520:	27 70       	andi	r18, 0x07	; 7
	
	switch(port)
 522:	86 95       	lsr	r24
 524:	86 95       	lsr	r24
 526:	86 95       	lsr	r24
 528:	81 30       	cpi	r24, 0x01	; 1
 52a:	81 f0       	breq	.+32     	; 0x54c <Read_Channel+0x2e>
 52c:	28 f0       	brcs	.+10     	; 0x538 <Read_Channel+0x1a>
 52e:	82 30       	cpi	r24, 0x02	; 2
 530:	b9 f0       	breq	.+46     	; 0x560 <Read_Channel+0x42>
 532:	83 30       	cpi	r24, 0x03	; 3
 534:	f9 f0       	breq	.+62     	; 0x574 <Read_Channel+0x56>
 536:	27 c0       	rjmp	.+78     	; 0x586 <Read_Channel+0x68>
	{
		case PA:	
		Level = GET_BIT(PINA_REG,pin);
 538:	89 b3       	in	r24, 0x19	; 25
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <Read_Channel+0x24>
 53e:	95 95       	asr	r25
 540:	87 95       	ror	r24
 542:	2a 95       	dec	r18
 544:	e2 f7       	brpl	.-8      	; 0x53e <Read_Channel+0x20>
 546:	98 2f       	mov	r25, r24
 548:	91 70       	andi	r25, 0x01	; 1
		break;
 54a:	1d c0       	rjmp	.+58     	; 0x586 <Read_Channel+0x68>
		case PB:	
		Level = GET_BIT(PINB_REG,pin);
 54c:	86 b3       	in	r24, 0x16	; 22
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <Read_Channel+0x38>
 552:	95 95       	asr	r25
 554:	87 95       	ror	r24
 556:	2a 95       	dec	r18
 558:	e2 f7       	brpl	.-8      	; 0x552 <Read_Channel+0x34>
 55a:	98 2f       	mov	r25, r24
 55c:	91 70       	andi	r25, 0x01	; 1
		break;
 55e:	13 c0       	rjmp	.+38     	; 0x586 <Read_Channel+0x68>
		case PC:	
		Level = GET_BIT(PINC_REG,pin);
 560:	83 b3       	in	r24, 0x13	; 19
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <Read_Channel+0x4c>
 566:	95 95       	asr	r25
 568:	87 95       	ror	r24
 56a:	2a 95       	dec	r18
 56c:	e2 f7       	brpl	.-8      	; 0x566 <Read_Channel+0x48>
 56e:	98 2f       	mov	r25, r24
 570:	91 70       	andi	r25, 0x01	; 1
		break;
 572:	09 c0       	rjmp	.+18     	; 0x586 <Read_Channel+0x68>
		case PD:	
		Level = GET_BIT(PIND_REG,pin);
 574:	80 b3       	in	r24, 0x10	; 16
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <Read_Channel+0x60>
 57a:	95 95       	asr	r25
 57c:	87 95       	ror	r24
 57e:	2a 95       	dec	r18
 580:	e2 f7       	brpl	.-8      	; 0x57a <Read_Channel+0x5c>
 582:	98 2f       	mov	r25, r24
 584:	91 70       	andi	r25, 0x01	; 1
		break;
	}
	return Level;		
}
 586:	89 2f       	mov	r24, r25
 588:	08 95       	ret

0000058a <_exit>:
 58a:	f8 94       	cli

0000058c <__stop_program>:
 58c:	ff cf       	rjmp	.-2      	; 0x58c <__stop_program>

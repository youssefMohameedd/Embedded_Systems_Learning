
Project_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000762  000007f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800078  00800078  0000080e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000080e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a07  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9c  00000000  00000000  00002393  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f74  00000000  00000000  00002e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00003da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044bb  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013f3  00000000  00000000  000084db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000098ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000013a7  00000000  00000000  0000999e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	02 d0       	rcall	.+4      	; 0x8c <main>
  88:	6a c3       	rjmp	.+1748   	; 0x75e <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <main>:


int main(void)
{	

	LCD_Init();
  8c:	09 d1       	rcall	.+530    	; 0x2a0 <LCD_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	8f e3       	ldi	r24, 0x3F	; 63
  90:	9c e9       	ldi	r25, 0x9C	; 156
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0x6>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0xc>
	_delay_ms(10);
	Keypad_Init();
  98:	00 00       	nop
  9a:	20 d0       	rcall	.+64     	; 0xdc <Keypad_Init>
  9c:	8f e1       	ldi	r24, 0x1F	; 31
  9e:	9e e4       	ldi	r25, 0x4E	; 78
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x14>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x1a>
	uint8 val = 'N';

	
	while(1)
	{
		val = Keypad_Read_Char();
  a6:	00 00       	nop
  a8:	50 d0       	rcall	.+160    	; 0x14a <Keypad_Read_Char>
  aa:	c8 2f       	mov	r28, r24
		if(val!='N')
  ac:	8e 34       	cpi	r24, 0x4E	; 78
  ae:	79 f0       	breq	.+30     	; 0xce <main+0x42>
		{
			if(val=='*') LCD_Write_Cmd(DISPLAY_CLEAR);
  b0:	8a 32       	cpi	r24, 0x2A	; 42
  b2:	11 f4       	brne	.+4      	; 0xb8 <main+0x2c>
  b4:	81 e0       	ldi	r24, 0x01	; 1
			LCD_Write_Char(val);
  b6:	d2 d0       	rcall	.+420    	; 0x25c <LCD_Write_Cmd>
  b8:	8c 2f       	mov	r24, r28
  ba:	2a d1       	rcall	.+596    	; 0x310 <LCD_Write_Char>
  bc:	9f ef       	ldi	r25, 0xFF	; 255
  be:	21 ee       	ldi	r18, 0xE1	; 225
  c0:	84 e0       	ldi	r24, 0x04	; 4
  c2:	91 50       	subi	r25, 0x01	; 1
  c4:	20 40       	sbci	r18, 0x00	; 0
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x36>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x40>
  cc:	00 00       	nop
  ce:	8f e1       	ldi	r24, 0x1F	; 31
  d0:	9e e4       	ldi	r25, 0x4E	; 78
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x46>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x4c>
  d8:	00 00       	nop
  da:	e6 cf       	rjmp	.-52     	; 0xa8 <main+0x1c>

000000dc <Keypad_Init>:
{'*','0','#','D'}};



void Keypad_Init(void)
{	
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
	Set_Channel_Direction(r1,OUTPUT);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	3e d1       	rcall	.+636    	; 0x36a <Set_Channel_Direction>
	Set_Channel_Direction(r2,OUTPUT);
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	8e e0       	ldi	r24, 0x0E	; 14
  f2:	3b d1       	rcall	.+630    	; 0x36a <Set_Channel_Direction>
	Set_Channel_Direction(r3,OUTPUT);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	38 d1       	rcall	.+624    	; 0x36a <Set_Channel_Direction>
	Set_Channel_Direction(r4,OUTPUT);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	8c e0       	ldi	r24, 0x0C	; 12
  fe:	35 d1       	rcall	.+618    	; 0x36a <Set_Channel_Direction>
	
	Set_Port_Direction(PC,0x00);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	e4 d2       	rcall	.+1480   	; 0x6ce <Set_Port_Direction>
 106:	c4 e7       	ldi	r28, 0x74	; 116
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	00 e7       	ldi	r16, 0x70	; 112
 10c:	10 e0       	ldi	r17, 0x00	; 0
 10e:	0f 2e       	mov	r0, r31
 110:	f8 e7       	ldi	r31, 0x78	; 120
 112:	ef 2e       	mov	r14, r31
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	ff 2e       	mov	r15, r31
 118:	f0 2d       	mov	r31, r0
	for(uint8 i = 0 ; i<4 ; i++)
	{
		Write_Channel(rows[i],HIGH);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	89 91       	ld	r24, Y+
 11e:	14 d2       	rcall	.+1064   	; 0x548 <Write_Channel>
		Write_Channel(cols[i],HIGH);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	f8 01       	movw	r30, r16
 124:	81 91       	ld	r24, Z+
 126:	8f 01       	movw	r16, r30
 128:	0f d2       	rcall	.+1054   	; 0x548 <Write_Channel>
 12a:	ce 15       	cp	r28, r14
	Set_Channel_Direction(r2,OUTPUT);
	Set_Channel_Direction(r3,OUTPUT);
	Set_Channel_Direction(r4,OUTPUT);
	
	Set_Port_Direction(PC,0x00);
	for(uint8 i = 0 ; i<4 ; i++)
 12c:	df 05       	cpc	r29, r15
 12e:	a9 f7       	brne	.-22     	; 0x11a <Keypad_Init+0x3e>
 130:	8f e1       	ldi	r24, 0x1F	; 31
 132:	9e e4       	ldi	r25, 0x4E	; 78
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <Keypad_Init+0x58>
 138:	00 c0       	rjmp	.+0      	; 0x13a <Keypad_Init+0x5e>
 13a:	00 00       	nop
 13c:	df 91       	pop	r29
	{
		Write_Channel(rows[i],HIGH);
		Write_Channel(cols[i],HIGH);
	}
	_delay_ms(5);
}
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
 148:	08 95       	ret

0000014a <Keypad_Read_Char>:
 14a:	6f 92       	push	r6

// we needn't use the debounced Push-Button function, as halting CPU performance wouldn't
//affect the Data Display of the LCD
uint8 Keypad_Read_Char(void)
{
 14c:	7f 92       	push	r7
 14e:	8f 92       	push	r8
 150:	9f 92       	push	r9
 152:	af 92       	push	r10
 154:	bf 92       	push	r11
 156:	cf 92       	push	r12
 158:	df 92       	push	r13
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	04 e7       	ldi	r16, 0x74	; 116
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	e1 2c       	mov	r14, r1
 16c:	f1 2c       	mov	r15, r1
	
	for (uint8 i = 0 ; i<4 ; i++)
	{
		Write_Channel(rows[i],LOW);
 16e:	37 01       	movw	r6, r14
 170:	58 01       	movw	r10, r16
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	f8 01       	movw	r30, r16
 176:	80 81       	ld	r24, Z
 178:	e7 d1       	rcall	.+974    	; 0x548 <Write_Channel>
 17a:	8f e3       	ldi	r24, 0x3F	; 63
 17c:	9f e1       	ldi	r25, 0x1F	; 31
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <Keypad_Read_Char+0x34>
 182:	00 c0       	rjmp	.+0      	; 0x184 <Keypad_Read_Char+0x3a>
 184:	00 00       	nop
 186:	0f 2e       	mov	r0, r31
 188:	f0 e7       	ldi	r31, 0x70	; 112
 18a:	8f 2e       	mov	r8, r31
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	9f 2e       	mov	r9, r31
 190:	f0 2d       	mov	r31, r0
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(2);
		
		for(uint8 j =0 ; j<4 ; j++)
		{
			if(Read_Channel(cols[j])==LOW)
 196:	6e 01       	movw	r12, r28
 198:	f4 01       	movw	r30, r8
 19a:	80 81       	ld	r24, Z
 19c:	62 d2       	rcall	.+1220   	; 0x662 <Read_Channel>
 19e:	81 11       	cpse	r24, r1
 1a0:	1f c0       	rjmp	.+62     	; 0x1e0 <Keypad_Read_Char+0x96>
 1a2:	ff ef       	ldi	r31, 0xFF	; 255
 1a4:	29 ef       	ldi	r18, 0xF9	; 249
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	f1 50       	subi	r31, 0x01	; 1
 1aa:	20 40       	sbci	r18, 0x00	; 0
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <Keypad_Read_Char+0x5e>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <Keypad_Read_Char+0x68>
 1b2:	00 00       	nop
			{
				_delay_ms(20);  // Wait for debounce
   				if (Read_Channel(cols[j]) == LOW)
 1b4:	f4 01       	movw	r30, r8
 1b6:	80 81       	ld	r24, Z
 1b8:	54 d2       	rcall	.+1192   	; 0x662 <Read_Channel>
 1ba:	81 11       	cpse	r24, r1
 1bc:	11 c0       	rjmp	.+34     	; 0x1e0 <Keypad_Read_Char+0x96>
				{
				while(Read_Channel(cols[j])== LOW);
 1be:	c0 59       	subi	r28, 0x90	; 144
 1c0:	df 4f       	sbci	r29, 0xFF	; 255
 1c2:	88 81       	ld	r24, Y
 1c4:	4e d2       	rcall	.+1180   	; 0x662 <Read_Channel>
 1c6:	88 23       	and	r24, r24
 1c8:	e1 f3       	breq	.-8      	; 0x1c2 <Keypad_Read_Char+0x78>
				return KeyPad[i][j];
 1ca:	f3 01       	movw	r30, r6
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	e0 5a       	subi	r30, 0xA0	; 160
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	ec 0d       	add	r30, r12
 1da:	fd 1d       	adc	r31, r13
 1dc:	80 81       	ld	r24, Z
 1de:	1c c0       	rjmp	.+56     	; 0x218 <Keypad_Read_Char+0xce>
 1e0:	21 96       	adiw	r28, 0x01	; 1
 1e2:	ff ef       	ldi	r31, 0xFF	; 255
 1e4:	8f 1a       	sub	r8, r31
 1e6:	9f 0a       	sbc	r9, r31
	for (uint8 i = 0 ; i<4 ; i++)
	{
		Write_Channel(rows[i],LOW);
		_delay_ms(2);
		
		for(uint8 j =0 ; j<4 ; j++)
 1e8:	c4 30       	cpi	r28, 0x04	; 4
 1ea:	d1 05       	cpc	r29, r1
 1ec:	a1 f6       	brne	.-88     	; 0x196 <Keypad_Read_Char+0x4c>
 1ee:	0f 5f       	subi	r16, 0xFF	; 255
				return KeyPad[i][j];
				}
			}
		}
		
		Write_Channel(rows[i],HIGH);
 1f0:	1f 4f       	sbci	r17, 0xFF	; 255
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	f5 01       	movw	r30, r10
 1f6:	80 81       	ld	r24, Z
 1f8:	a7 d1       	rcall	.+846    	; 0x548 <Write_Channel>
 1fa:	8f e3       	ldi	r24, 0x3F	; 63
 1fc:	9f e1       	ldi	r25, 0x1F	; 31
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <Keypad_Read_Char+0xb4>
 202:	00 c0       	rjmp	.+0      	; 0x204 <Keypad_Read_Char+0xba>
 204:	00 00       	nop
 206:	9f ef       	ldi	r25, 0xFF	; 255
 208:	e9 1a       	sub	r14, r25
 20a:	f9 0a       	sbc	r15, r25
// we needn't use the debounced Push-Button function, as halting CPU performance wouldn't
//affect the Data Display of the LCD
uint8 Keypad_Read_Char(void)
{
	
	for (uint8 i = 0 ; i<4 ; i++)
 20c:	e4 e0       	ldi	r30, 0x04	; 4
 20e:	ee 16       	cp	r14, r30
 210:	f1 04       	cpc	r15, r1
 212:	09 f0       	breq	.+2      	; 0x216 <Keypad_Read_Char+0xcc>
 214:	ac cf       	rjmp	.-168    	; 0x16e <Keypad_Read_Char+0x24>
		
		Write_Channel(rows[i],HIGH);
		_delay_ms(2);
		
	}
	return 'N';
 216:	8e e4       	ldi	r24, 0x4E	; 78
	
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	ef 90       	pop	r14
 224:	df 90       	pop	r13
 226:	cf 90       	pop	r12
 228:	bf 90       	pop	r11
 22a:	af 90       	pop	r10
 22c:	9f 90       	pop	r9
 22e:	8f 90       	pop	r8
 230:	7f 90       	pop	r7
 232:	6f 90       	pop	r6
 234:	08 95       	ret

00000236 <LCD_Latch>:
#include <Bit_Math.h>

static uint8 AC = 0; // Address Counter initialization 

void LCD_Latch(void) {
	Write_Channel(LCD_E, HIGH);
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	8b e0       	ldi	r24, 0x0B	; 11
 23a:	86 d1       	rcall	.+780    	; 0x548 <Write_Channel>
 23c:	89 ef       	ldi	r24, 0xF9	; 249
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_Latch+0xa>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_Latch+0x10>
 246:	00 00       	nop
	_delay_ms(1); 
	Write_Channel(LCD_E, LOW);
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	8b e0       	ldi	r24, 0x0B	; 11
 24c:	7d d1       	rcall	.+762    	; 0x548 <Write_Channel>
 24e:	89 ef       	ldi	r24, 0xF9	; 249
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <LCD_Latch+0x1c>
 256:	00 c0       	rjmp	.+0      	; 0x258 <LCD_Latch+0x22>
 258:	00 00       	nop
 25a:	08 95       	ret

0000025c <LCD_Write_Cmd>:
	_delay_ms(1);
}

void LCD_Write_Cmd(uint8 cmd) {
 25c:	cf 93       	push	r28
 25e:	c8 2f       	mov	r28, r24
	
	Write_Channel(LCD_RS, LOW);
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	89 e0       	ldi	r24, 0x09	; 9
 264:	71 d1       	rcall	.+738    	; 0x548 <Write_Channel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_Write_Cmd+0xc>
	_delay_us(2);
	
	Write_Nibble(LCD_PORT, HIGH, cmd >> 4); // Send higher nibble
 268:	4c 2f       	mov	r20, r28
 26a:	42 95       	swap	r20
 26c:	4f 70       	andi	r20, 0x0F	; 15
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 272:	5e d2       	rcall	.+1212   	; 0x730 <Write_Nibble>
 274:	e0 df       	rcall	.-64     	; 0x236 <LCD_Latch>

	Write_Nibble(LCD_PORT, HIGH, cmd & 0x0F); // Send lower nibble
 276:	4c 2f       	mov	r20, r28
 278:	4f 70       	andi	r20, 0x0F	; 15
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 27e:	58 d2       	rcall	.+1200   	; 0x730 <Write_Nibble>
 280:	da df       	rcall	.-76     	; 0x236 <LCD_Latch>
 282:	80 e1       	ldi	r24, 0x10	; 16
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_Write_Cmd+0x28>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_Write_Cmd+0x2e>

	 _delay_us(50);
	 if(cmd == 0x01 || cmd == 0x02 ) _delay_ms(2);
 28a:	c1 50       	subi	r28, 0x01	; 1
 28c:	c2 30       	cpi	r28, 0x02	; 2
 28e:	30 f4       	brcc	.+12     	; 0x29c <LCD_Write_Cmd+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	83 ef       	ldi	r24, 0xF3	; 243
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_Write_Cmd+0x38>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_Write_Cmd+0x3e>
 29a:	00 00       	nop
}
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <LCD_Init>:

void LCD_Init(void) {
	
	
	Set_Port_Direction(LCD_PORT, 0xFF);
 2a0:	6f ef       	ldi	r22, 0xFF	; 255
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	14 d2       	rcall	.+1064   	; 0x6ce <Set_Port_Direction>
	Set_Channel_Direction(LCD_E, OUTPUT);
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	8b e0       	ldi	r24, 0x0B	; 11
 2aa:	5f d0       	rcall	.+190    	; 0x36a <Set_Channel_Direction>
	Set_Channel_Direction(LCD_RS, OUTPUT);
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	89 e0       	ldi	r24, 0x09	; 9
 2b0:	5c d0       	rcall	.+184    	; 0x36a <Set_Channel_Direction>
	Set_Channel_Direction(LCD_RW, OUTPUT);
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	8a e0       	ldi	r24, 0x0A	; 10
 2b6:	59 d0       	rcall	.+178    	; 0x36a <Set_Channel_Direction>
 2b8:	83 ed       	ldi	r24, 0xD3	; 211
 2ba:	90 e3       	ldi	r25, 0x30	; 48
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_Init+0x1c>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_Init+0x22>
 2c2:	00 00       	nop
	_delay_ms(50); // Wait for LCD power-up
	Write_Channel(LCD_RW, LOW); // Always in write mode
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	8a e0       	ldi	r24, 0x0A	; 10
	
	LCD_Write_Cmd(FOUR_BIT_MODE);
 2c8:	3f d1       	rcall	.+638    	; 0x548 <Write_Channel>
 2ca:	82 e0       	ldi	r24, 0x02	; 2
	LCD_Write_Cmd(FUNCTION_SET);
 2cc:	c7 df       	rcall	.-114    	; 0x25c <LCD_Write_Cmd>
 2ce:	88 e2       	ldi	r24, 0x28	; 40
	LCD_Write_Cmd(DISPLAY_CONTROL);
 2d0:	c5 df       	rcall	.-118    	; 0x25c <LCD_Write_Cmd>
 2d2:	8f e0       	ldi	r24, 0x0F	; 15
 2d4:	c3 df       	rcall	.-122    	; 0x25c <LCD_Write_Cmd>
	LCD_Write_Cmd(DISPLAY_CLEAR); // Returns Home by Default
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	c1 df       	rcall	.-126    	; 0x25c <LCD_Write_Cmd>
 2da:	86 e0       	ldi	r24, 0x06	; 6
	LCD_Write_Cmd(ENTRY_MODE_SET);
 2dc:	bf cf       	rjmp	.-130    	; 0x25c <LCD_Write_Cmd>
 2de:	08 95       	ret

000002e0 <LCD_Move_Pos>:
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	40 f4       	brcc	.+16     	; 0x2f4 <LCD_Move_Pos+0x14>
}

void LCD_Move_Pos(uint8 row, uint8 col)
{
	uint8 index ;
	if(row <2 && col <16)	index =(row*LINE_2_BASE_ADDRESS) + col;
 2e4:	60 31       	cpi	r22, 0x10	; 16
 2e6:	48 f4       	brcc	.+18     	; 0x2fa <LCD_Move_Pos+0x1a>
 2e8:	96 2f       	mov	r25, r22
 2ea:	20 e4       	ldi	r18, 0x40	; 64
 2ec:	82 9f       	mul	r24, r18
 2ee:	90 0d       	add	r25, r0
 2f0:	11 24       	eor	r1, r1
 2f2:	08 c0       	rjmp	.+16     	; 0x304 <LCD_Move_Pos+0x24>
	else if (row >1 )		index = LINE_2_BASE_ADDRESS + col ;
 2f4:	90 e4       	ldi	r25, 0x40	; 64
 2f6:	96 0f       	add	r25, r22
 2f8:	05 c0       	rjmp	.+10     	; 0x304 <LCD_Move_Pos+0x24>
	else if (col >16)		index = LINE_2_BASE_ADDRESS + (col%16); // wrapping exceeding columns
 2fa:	61 31       	cpi	r22, 0x11	; 17
 2fc:	18 f0       	brcs	.+6      	; 0x304 <LCD_Move_Pos+0x24>
 2fe:	6f 70       	andi	r22, 0x0F	; 15
 300:	90 e4       	ldi	r25, 0x40	; 64
 302:	96 0f       	add	r25, r22
	AC = index;			// necessary for end of line string bug handling
 304:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <__data_end>
	SET_BIT(index,7);   // Command Selection to modify the Address Counter value
	LCD_Write_Cmd(index);
 308:	89 2f       	mov	r24, r25
 30a:	80 68       	ori	r24, 0x80	; 128
 30c:	a7 cf       	rjmp	.-178    	; 0x25c <LCD_Write_Cmd>
 30e:	08 95       	ret

00000310 <LCD_Write_Char>:

}

void LCD_Write_Char(uint8 character)
 {	
 310:	cf 93       	push	r28
 312:	c8 2f       	mov	r28, r24
	 //Handling end of Line string initiations
	if(AC == 0x10) LCD_Move_Pos(1,0);
 314:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 318:	80 31       	cpi	r24, 0x10	; 16
 31a:	19 f4       	brne	.+6      	; 0x322 <LCD_Write_Char+0x12>
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	df df       	rcall	.-66     	; 0x2e0 <LCD_Move_Pos>
	if(AC > 0x4F)
 322:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 326:	80 35       	cpi	r24, 0x50	; 80
 328:	20 f0       	brcs	.+8      	; 0x332 <LCD_Write_Char+0x22>
	 {
		 AC = 0 ;
 32a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
		 LCD_Write_Cmd(RETURN_HOME);
 32e:	80 e8       	ldi	r24, 0x80	; 128
 330:	95 df       	rcall	.-214    	; 0x25c <LCD_Write_Cmd>
	 }
	
	Write_Channel(LCD_RS, HIGH);
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	89 e0       	ldi	r24, 0x09	; 9
 336:	08 d1       	rcall	.+528    	; 0x548 <Write_Channel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_Write_Char+0x2a>
	_delay_us(2);

	Write_Nibble(LCD_PORT, HIGH, character >> 4);   // Send higher nibble
 33a:	4c 2f       	mov	r20, r28
 33c:	42 95       	swap	r20
 33e:	4f 70       	andi	r20, 0x0F	; 15
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 344:	f5 d1       	rcall	.+1002   	; 0x730 <Write_Nibble>

	Write_Nibble(LCD_PORT, HIGH, character & 0x0F); // Send lower nibble
 346:	77 df       	rcall	.-274    	; 0x236 <LCD_Latch>
 348:	4c 2f       	mov	r20, r28
 34a:	4f 70       	andi	r20, 0x0F	; 15
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 350:	ef d1       	rcall	.+990    	; 0x730 <Write_Nibble>
 352:	71 df       	rcall	.-286    	; 0x236 <LCD_Latch>
 354:	80 e1       	ldi	r24, 0x10	; 16
 356:	8a 95       	dec	r24
 358:	f1 f7       	brne	.-4      	; 0x356 <LCD_Write_Char+0x46>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <LCD_Write_Char+0x4c>

	_delay_us(50);
	AC++;
 35c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 360:	8f 5f       	subi	r24, 0xFF	; 255
 362:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 
	
}
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <Set_Channel_Direction>:
	if(Significance == HIGH)	value =  (value &0xF0) >> 4 ; 
	else if (Significance == LOW) value = (value &0x0F) ;
	

	return value ;
}
 36a:	98 2f       	mov	r25, r24
 36c:	97 70       	andi	r25, 0x07	; 7
 36e:	86 95       	lsr	r24
 370:	86 95       	lsr	r24
 372:	86 95       	lsr	r24
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	09 f4       	brne	.+2      	; 0x37a <Set_Channel_Direction+0x10>
 378:	40 c0       	rjmp	.+128    	; 0x3fa <Set_Channel_Direction+0x90>
 37a:	38 f0       	brcs	.+14     	; 0x38a <Set_Channel_Direction+0x20>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	09 f4       	brne	.+2      	; 0x382 <Set_Channel_Direction+0x18>
 380:	74 c0       	rjmp	.+232    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 382:	83 30       	cpi	r24, 0x03	; 3
 384:	09 f4       	brne	.+2      	; 0x388 <Set_Channel_Direction+0x1e>
 386:	a9 c0       	rjmp	.+338    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 388:	08 95       	ret
 38a:	61 11       	cpse	r22, r1
 38c:	12 c0       	rjmp	.+36     	; 0x3b2 <Set_Channel_Direction+0x48>
 38e:	4a b3       	in	r20, 0x1a	; 26
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	b9 01       	movw	r22, r18
 396:	02 c0       	rjmp	.+4      	; 0x39c <Set_Channel_Direction+0x32>
 398:	66 0f       	add	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	9a 95       	dec	r25
 39e:	e2 f7       	brpl	.-8      	; 0x398 <Set_Channel_Direction+0x2e>
 3a0:	cb 01       	movw	r24, r22
 3a2:	80 95       	com	r24
 3a4:	94 2f       	mov	r25, r20
 3a6:	98 23       	and	r25, r24
 3a8:	9a bb       	out	0x1a, r25	; 26
 3aa:	9b b3       	in	r25, 0x1b	; 27
 3ac:	89 23       	and	r24, r25
 3ae:	8b bb       	out	0x1b, r24	; 27
 3b0:	08 95       	ret
 3b2:	62 30       	cpi	r22, 0x02	; 2
 3b4:	91 f4       	brne	.+36     	; 0x3da <Set_Channel_Direction+0x70>
 3b6:	4a b3       	in	r20, 0x1a	; 26
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	b9 01       	movw	r22, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <Set_Channel_Direction+0x5a>
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	9a 95       	dec	r25
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <Set_Channel_Direction+0x56>
 3c8:	cb 01       	movw	r24, r22
 3ca:	96 2f       	mov	r25, r22
 3cc:	90 95       	com	r25
 3ce:	94 23       	and	r25, r20
 3d0:	9a bb       	out	0x1a, r25	; 26
 3d2:	9b b3       	in	r25, 0x1b	; 27
 3d4:	89 2b       	or	r24, r25
 3d6:	8b bb       	out	0x1b, r24	; 27
 3d8:	08 95       	ret
 3da:	61 30       	cpi	r22, 0x01	; 1
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <Set_Channel_Direction+0x76>
 3de:	b3 c0       	rjmp	.+358    	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 3e0:	4a b3       	in	r20, 0x1a	; 26
 3e2:	21 e0       	ldi	r18, 0x01	; 1
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	b9 01       	movw	r22, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <Set_Channel_Direction+0x84>
 3ea:	66 0f       	add	r22, r22
 3ec:	77 1f       	adc	r23, r23
 3ee:	9a 95       	dec	r25
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <Set_Channel_Direction+0x80>
 3f2:	cb 01       	movw	r24, r22
 3f4:	84 2b       	or	r24, r20
 3f6:	8a bb       	out	0x1a, r24	; 26
 3f8:	08 95       	ret
 3fa:	61 11       	cpse	r22, r1
 3fc:	12 c0       	rjmp	.+36     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3fe:	47 b3       	in	r20, 0x17	; 23
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	b9 01       	movw	r22, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	9a 95       	dec	r25
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	cb 01       	movw	r24, r22
 412:	80 95       	com	r24
 414:	94 2f       	mov	r25, r20
 416:	98 23       	and	r25, r24
 418:	97 bb       	out	0x17, r25	; 23
 41a:	98 b3       	in	r25, 0x18	; 24
 41c:	89 23       	and	r24, r25
 41e:	88 bb       	out	0x18, r24	; 24
 420:	08 95       	ret
 422:	62 30       	cpi	r22, 0x02	; 2
 424:	91 f4       	brne	.+36     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 426:	47 b3       	in	r20, 0x17	; 23
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	b9 01       	movw	r22, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	9a 95       	dec	r25
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	cb 01       	movw	r24, r22
 43a:	96 2f       	mov	r25, r22
 43c:	90 95       	com	r25
 43e:	94 23       	and	r25, r20
 440:	97 bb       	out	0x17, r25	; 23
 442:	98 b3       	in	r25, 0x18	; 24
 444:	89 2b       	or	r24, r25
 446:	88 bb       	out	0x18, r24	; 24
 448:	08 95       	ret
 44a:	61 30       	cpi	r22, 0x01	; 1
 44c:	09 f0       	breq	.+2      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44e:	7b c0       	rjmp	.+246    	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 450:	47 b3       	in	r20, 0x17	; 23
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	b9 01       	movw	r22, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 45a:	66 0f       	add	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	9a 95       	dec	r25
 460:	e2 f7       	brpl	.-8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 462:	cb 01       	movw	r24, r22
 464:	84 2b       	or	r24, r20
 466:	87 bb       	out	0x17, r24	; 23
 468:	08 95       	ret
 46a:	61 11       	cpse	r22, r1
 46c:	12 c0       	rjmp	.+36     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 46e:	44 b3       	in	r20, 0x14	; 20
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	b9 01       	movw	r22, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	9a 95       	dec	r25
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 480:	cb 01       	movw	r24, r22
 482:	80 95       	com	r24
 484:	94 2f       	mov	r25, r20
 486:	98 23       	and	r25, r24
 488:	94 bb       	out	0x14, r25	; 20
 48a:	95 b3       	in	r25, 0x15	; 21
 48c:	89 23       	and	r24, r25
 48e:	85 bb       	out	0x15, r24	; 21
 490:	08 95       	ret
 492:	62 30       	cpi	r22, 0x02	; 2
 494:	91 f4       	brne	.+36     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 496:	44 b3       	in	r20, 0x14	; 20
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	b9 01       	movw	r22, r18
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	9a 95       	dec	r25
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a8:	cb 01       	movw	r24, r22
 4aa:	96 2f       	mov	r25, r22
 4ac:	90 95       	com	r25
 4ae:	94 23       	and	r25, r20
 4b0:	94 bb       	out	0x14, r25	; 20
 4b2:	95 b3       	in	r25, 0x15	; 21
 4b4:	89 2b       	or	r24, r25
 4b6:	85 bb       	out	0x15, r24	; 21
 4b8:	08 95       	ret
 4ba:	61 30       	cpi	r22, 0x01	; 1
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4be:	43 c0       	rjmp	.+134    	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 4c0:	44 b3       	in	r20, 0x14	; 20
 4c2:	21 e0       	ldi	r18, 0x01	; 1
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	b9 01       	movw	r22, r18
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4ca:	66 0f       	add	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	9a 95       	dec	r25
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4d2:	cb 01       	movw	r24, r22
 4d4:	84 2b       	or	r24, r20
 4d6:	84 bb       	out	0x14, r24	; 20
 4d8:	08 95       	ret
 4da:	61 11       	cpse	r22, r1
 4dc:	12 c0       	rjmp	.+36     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4de:	41 b3       	in	r20, 0x11	; 17
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	b9 01       	movw	r22, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	9a 95       	dec	r25
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4f0:	cb 01       	movw	r24, r22
 4f2:	80 95       	com	r24
 4f4:	94 2f       	mov	r25, r20
 4f6:	98 23       	and	r25, r24
 4f8:	91 bb       	out	0x11, r25	; 17
 4fa:	92 b3       	in	r25, 0x12	; 18
 4fc:	89 23       	and	r24, r25
 4fe:	82 bb       	out	0x12, r24	; 18
 500:	08 95       	ret
 502:	62 30       	cpi	r22, 0x02	; 2
 504:	91 f4       	brne	.+36     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 506:	41 b3       	in	r20, 0x11	; 17
 508:	21 e0       	ldi	r18, 0x01	; 1
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	b9 01       	movw	r22, r18
 50e:	02 c0       	rjmp	.+4      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 510:	66 0f       	add	r22, r22
 512:	77 1f       	adc	r23, r23
 514:	9a 95       	dec	r25
 516:	e2 f7       	brpl	.-8      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 518:	cb 01       	movw	r24, r22
 51a:	96 2f       	mov	r25, r22
 51c:	90 95       	com	r25
 51e:	94 23       	and	r25, r20
 520:	91 bb       	out	0x11, r25	; 17
 522:	92 b3       	in	r25, 0x12	; 18
 524:	89 2b       	or	r24, r25
 526:	82 bb       	out	0x12, r24	; 18
 528:	08 95       	ret
 52a:	61 30       	cpi	r22, 0x01	; 1
 52c:	61 f4       	brne	.+24     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 52e:	41 b3       	in	r20, 0x11	; 17
 530:	21 e0       	ldi	r18, 0x01	; 1
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	b9 01       	movw	r22, r18
 536:	02 c0       	rjmp	.+4      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 538:	66 0f       	add	r22, r22
 53a:	77 1f       	adc	r23, r23
 53c:	9a 95       	dec	r25
 53e:	e2 f7       	brpl	.-8      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 540:	cb 01       	movw	r24, r22
 542:	84 2b       	or	r24, r20
 544:	81 bb       	out	0x11, r24	; 17
 546:	08 95       	ret

00000548 <Write_Channel>:
 548:	98 2f       	mov	r25, r24
 54a:	97 70       	andi	r25, 0x07	; 7
 54c:	86 95       	lsr	r24
 54e:	86 95       	lsr	r24
 550:	86 95       	lsr	r24
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	41 f1       	breq	.+80     	; 0x5a6 <Write_Channel+0x5e>
 556:	38 f0       	brcs	.+14     	; 0x566 <Write_Channel+0x1e>
 558:	82 30       	cpi	r24, 0x02	; 2
 55a:	09 f4       	brne	.+2      	; 0x55e <Write_Channel+0x16>
 55c:	44 c0       	rjmp	.+136    	; 0x5e6 <Write_Channel+0x9e>
 55e:	83 30       	cpi	r24, 0x03	; 3
 560:	09 f4       	brne	.+2      	; 0x564 <Write_Channel+0x1c>
 562:	60 c0       	rjmp	.+192    	; 0x624 <Write_Channel+0xdc>
 564:	08 95       	ret
 566:	61 11       	cpse	r22, r1
 568:	0e c0       	rjmp	.+28     	; 0x586 <Write_Channel+0x3e>
 56a:	4b b3       	in	r20, 0x1b	; 27
 56c:	21 e0       	ldi	r18, 0x01	; 1
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	b9 01       	movw	r22, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <Write_Channel+0x30>
 574:	66 0f       	add	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	9a 95       	dec	r25
 57a:	e2 f7       	brpl	.-8      	; 0x574 <Write_Channel+0x2c>
 57c:	cb 01       	movw	r24, r22
 57e:	80 95       	com	r24
 580:	84 23       	and	r24, r20
 582:	8b bb       	out	0x1b, r24	; 27
 584:	08 95       	ret
 586:	61 30       	cpi	r22, 0x01	; 1
 588:	09 f0       	breq	.+2      	; 0x58c <Write_Channel+0x44>
 58a:	6a c0       	rjmp	.+212    	; 0x660 <Write_Channel+0x118>
 58c:	4b b3       	in	r20, 0x1b	; 27
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	b9 01       	movw	r22, r18
 594:	02 c0       	rjmp	.+4      	; 0x59a <Write_Channel+0x52>
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	9a 95       	dec	r25
 59c:	e2 f7       	brpl	.-8      	; 0x596 <Write_Channel+0x4e>
 59e:	cb 01       	movw	r24, r22
 5a0:	84 2b       	or	r24, r20
 5a2:	8b bb       	out	0x1b, r24	; 27
 5a4:	08 95       	ret
 5a6:	61 11       	cpse	r22, r1
 5a8:	0e c0       	rjmp	.+28     	; 0x5c6 <Write_Channel+0x7e>
 5aa:	48 b3       	in	r20, 0x18	; 24
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	b9 01       	movw	r22, r18
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <Write_Channel+0x70>
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	9a 95       	dec	r25
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <Write_Channel+0x6c>
 5bc:	cb 01       	movw	r24, r22
 5be:	80 95       	com	r24
 5c0:	84 23       	and	r24, r20
 5c2:	88 bb       	out	0x18, r24	; 24
 5c4:	08 95       	ret
 5c6:	61 30       	cpi	r22, 0x01	; 1
 5c8:	09 f0       	breq	.+2      	; 0x5cc <Write_Channel+0x84>
 5ca:	4a c0       	rjmp	.+148    	; 0x660 <Write_Channel+0x118>
 5cc:	48 b3       	in	r20, 0x18	; 24
 5ce:	21 e0       	ldi	r18, 0x01	; 1
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	b9 01       	movw	r22, r18
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <Write_Channel+0x92>
 5d6:	66 0f       	add	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	9a 95       	dec	r25
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <Write_Channel+0x8e>
 5de:	cb 01       	movw	r24, r22
 5e0:	84 2b       	or	r24, r20
 5e2:	88 bb       	out	0x18, r24	; 24
 5e4:	08 95       	ret
 5e6:	61 11       	cpse	r22, r1
 5e8:	0e c0       	rjmp	.+28     	; 0x606 <Write_Channel+0xbe>
 5ea:	45 b3       	in	r20, 0x15	; 21
 5ec:	21 e0       	ldi	r18, 0x01	; 1
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	b9 01       	movw	r22, r18
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <Write_Channel+0xb0>
 5f4:	66 0f       	add	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	9a 95       	dec	r25
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <Write_Channel+0xac>
 5fc:	cb 01       	movw	r24, r22
 5fe:	80 95       	com	r24
 600:	84 23       	and	r24, r20
 602:	85 bb       	out	0x15, r24	; 21
 604:	08 95       	ret
 606:	61 30       	cpi	r22, 0x01	; 1
 608:	59 f5       	brne	.+86     	; 0x660 <Write_Channel+0x118>
 60a:	45 b3       	in	r20, 0x15	; 21
 60c:	21 e0       	ldi	r18, 0x01	; 1
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	b9 01       	movw	r22, r18
 612:	02 c0       	rjmp	.+4      	; 0x618 <Write_Channel+0xd0>
 614:	66 0f       	add	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	9a 95       	dec	r25
 61a:	e2 f7       	brpl	.-8      	; 0x614 <Write_Channel+0xcc>
 61c:	cb 01       	movw	r24, r22
 61e:	84 2b       	or	r24, r20
 620:	85 bb       	out	0x15, r24	; 21
 622:	08 95       	ret
 624:	61 11       	cpse	r22, r1
 626:	0e c0       	rjmp	.+28     	; 0x644 <Write_Channel+0xfc>
 628:	42 b3       	in	r20, 0x12	; 18
 62a:	21 e0       	ldi	r18, 0x01	; 1
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	b9 01       	movw	r22, r18
 630:	02 c0       	rjmp	.+4      	; 0x636 <Write_Channel+0xee>
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	9a 95       	dec	r25
 638:	e2 f7       	brpl	.-8      	; 0x632 <Write_Channel+0xea>
 63a:	cb 01       	movw	r24, r22
 63c:	80 95       	com	r24
 63e:	84 23       	and	r24, r20
 640:	82 bb       	out	0x12, r24	; 18
 642:	08 95       	ret
 644:	61 30       	cpi	r22, 0x01	; 1
 646:	61 f4       	brne	.+24     	; 0x660 <Write_Channel+0x118>
 648:	42 b3       	in	r20, 0x12	; 18
 64a:	21 e0       	ldi	r18, 0x01	; 1
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	b9 01       	movw	r22, r18
 650:	02 c0       	rjmp	.+4      	; 0x656 <Write_Channel+0x10e>
 652:	66 0f       	add	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	9a 95       	dec	r25
 658:	e2 f7       	brpl	.-8      	; 0x652 <Write_Channel+0x10a>
 65a:	cb 01       	movw	r24, r22
 65c:	84 2b       	or	r24, r20
 65e:	82 bb       	out	0x12, r24	; 18
 660:	08 95       	ret

00000662 <Read_Channel>:
 662:	28 2f       	mov	r18, r24
 664:	27 70       	andi	r18, 0x07	; 7
 666:	86 95       	lsr	r24
 668:	86 95       	lsr	r24
 66a:	86 95       	lsr	r24
 66c:	81 30       	cpi	r24, 0x01	; 1
 66e:	81 f0       	breq	.+32     	; 0x690 <Read_Channel+0x2e>
 670:	28 f0       	brcs	.+10     	; 0x67c <Read_Channel+0x1a>
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	b9 f0       	breq	.+46     	; 0x6a4 <Read_Channel+0x42>
 676:	83 30       	cpi	r24, 0x03	; 3
 678:	f9 f0       	breq	.+62     	; 0x6b8 <Read_Channel+0x56>
 67a:	27 c0       	rjmp	.+78     	; 0x6ca <Read_Channel+0x68>
 67c:	89 b3       	in	r24, 0x19	; 25
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <Read_Channel+0x24>
 682:	95 95       	asr	r25
 684:	87 95       	ror	r24
 686:	2a 95       	dec	r18
 688:	e2 f7       	brpl	.-8      	; 0x682 <Read_Channel+0x20>
 68a:	98 2f       	mov	r25, r24
 68c:	91 70       	andi	r25, 0x01	; 1
 68e:	1d c0       	rjmp	.+58     	; 0x6ca <Read_Channel+0x68>
 690:	86 b3       	in	r24, 0x16	; 22
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <Read_Channel+0x38>
 696:	95 95       	asr	r25
 698:	87 95       	ror	r24
 69a:	2a 95       	dec	r18
 69c:	e2 f7       	brpl	.-8      	; 0x696 <Read_Channel+0x34>
 69e:	98 2f       	mov	r25, r24
 6a0:	91 70       	andi	r25, 0x01	; 1
 6a2:	13 c0       	rjmp	.+38     	; 0x6ca <Read_Channel+0x68>
 6a4:	83 b3       	in	r24, 0x13	; 19
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <Read_Channel+0x4c>
 6aa:	95 95       	asr	r25
 6ac:	87 95       	ror	r24
 6ae:	2a 95       	dec	r18
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <Read_Channel+0x48>
 6b2:	98 2f       	mov	r25, r24
 6b4:	91 70       	andi	r25, 0x01	; 1
 6b6:	09 c0       	rjmp	.+18     	; 0x6ca <Read_Channel+0x68>
 6b8:	80 b3       	in	r24, 0x10	; 16
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <Read_Channel+0x60>
 6be:	95 95       	asr	r25
 6c0:	87 95       	ror	r24
 6c2:	2a 95       	dec	r18
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <Read_Channel+0x5c>
 6c6:	98 2f       	mov	r25, r24
 6c8:	91 70       	andi	r25, 0x01	; 1
 6ca:	89 2f       	mov	r24, r25
 6cc:	08 95       	ret

000006ce <Set_Port_Direction>:
 6ce:	81 30       	cpi	r24, 0x01	; 1
 6d0:	41 f0       	breq	.+16     	; 0x6e2 <Set_Port_Direction+0x14>
 6d2:	28 f0       	brcs	.+10     	; 0x6de <Set_Port_Direction+0x10>
 6d4:	82 30       	cpi	r24, 0x02	; 2
 6d6:	39 f0       	breq	.+14     	; 0x6e6 <Set_Port_Direction+0x18>
 6d8:	83 30       	cpi	r24, 0x03	; 3
 6da:	39 f0       	breq	.+14     	; 0x6ea <Set_Port_Direction+0x1c>
 6dc:	08 95       	ret
 6de:	6a bb       	out	0x1a, r22	; 26
 6e0:	08 95       	ret
 6e2:	67 bb       	out	0x17, r22	; 23
 6e4:	08 95       	ret
 6e6:	64 bb       	out	0x14, r22	; 20
 6e8:	08 95       	ret
 6ea:	61 bb       	out	0x11, r22	; 17
 6ec:	08 95       	ret

000006ee <Write_Port>:
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	41 f0       	breq	.+16     	; 0x702 <Write_Port+0x14>
 6f2:	28 f0       	brcs	.+10     	; 0x6fe <Write_Port+0x10>
 6f4:	82 30       	cpi	r24, 0x02	; 2
 6f6:	39 f0       	breq	.+14     	; 0x706 <Write_Port+0x18>
 6f8:	83 30       	cpi	r24, 0x03	; 3
 6fa:	39 f0       	breq	.+14     	; 0x70a <Write_Port+0x1c>
 6fc:	08 95       	ret
 6fe:	6b bb       	out	0x1b, r22	; 27
 700:	08 95       	ret
 702:	68 bb       	out	0x18, r22	; 24
 704:	08 95       	ret
 706:	65 bb       	out	0x15, r22	; 21
 708:	08 95       	ret
 70a:	62 bb       	out	0x12, r22	; 18
 70c:	08 95       	ret

0000070e <Read_Port>:
 70e:	81 30       	cpi	r24, 0x01	; 1
 710:	41 f0       	breq	.+16     	; 0x722 <Read_Port+0x14>
 712:	28 f0       	brcs	.+10     	; 0x71e <Read_Port+0x10>
 714:	82 30       	cpi	r24, 0x02	; 2
 716:	39 f0       	breq	.+14     	; 0x726 <Read_Port+0x18>
 718:	83 30       	cpi	r24, 0x03	; 3
 71a:	39 f0       	breq	.+14     	; 0x72a <Read_Port+0x1c>
 71c:	07 c0       	rjmp	.+14     	; 0x72c <Read_Port+0x1e>
 71e:	99 b3       	in	r25, 0x19	; 25
 720:	05 c0       	rjmp	.+10     	; 0x72c <Read_Port+0x1e>
 722:	96 b3       	in	r25, 0x16	; 22
 724:	03 c0       	rjmp	.+6      	; 0x72c <Read_Port+0x1e>
 726:	93 b3       	in	r25, 0x13	; 19
 728:	01 c0       	rjmp	.+2      	; 0x72c <Read_Port+0x1e>
 72a:	90 b3       	in	r25, 0x10	; 16
 72c:	89 2f       	mov	r24, r25
 72e:	08 95       	ret

00000730 <Write_Nibble>:

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	d8 2f       	mov	r29, r24
 736:	c4 2f       	mov	r28, r20
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 738:	61 30       	cpi	r22, 0x01	; 1
 73a:	41 f4       	brne	.+16     	; 0x74c <Write_Nibble+0x1c>
}
//Below Functions can be improved (Ask ChatGPT)
uint8 Read_Nibble(DIO_Port Port_ID , uint8 Significance)
{
	
	uint8 value = Read_Port(Port_ID);
 73c:	e8 df       	rcall	.-48     	; 0x70e <Read_Port>
	return value ;
}

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 73e:	8f 70       	andi	r24, 0x0F	; 15
 740:	90 e1       	ldi	r25, 0x10	; 16
 742:	c9 9f       	mul	r28, r25
 744:	b0 01       	movw	r22, r0
 746:	11 24       	eor	r1, r1
 748:	68 2b       	or	r22, r24
}
//Below Functions can be improved (Ask ChatGPT)
uint8 Read_Nibble(DIO_Port Port_ID , uint8 Significance)
{
	
	uint8 value = Read_Port(Port_ID);
 74a:	04 c0       	rjmp	.+8      	; 0x754 <Write_Nibble+0x24>
 74c:	e0 df       	rcall	.-64     	; 0x70e <Read_Port>
	return value ;
}

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 74e:	80 7f       	andi	r24, 0xF0	; 240
 750:	68 2f       	mov	r22, r24
	Write_Port(Port_ID,Value);
 752:	6c 2b       	or	r22, r28
 754:	8d 2f       	mov	r24, r29
 756:	cb df       	rcall	.-106    	; 0x6ee <Write_Port>
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	08 95       	ret

0000075e <_exit>:
 75e:	f8 94       	cli

00000760 <__stop_program>:
 760:	ff cf       	rjmp	.-2      	; 0x760 <__stop_program>

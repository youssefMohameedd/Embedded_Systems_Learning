
Project_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000005c6  0000063a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000063e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ea3  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f3  00000000  00000000  00001607  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b9f  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00002a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004dd5  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c98  00000000  00000000  000079d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000866d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001724  00000000  00000000  000086f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	02 d0       	rcall	.+4      	; 0x8c <main>
  88:	9c c2       	rjmp	.+1336   	; 0x5c2 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <main>:


int main(void)
{
	
	Stepper_Init();
  8c:	1a d0       	rcall	.+52     	; 0xc2 <Stepper_Init>
	
	while(1)
	{
		Stepper_Rotate(360,10);
  8e:	6a e0       	ldi	r22, 0x0A	; 10
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	88 e6       	ldi	r24, 0x68	; 104
  94:	91 e0       	ldi	r25, 0x01	; 1
  96:	1e d0       	rcall	.+60     	; 0xd4 <Stepper_Rotate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	80 e7       	ldi	r24, 0x70	; 112
  9c:	92 e0       	ldi	r25, 0x02	; 2
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x12>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x1c>
  a8:	00 00       	nop
  aa:	f1 cf       	rjmp	.-30     	; 0x8e <main+0x2>

000000ac <delay_ms_variable>:
							   0b1011,0b0011,0b0111,0b0110};
							   
//below function is implemented as you cannot pass a run-time variable to _delay_ms() function
void delay_ms_variable(uint16 ms)
{
    while (ms--)
  ac:	00 97       	sbiw	r24, 0x00	; 0
  ae:	41 f0       	breq	.+16     	; 0xc0 <delay_ms_variable+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	e9 ef       	ldi	r30, 0xF9	; 249
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <delay_ms_variable+0x8>
  b8:	00 c0       	rjmp	.+0      	; 0xba <delay_ms_variable+0xe>
  ba:	00 00       	nop
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	c1 f7       	brne	.-16     	; 0xb0 <delay_ms_variable+0x4>
  c0:	08 95       	ret

000000c2 <Stepper_Init>:
        _delay_us(1000); // 1ms delay
}

void Stepper_Init(void)
{
	Set_Nibble_Direction(STEPPER_PORT,STEPPER_SIG,0xF);
  c2:	4f e0       	ldi	r20, 0x0F	; 15
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	8b d0       	rcall	.+278    	; 0x1e0 <Set_Nibble_Direction>
	Write_Nibble(STEPPER_PORT,STEPPER_SIG,0xF);//0x0:Stall,0xF:Loose (because common wire is connected to  ground)
  ca:	4f e0       	ldi	r20, 0x0F	; 15
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	d7 c0       	rjmp	.+430    	; 0x280 <Write_Nibble>
  d2:	08 95       	ret

000000d4 <Stepper_Rotate>:

}

void Stepper_Rotate(sint16 angle,uint16 speed)
{
  d4:	af 92       	push	r10
  d6:	bf 92       	push	r11
  d8:	cf 92       	push	r12
  da:	df 92       	push	r13
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
	sint16 steps, step_sequence_size ,direction; 
	uint8 * step_sequence;
	uint8 step_index = 0;
	uint16 speed_delay = 1000.0 / (1.0 * speed);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	78 d1       	rcall	.+752    	; 0x3e0 <__floatunsisf>
  f0:	9b 01       	movw	r18, r22
  f2:	ac 01       	movw	r20, r24
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	8a e7       	ldi	r24, 0x7A	; 122
  fa:	94 e4       	ldi	r25, 0x44	; 68
  fc:	d8 d0       	rcall	.+432    	; 0x2ae <__divsf3>
  fe:	44 d1       	rcall	.+648    	; 0x388 <__fixunssfsi>
 100:	5b 01       	movw	r10, r22
	steps = abs(angle * (32.0 / 360.0));
	 
	#elif (STEPPING == 1) // Full Stepping
	step_sequence_size = 4;
	step_sequence = full_step_sequence;
	steps = abs(angle * (32.0 / 360.0));
 102:	be 01       	movw	r22, r28
 104:	0d 2e       	mov	r0, r29
 106:	00 0c       	add	r0, r0
 108:	88 0b       	sbc	r24, r24
 10a:	99 0b       	sbc	r25, r25
 10c:	6b d1       	rcall	.+726    	; 0x3e4 <__floatsisf>
 10e:	21 e6       	ldi	r18, 0x61	; 97
 110:	3b e0       	ldi	r19, 0x0B	; 11
 112:	46 eb       	ldi	r20, 0xB6	; 182
 114:	5d e3       	ldi	r21, 0x3D	; 61
 116:	f2 d1       	rcall	.+996    	; 0x4fc <__mulsf3>
 118:	32 d1       	rcall	.+612    	; 0x37e <__fixsfsi>
 11a:	9b 01       	movw	r18, r22
 11c:	77 23       	and	r23, r23
 11e:	24 f4       	brge	.+8      	; 0x128 <Stepper_Rotate+0x54>
 120:	22 27       	eor	r18, r18
 122:	33 27       	eor	r19, r19
 124:	26 1b       	sub	r18, r22
 126:	37 0b       	sbc	r19, r23
 128:	93 2f       	mov	r25, r19
	 
	#endif
	 
	//steps = steps *GR		Uncomment this line during physical operation to compensate Gear Ratio effect
	
	if(angle>0)
 12a:	1c 16       	cp	r1, r28
 12c:	1d 06       	cpc	r1, r29
 12e:	2c f0       	brlt	.+10     	; 0x13a <Stepper_Rotate+0x66>
		step_index = 0;
	}
	else
	{
		direction = -1;
		step_index = step_sequence_size - 1;
 130:	83 e0       	ldi	r24, 0x03	; 3
		direction = 1;
		step_index = 0;
	}
	else
	{
		direction = -1;
 132:	cc 24       	eor	r12, r12
 134:	ca 94       	dec	r12
 136:	dc 2c       	mov	r13, r12
 138:	04 c0       	rjmp	.+8      	; 0x142 <Stepper_Rotate+0x6e>
	//steps = steps *GR		Uncomment this line during physical operation to compensate Gear Ratio effect
	
	if(angle>0)
	{
		direction = 1;
		step_index = 0;
 13a:	80 e0       	ldi	r24, 0x00	; 0
	 
	//steps = steps *GR		Uncomment this line during physical operation to compensate Gear Ratio effect
	
	if(angle>0)
	{
		direction = 1;
 13c:	cc 24       	eor	r12, r12
 13e:	c3 94       	inc	r12
 140:	d1 2c       	mov	r13, r1
	{
		direction = -1;
		step_index = step_sequence_size - 1;
	}
	  
	for (uint16 i = 0; i < steps; i++)
 142:	e2 2e       	mov	r14, r18
 144:	f9 2e       	mov	r15, r25
 146:	e1 14       	cp	r14, r1
 148:	f1 04       	cpc	r15, r1
 14a:	f1 f0       	breq	.+60     	; 0x188 <Stepper_Rotate+0xb4>
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	10 e0       	ldi	r17, 0x00	; 0
	{
		Write_Nibble(STEPPER_PORT, STEPPER_SIG, step_sequence[step_index]);
 150:	c8 2f       	mov	r28, r24
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	fe 01       	movw	r30, r28
 156:	e0 5a       	subi	r30, 0xA0	; 160
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	40 81       	ld	r20, Z
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	83 e0       	ldi	r24, 0x03	; 3
		delay_ms_variable(speed_delay);  // Full delay to hold the coil activation
 160:	8f d0       	rcall	.+286    	; 0x280 <Write_Nibble>
 162:	c5 01       	movw	r24, r10
 164:	a3 df       	rcall	.-186    	; 0xac <delay_ms_variable>
		step_index = (step_index + direction +step_sequence_size)%step_sequence_size;
 166:	ce 01       	movw	r24, r28
 168:	8c 0d       	add	r24, r12
 16a:	9d 1d       	adc	r25, r13
 16c:	04 96       	adiw	r24, 0x04	; 4
 16e:	83 70       	andi	r24, 0x03	; 3
 170:	90 78       	andi	r25, 0x80	; 128
 172:	99 23       	and	r25, r25
 174:	24 f4       	brge	.+8      	; 0x17e <Stepper_Rotate+0xaa>
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	8c 6f       	ori	r24, 0xFC	; 252
 17a:	9f 6f       	ori	r25, 0xFF	; 255
 17c:	01 96       	adiw	r24, 0x01	; 1
	{
		direction = -1;
		step_index = step_sequence_size - 1;
	}
	  
	for (uint16 i = 0; i < steps; i++)
 17e:	0f 5f       	subi	r16, 0xFF	; 255
 180:	1f 4f       	sbci	r17, 0xFF	; 255
 182:	0e 15       	cp	r16, r14
 184:	1f 05       	cpc	r17, r15
 186:	21 f7       	brne	.-56     	; 0x150 <Stepper_Rotate+0x7c>
		Write_Nibble(STEPPER_PORT, STEPPER_SIG, step_sequence[step_index]);
		delay_ms_variable(speed_delay);  // Full delay to hold the coil activation
		step_index = (step_index + direction +step_sequence_size)%step_sequence_size;
	}
	
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	bf 90       	pop	r11
 19a:	af 90       	pop	r10
 19c:	08 95       	ret

0000019e <Write_Port>:
	uint8 value = Read_Port(Port_ID);
	if(Significance == HIGH)	value =  (value & 0xF0) >> 4 ; 
	else if (Significance == LOW) value = (value &0x0F) ;
	
	return value ;
}
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	41 f0       	breq	.+16     	; 0x1b2 <Write_Port+0x14>
 1a2:	28 f0       	brcs	.+10     	; 0x1ae <Write_Port+0x10>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	39 f0       	breq	.+14     	; 0x1b6 <Write_Port+0x18>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	39 f0       	breq	.+14     	; 0x1ba <Write_Port+0x1c>
 1ac:	08 95       	ret
 1ae:	6b bb       	out	0x1b, r22	; 27
 1b0:	08 95       	ret
 1b2:	68 bb       	out	0x18, r22	; 24
 1b4:	08 95       	ret
 1b6:	65 bb       	out	0x15, r22	; 21
 1b8:	08 95       	ret
 1ba:	62 bb       	out	0x12, r22	; 18
 1bc:	08 95       	ret

000001be <Read_Port>:
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	41 f0       	breq	.+16     	; 0x1d2 <Read_Port+0x14>
 1c2:	28 f0       	brcs	.+10     	; 0x1ce <Read_Port+0x10>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	39 f0       	breq	.+14     	; 0x1d6 <Read_Port+0x18>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	39 f0       	breq	.+14     	; 0x1da <Read_Port+0x1c>
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <Read_Port+0x1e>
 1ce:	99 b3       	in	r25, 0x19	; 25
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <Read_Port+0x1e>
 1d2:	96 b3       	in	r25, 0x16	; 22
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <Read_Port+0x1e>
 1d6:	93 b3       	in	r25, 0x13	; 19
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <Read_Port+0x1e>
 1da:	90 b3       	in	r25, 0x10	; 16
 1dc:	89 2f       	mov	r24, r25
 1de:	08 95       	ret

000001e0 <Set_Nibble_Direction>:
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	c1 f0       	breq	.+48     	; 0x214 <Set_Nibble_Direction+0x34>
 1e4:	28 f0       	brcs	.+10     	; 0x1f0 <Set_Nibble_Direction+0x10>
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	39 f1       	breq	.+78     	; 0x238 <Set_Nibble_Direction+0x58>
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	b9 f1       	breq	.+110    	; 0x25c <Set_Nibble_Direction+0x7c>
 1ee:	08 95       	ret
 1f0:	61 30       	cpi	r22, 0x01	; 1
 1f2:	49 f4       	brne	.+18     	; 0x206 <Set_Nibble_Direction+0x26>
 1f4:	8a b3       	in	r24, 0x1a	; 26
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	90 e1       	ldi	r25, 0x10	; 16
 1fa:	49 9f       	mul	r20, r25
 1fc:	a0 01       	movw	r20, r0
 1fe:	11 24       	eor	r1, r1
 200:	48 2b       	or	r20, r24
 202:	4a bb       	out	0x1a, r20	; 26
 204:	08 95       	ret
 206:	61 11       	cpse	r22, r1
 208:	3a c0       	rjmp	.+116    	; 0x27e <Set_Nibble_Direction+0x9e>
 20a:	8a b3       	in	r24, 0x1a	; 26
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	48 2b       	or	r20, r24
 210:	4a bb       	out	0x1a, r20	; 26
 212:	08 95       	ret
 214:	61 30       	cpi	r22, 0x01	; 1
 216:	49 f4       	brne	.+18     	; 0x22a <Set_Nibble_Direction+0x4a>
 218:	87 b3       	in	r24, 0x17	; 23
 21a:	8f 70       	andi	r24, 0x0F	; 15
 21c:	90 e1       	ldi	r25, 0x10	; 16
 21e:	49 9f       	mul	r20, r25
 220:	a0 01       	movw	r20, r0
 222:	11 24       	eor	r1, r1
 224:	48 2b       	or	r20, r24
 226:	47 bb       	out	0x17, r20	; 23
 228:	08 95       	ret
 22a:	61 11       	cpse	r22, r1
 22c:	28 c0       	rjmp	.+80     	; 0x27e <Set_Nibble_Direction+0x9e>
 22e:	87 b3       	in	r24, 0x17	; 23
 230:	80 7f       	andi	r24, 0xF0	; 240
 232:	48 2b       	or	r20, r24
 234:	47 bb       	out	0x17, r20	; 23
 236:	08 95       	ret
 238:	61 30       	cpi	r22, 0x01	; 1
 23a:	49 f4       	brne	.+18     	; 0x24e <Set_Nibble_Direction+0x6e>
 23c:	84 b3       	in	r24, 0x14	; 20
 23e:	8f 70       	andi	r24, 0x0F	; 15
 240:	90 e1       	ldi	r25, 0x10	; 16
 242:	49 9f       	mul	r20, r25
 244:	a0 01       	movw	r20, r0
 246:	11 24       	eor	r1, r1
 248:	48 2b       	or	r20, r24
 24a:	44 bb       	out	0x14, r20	; 20
 24c:	08 95       	ret
 24e:	61 11       	cpse	r22, r1
 250:	16 c0       	rjmp	.+44     	; 0x27e <Set_Nibble_Direction+0x9e>
 252:	84 b3       	in	r24, 0x14	; 20
 254:	80 7f       	andi	r24, 0xF0	; 240
 256:	48 2b       	or	r20, r24
 258:	44 bb       	out	0x14, r20	; 20
 25a:	08 95       	ret
 25c:	61 30       	cpi	r22, 0x01	; 1
 25e:	49 f4       	brne	.+18     	; 0x272 <Set_Nibble_Direction+0x92>
 260:	81 b3       	in	r24, 0x11	; 17
 262:	8f 70       	andi	r24, 0x0F	; 15
 264:	90 e1       	ldi	r25, 0x10	; 16
 266:	49 9f       	mul	r20, r25
 268:	a0 01       	movw	r20, r0
 26a:	11 24       	eor	r1, r1
 26c:	48 2b       	or	r20, r24
 26e:	41 bb       	out	0x11, r20	; 17
 270:	08 95       	ret
 272:	61 11       	cpse	r22, r1
 274:	04 c0       	rjmp	.+8      	; 0x27e <Set_Nibble_Direction+0x9e>
 276:	81 b3       	in	r24, 0x11	; 17
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	48 2b       	or	r20, r24
 27c:	41 bb       	out	0x11, r20	; 17
 27e:	08 95       	ret

00000280 <Write_Nibble>:

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	d8 2f       	mov	r29, r24
 286:	c4 2f       	mov	r28, r20
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 288:	61 30       	cpi	r22, 0x01	; 1
 28a:	41 f4       	brne	.+16     	; 0x29c <Write_Nibble+0x1c>
}
			
uint8 Read_Nibble(DIO_Port Port_ID , uint8 Significance)
{
	
	uint8 value = Read_Port(Port_ID);
 28c:	98 df       	rcall	.-208    	; 0x1be <Read_Port>
	return value ;
}

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	90 e1       	ldi	r25, 0x10	; 16
 292:	c9 9f       	mul	r28, r25
 294:	b0 01       	movw	r22, r0
 296:	11 24       	eor	r1, r1
 298:	68 2b       	or	r22, r24
}
			
uint8 Read_Nibble(DIO_Port Port_ID , uint8 Significance)
{
	
	uint8 value = Read_Port(Port_ID);
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <Write_Nibble+0x24>
 29c:	90 df       	rcall	.-224    	; 0x1be <Read_Port>
	return value ;
}

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 29e:	80 7f       	andi	r24, 0xF0	; 240
 2a0:	68 2f       	mov	r22, r24
	Write_Port(Port_ID,Value);
 2a2:	6c 2b       	or	r22, r28
 2a4:	8d 2f       	mov	r24, r29
 2a6:	7b df       	rcall	.-266    	; 0x19e <Write_Port>
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <__divsf3>:
 2ae:	0c d0       	rcall	.+24     	; 0x2c8 <__divsf3x>
 2b0:	eb c0       	rjmp	.+470    	; 0x488 <__fp_round>
 2b2:	e3 d0       	rcall	.+454    	; 0x47a <__fp_pscB>
 2b4:	40 f0       	brcs	.+16     	; 0x2c6 <__divsf3+0x18>
 2b6:	da d0       	rcall	.+436    	; 0x46c <__fp_pscA>
 2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__divsf3+0x18>
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <__divsf3+0x16>
 2bc:	5f 3f       	cpi	r21, 0xFF	; 255
 2be:	19 f0       	breq	.+6      	; 0x2c6 <__divsf3+0x18>
 2c0:	cc c0       	rjmp	.+408    	; 0x45a <__fp_inf>
 2c2:	51 11       	cpse	r21, r1
 2c4:	15 c1       	rjmp	.+554    	; 0x4f0 <__fp_szero>
 2c6:	cf c0       	rjmp	.+414    	; 0x466 <__fp_nan>

000002c8 <__divsf3x>:
 2c8:	f0 d0       	rcall	.+480    	; 0x4aa <__fp_split3>
 2ca:	98 f3       	brcs	.-26     	; 0x2b2 <__divsf3+0x4>

000002cc <__divsf3_pse>:
 2cc:	99 23       	and	r25, r25
 2ce:	c9 f3       	breq	.-14     	; 0x2c2 <__divsf3+0x14>
 2d0:	55 23       	and	r21, r21
 2d2:	b1 f3       	breq	.-20     	; 0x2c0 <__divsf3+0x12>
 2d4:	95 1b       	sub	r25, r21
 2d6:	55 0b       	sbc	r21, r21
 2d8:	bb 27       	eor	r27, r27
 2da:	aa 27       	eor	r26, r26
 2dc:	62 17       	cp	r22, r18
 2de:	73 07       	cpc	r23, r19
 2e0:	84 07       	cpc	r24, r20
 2e2:	38 f0       	brcs	.+14     	; 0x2f2 <__divsf3_pse+0x26>
 2e4:	9f 5f       	subi	r25, 0xFF	; 255
 2e6:	5f 4f       	sbci	r21, 0xFF	; 255
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	44 1f       	adc	r20, r20
 2ee:	aa 1f       	adc	r26, r26
 2f0:	a9 f3       	breq	.-22     	; 0x2dc <__divsf3_pse+0x10>
 2f2:	33 d0       	rcall	.+102    	; 0x35a <__divsf3_pse+0x8e>
 2f4:	0e 2e       	mov	r0, r30
 2f6:	3a f0       	brmi	.+14     	; 0x306 <__divsf3_pse+0x3a>
 2f8:	e0 e8       	ldi	r30, 0x80	; 128
 2fa:	30 d0       	rcall	.+96     	; 0x35c <__divsf3_pse+0x90>
 2fc:	91 50       	subi	r25, 0x01	; 1
 2fe:	50 40       	sbci	r21, 0x00	; 0
 300:	e6 95       	lsr	r30
 302:	00 1c       	adc	r0, r0
 304:	ca f7       	brpl	.-14     	; 0x2f8 <__divsf3_pse+0x2c>
 306:	29 d0       	rcall	.+82     	; 0x35a <__divsf3_pse+0x8e>
 308:	fe 2f       	mov	r31, r30
 30a:	27 d0       	rcall	.+78     	; 0x35a <__divsf3_pse+0x8e>
 30c:	66 0f       	add	r22, r22
 30e:	77 1f       	adc	r23, r23
 310:	88 1f       	adc	r24, r24
 312:	bb 1f       	adc	r27, r27
 314:	26 17       	cp	r18, r22
 316:	37 07       	cpc	r19, r23
 318:	48 07       	cpc	r20, r24
 31a:	ab 07       	cpc	r26, r27
 31c:	b0 e8       	ldi	r27, 0x80	; 128
 31e:	09 f0       	breq	.+2      	; 0x322 <__divsf3_pse+0x56>
 320:	bb 0b       	sbc	r27, r27
 322:	80 2d       	mov	r24, r0
 324:	bf 01       	movw	r22, r30
 326:	ff 27       	eor	r31, r31
 328:	93 58       	subi	r25, 0x83	; 131
 32a:	5f 4f       	sbci	r21, 0xFF	; 255
 32c:	2a f0       	brmi	.+10     	; 0x338 <__divsf3_pse+0x6c>
 32e:	9e 3f       	cpi	r25, 0xFE	; 254
 330:	51 05       	cpc	r21, r1
 332:	68 f0       	brcs	.+26     	; 0x34e <__divsf3_pse+0x82>
 334:	92 c0       	rjmp	.+292    	; 0x45a <__fp_inf>
 336:	dc c0       	rjmp	.+440    	; 0x4f0 <__fp_szero>
 338:	5f 3f       	cpi	r21, 0xFF	; 255
 33a:	ec f3       	brlt	.-6      	; 0x336 <__divsf3_pse+0x6a>
 33c:	98 3e       	cpi	r25, 0xE8	; 232
 33e:	dc f3       	brlt	.-10     	; 0x336 <__divsf3_pse+0x6a>
 340:	86 95       	lsr	r24
 342:	77 95       	ror	r23
 344:	67 95       	ror	r22
 346:	b7 95       	ror	r27
 348:	f7 95       	ror	r31
 34a:	9f 5f       	subi	r25, 0xFF	; 255
 34c:	c9 f7       	brne	.-14     	; 0x340 <__divsf3_pse+0x74>
 34e:	88 0f       	add	r24, r24
 350:	91 1d       	adc	r25, r1
 352:	96 95       	lsr	r25
 354:	87 95       	ror	r24
 356:	97 f9       	bld	r25, 7
 358:	08 95       	ret
 35a:	e1 e0       	ldi	r30, 0x01	; 1
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	88 1f       	adc	r24, r24
 362:	bb 1f       	adc	r27, r27
 364:	62 17       	cp	r22, r18
 366:	73 07       	cpc	r23, r19
 368:	84 07       	cpc	r24, r20
 36a:	ba 07       	cpc	r27, r26
 36c:	20 f0       	brcs	.+8      	; 0x376 <__divsf3_pse+0xaa>
 36e:	62 1b       	sub	r22, r18
 370:	73 0b       	sbc	r23, r19
 372:	84 0b       	sbc	r24, r20
 374:	ba 0b       	sbc	r27, r26
 376:	ee 1f       	adc	r30, r30
 378:	88 f7       	brcc	.-30     	; 0x35c <__divsf3_pse+0x90>
 37a:	e0 95       	com	r30
 37c:	08 95       	ret

0000037e <__fixsfsi>:
 37e:	04 d0       	rcall	.+8      	; 0x388 <__fixunssfsi>
 380:	68 94       	set
 382:	b1 11       	cpse	r27, r1
 384:	b5 c0       	rjmp	.+362    	; 0x4f0 <__fp_szero>
 386:	08 95       	ret

00000388 <__fixunssfsi>:
 388:	98 d0       	rcall	.+304    	; 0x4ba <__fp_splitA>
 38a:	88 f0       	brcs	.+34     	; 0x3ae <__fixunssfsi+0x26>
 38c:	9f 57       	subi	r25, 0x7F	; 127
 38e:	90 f0       	brcs	.+36     	; 0x3b4 <__fixunssfsi+0x2c>
 390:	b9 2f       	mov	r27, r25
 392:	99 27       	eor	r25, r25
 394:	b7 51       	subi	r27, 0x17	; 23
 396:	a0 f0       	brcs	.+40     	; 0x3c0 <__fixunssfsi+0x38>
 398:	d1 f0       	breq	.+52     	; 0x3ce <__fixunssfsi+0x46>
 39a:	66 0f       	add	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	88 1f       	adc	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	1a f0       	brmi	.+6      	; 0x3aa <__fixunssfsi+0x22>
 3a4:	ba 95       	dec	r27
 3a6:	c9 f7       	brne	.-14     	; 0x39a <__fixunssfsi+0x12>
 3a8:	12 c0       	rjmp	.+36     	; 0x3ce <__fixunssfsi+0x46>
 3aa:	b1 30       	cpi	r27, 0x01	; 1
 3ac:	81 f0       	breq	.+32     	; 0x3ce <__fixunssfsi+0x46>
 3ae:	9f d0       	rcall	.+318    	; 0x4ee <__fp_zero>
 3b0:	b1 e0       	ldi	r27, 0x01	; 1
 3b2:	08 95       	ret
 3b4:	9c c0       	rjmp	.+312    	; 0x4ee <__fp_zero>
 3b6:	67 2f       	mov	r22, r23
 3b8:	78 2f       	mov	r23, r24
 3ba:	88 27       	eor	r24, r24
 3bc:	b8 5f       	subi	r27, 0xF8	; 248
 3be:	39 f0       	breq	.+14     	; 0x3ce <__fixunssfsi+0x46>
 3c0:	b9 3f       	cpi	r27, 0xF9	; 249
 3c2:	cc f3       	brlt	.-14     	; 0x3b6 <__fixunssfsi+0x2e>
 3c4:	86 95       	lsr	r24
 3c6:	77 95       	ror	r23
 3c8:	67 95       	ror	r22
 3ca:	b3 95       	inc	r27
 3cc:	d9 f7       	brne	.-10     	; 0x3c4 <__fixunssfsi+0x3c>
 3ce:	3e f4       	brtc	.+14     	; 0x3de <__fixunssfsi+0x56>
 3d0:	90 95       	com	r25
 3d2:	80 95       	com	r24
 3d4:	70 95       	com	r23
 3d6:	61 95       	neg	r22
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	08 95       	ret

000003e0 <__floatunsisf>:
 3e0:	e8 94       	clt
 3e2:	09 c0       	rjmp	.+18     	; 0x3f6 <__floatsisf+0x12>

000003e4 <__floatsisf>:
 3e4:	97 fb       	bst	r25, 7
 3e6:	3e f4       	brtc	.+14     	; 0x3f6 <__floatsisf+0x12>
 3e8:	90 95       	com	r25
 3ea:	80 95       	com	r24
 3ec:	70 95       	com	r23
 3ee:	61 95       	neg	r22
 3f0:	7f 4f       	sbci	r23, 0xFF	; 255
 3f2:	8f 4f       	sbci	r24, 0xFF	; 255
 3f4:	9f 4f       	sbci	r25, 0xFF	; 255
 3f6:	99 23       	and	r25, r25
 3f8:	a9 f0       	breq	.+42     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3fa:	f9 2f       	mov	r31, r25
 3fc:	96 e9       	ldi	r25, 0x96	; 150
 3fe:	bb 27       	eor	r27, r27
 400:	93 95       	inc	r25
 402:	f6 95       	lsr	r31
 404:	87 95       	ror	r24
 406:	77 95       	ror	r23
 408:	67 95       	ror	r22
 40a:	b7 95       	ror	r27
 40c:	f1 11       	cpse	r31, r1
 40e:	f8 cf       	rjmp	.-16     	; 0x400 <__EEPROM_REGION_LENGTH__>
 410:	fa f4       	brpl	.+62     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 412:	bb 0f       	add	r27, r27
 414:	11 f4       	brne	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	60 ff       	sbrs	r22, 0
 418:	1b c0       	rjmp	.+54     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 41a:	6f 5f       	subi	r22, 0xFF	; 255
 41c:	7f 4f       	sbci	r23, 0xFF	; 255
 41e:	8f 4f       	sbci	r24, 0xFF	; 255
 420:	9f 4f       	sbci	r25, 0xFF	; 255
 422:	16 c0       	rjmp	.+44     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 424:	88 23       	and	r24, r24
 426:	11 f0       	breq	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	96 e9       	ldi	r25, 0x96	; 150
 42a:	11 c0       	rjmp	.+34     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 42c:	77 23       	and	r23, r23
 42e:	21 f0       	breq	.+8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 430:	9e e8       	ldi	r25, 0x8E	; 142
 432:	87 2f       	mov	r24, r23
 434:	76 2f       	mov	r23, r22
 436:	05 c0       	rjmp	.+10     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 438:	66 23       	and	r22, r22
 43a:	71 f0       	breq	.+28     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 43c:	96 e8       	ldi	r25, 0x86	; 134
 43e:	86 2f       	mov	r24, r22
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	2a f0       	brmi	.+10     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 446:	9a 95       	dec	r25
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	88 1f       	adc	r24, r24
 44e:	da f7       	brpl	.-10     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 450:	88 0f       	add	r24, r24
 452:	96 95       	lsr	r25
 454:	87 95       	ror	r24
 456:	97 f9       	bld	r25, 7
 458:	08 95       	ret

0000045a <__fp_inf>:
 45a:	97 f9       	bld	r25, 7
 45c:	9f 67       	ori	r25, 0x7F	; 127
 45e:	80 e8       	ldi	r24, 0x80	; 128
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	08 95       	ret

00000466 <__fp_nan>:
 466:	9f ef       	ldi	r25, 0xFF	; 255
 468:	80 ec       	ldi	r24, 0xC0	; 192
 46a:	08 95       	ret

0000046c <__fp_pscA>:
 46c:	00 24       	eor	r0, r0
 46e:	0a 94       	dec	r0
 470:	16 16       	cp	r1, r22
 472:	17 06       	cpc	r1, r23
 474:	18 06       	cpc	r1, r24
 476:	09 06       	cpc	r0, r25
 478:	08 95       	ret

0000047a <__fp_pscB>:
 47a:	00 24       	eor	r0, r0
 47c:	0a 94       	dec	r0
 47e:	12 16       	cp	r1, r18
 480:	13 06       	cpc	r1, r19
 482:	14 06       	cpc	r1, r20
 484:	05 06       	cpc	r0, r21
 486:	08 95       	ret

00000488 <__fp_round>:
 488:	09 2e       	mov	r0, r25
 48a:	03 94       	inc	r0
 48c:	00 0c       	add	r0, r0
 48e:	11 f4       	brne	.+4      	; 0x494 <__fp_round+0xc>
 490:	88 23       	and	r24, r24
 492:	52 f0       	brmi	.+20     	; 0x4a8 <__fp_round+0x20>
 494:	bb 0f       	add	r27, r27
 496:	40 f4       	brcc	.+16     	; 0x4a8 <__fp_round+0x20>
 498:	bf 2b       	or	r27, r31
 49a:	11 f4       	brne	.+4      	; 0x4a0 <__fp_round+0x18>
 49c:	60 ff       	sbrs	r22, 0
 49e:	04 c0       	rjmp	.+8      	; 0x4a8 <__fp_round+0x20>
 4a0:	6f 5f       	subi	r22, 0xFF	; 255
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	08 95       	ret

000004aa <__fp_split3>:
 4aa:	57 fd       	sbrc	r21, 7
 4ac:	90 58       	subi	r25, 0x80	; 128
 4ae:	44 0f       	add	r20, r20
 4b0:	55 1f       	adc	r21, r21
 4b2:	59 f0       	breq	.+22     	; 0x4ca <__fp_splitA+0x10>
 4b4:	5f 3f       	cpi	r21, 0xFF	; 255
 4b6:	71 f0       	breq	.+28     	; 0x4d4 <__fp_splitA+0x1a>
 4b8:	47 95       	ror	r20

000004ba <__fp_splitA>:
 4ba:	88 0f       	add	r24, r24
 4bc:	97 fb       	bst	r25, 7
 4be:	99 1f       	adc	r25, r25
 4c0:	61 f0       	breq	.+24     	; 0x4da <__fp_splitA+0x20>
 4c2:	9f 3f       	cpi	r25, 0xFF	; 255
 4c4:	79 f0       	breq	.+30     	; 0x4e4 <__fp_splitA+0x2a>
 4c6:	87 95       	ror	r24
 4c8:	08 95       	ret
 4ca:	12 16       	cp	r1, r18
 4cc:	13 06       	cpc	r1, r19
 4ce:	14 06       	cpc	r1, r20
 4d0:	55 1f       	adc	r21, r21
 4d2:	f2 cf       	rjmp	.-28     	; 0x4b8 <__fp_split3+0xe>
 4d4:	46 95       	lsr	r20
 4d6:	f1 df       	rcall	.-30     	; 0x4ba <__fp_splitA>
 4d8:	08 c0       	rjmp	.+16     	; 0x4ea <__fp_splitA+0x30>
 4da:	16 16       	cp	r1, r22
 4dc:	17 06       	cpc	r1, r23
 4de:	18 06       	cpc	r1, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	f1 cf       	rjmp	.-30     	; 0x4c6 <__fp_splitA+0xc>
 4e4:	86 95       	lsr	r24
 4e6:	71 05       	cpc	r23, r1
 4e8:	61 05       	cpc	r22, r1
 4ea:	08 94       	sec
 4ec:	08 95       	ret

000004ee <__fp_zero>:
 4ee:	e8 94       	clt

000004f0 <__fp_szero>:
 4f0:	bb 27       	eor	r27, r27
 4f2:	66 27       	eor	r22, r22
 4f4:	77 27       	eor	r23, r23
 4f6:	cb 01       	movw	r24, r22
 4f8:	97 f9       	bld	r25, 7
 4fa:	08 95       	ret

000004fc <__mulsf3>:
 4fc:	0b d0       	rcall	.+22     	; 0x514 <__mulsf3x>
 4fe:	c4 cf       	rjmp	.-120    	; 0x488 <__fp_round>
 500:	b5 df       	rcall	.-150    	; 0x46c <__fp_pscA>
 502:	28 f0       	brcs	.+10     	; 0x50e <__mulsf3+0x12>
 504:	ba df       	rcall	.-140    	; 0x47a <__fp_pscB>
 506:	18 f0       	brcs	.+6      	; 0x50e <__mulsf3+0x12>
 508:	95 23       	and	r25, r21
 50a:	09 f0       	breq	.+2      	; 0x50e <__mulsf3+0x12>
 50c:	a6 cf       	rjmp	.-180    	; 0x45a <__fp_inf>
 50e:	ab cf       	rjmp	.-170    	; 0x466 <__fp_nan>
 510:	11 24       	eor	r1, r1
 512:	ee cf       	rjmp	.-36     	; 0x4f0 <__fp_szero>

00000514 <__mulsf3x>:
 514:	ca df       	rcall	.-108    	; 0x4aa <__fp_split3>
 516:	a0 f3       	brcs	.-24     	; 0x500 <__mulsf3+0x4>

00000518 <__mulsf3_pse>:
 518:	95 9f       	mul	r25, r21
 51a:	d1 f3       	breq	.-12     	; 0x510 <__mulsf3+0x14>
 51c:	95 0f       	add	r25, r21
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	55 1f       	adc	r21, r21
 522:	62 9f       	mul	r22, r18
 524:	f0 01       	movw	r30, r0
 526:	72 9f       	mul	r23, r18
 528:	bb 27       	eor	r27, r27
 52a:	f0 0d       	add	r31, r0
 52c:	b1 1d       	adc	r27, r1
 52e:	63 9f       	mul	r22, r19
 530:	aa 27       	eor	r26, r26
 532:	f0 0d       	add	r31, r0
 534:	b1 1d       	adc	r27, r1
 536:	aa 1f       	adc	r26, r26
 538:	64 9f       	mul	r22, r20
 53a:	66 27       	eor	r22, r22
 53c:	b0 0d       	add	r27, r0
 53e:	a1 1d       	adc	r26, r1
 540:	66 1f       	adc	r22, r22
 542:	82 9f       	mul	r24, r18
 544:	22 27       	eor	r18, r18
 546:	b0 0d       	add	r27, r0
 548:	a1 1d       	adc	r26, r1
 54a:	62 1f       	adc	r22, r18
 54c:	73 9f       	mul	r23, r19
 54e:	b0 0d       	add	r27, r0
 550:	a1 1d       	adc	r26, r1
 552:	62 1f       	adc	r22, r18
 554:	83 9f       	mul	r24, r19
 556:	a0 0d       	add	r26, r0
 558:	61 1d       	adc	r22, r1
 55a:	22 1f       	adc	r18, r18
 55c:	74 9f       	mul	r23, r20
 55e:	33 27       	eor	r19, r19
 560:	a0 0d       	add	r26, r0
 562:	61 1d       	adc	r22, r1
 564:	23 1f       	adc	r18, r19
 566:	84 9f       	mul	r24, r20
 568:	60 0d       	add	r22, r0
 56a:	21 1d       	adc	r18, r1
 56c:	82 2f       	mov	r24, r18
 56e:	76 2f       	mov	r23, r22
 570:	6a 2f       	mov	r22, r26
 572:	11 24       	eor	r1, r1
 574:	9f 57       	subi	r25, 0x7F	; 127
 576:	50 40       	sbci	r21, 0x00	; 0
 578:	8a f0       	brmi	.+34     	; 0x59c <__mulsf3_pse+0x84>
 57a:	e1 f0       	breq	.+56     	; 0x5b4 <__mulsf3_pse+0x9c>
 57c:	88 23       	and	r24, r24
 57e:	4a f0       	brmi	.+18     	; 0x592 <__mulsf3_pse+0x7a>
 580:	ee 0f       	add	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	bb 1f       	adc	r27, r27
 586:	66 1f       	adc	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	88 1f       	adc	r24, r24
 58c:	91 50       	subi	r25, 0x01	; 1
 58e:	50 40       	sbci	r21, 0x00	; 0
 590:	a9 f7       	brne	.-22     	; 0x57c <__mulsf3_pse+0x64>
 592:	9e 3f       	cpi	r25, 0xFE	; 254
 594:	51 05       	cpc	r21, r1
 596:	70 f0       	brcs	.+28     	; 0x5b4 <__mulsf3_pse+0x9c>
 598:	60 cf       	rjmp	.-320    	; 0x45a <__fp_inf>
 59a:	aa cf       	rjmp	.-172    	; 0x4f0 <__fp_szero>
 59c:	5f 3f       	cpi	r21, 0xFF	; 255
 59e:	ec f3       	brlt	.-6      	; 0x59a <__mulsf3_pse+0x82>
 5a0:	98 3e       	cpi	r25, 0xE8	; 232
 5a2:	dc f3       	brlt	.-10     	; 0x59a <__mulsf3_pse+0x82>
 5a4:	86 95       	lsr	r24
 5a6:	77 95       	ror	r23
 5a8:	67 95       	ror	r22
 5aa:	b7 95       	ror	r27
 5ac:	f7 95       	ror	r31
 5ae:	e7 95       	ror	r30
 5b0:	9f 5f       	subi	r25, 0xFF	; 255
 5b2:	c1 f7       	brne	.-16     	; 0x5a4 <__mulsf3_pse+0x8c>
 5b4:	fe 2b       	or	r31, r30
 5b6:	88 0f       	add	r24, r24
 5b8:	91 1d       	adc	r25, r1
 5ba:	96 95       	lsr	r25
 5bc:	87 95       	ror	r24
 5be:	97 f9       	bld	r25, 7
 5c0:	08 95       	ret

000005c2 <_exit>:
 5c2:	f8 94       	cli

000005c4 <__stop_program>:
 5c4:	ff cf       	rjmp	.-2      	; 0x5c4 <__stop_program>

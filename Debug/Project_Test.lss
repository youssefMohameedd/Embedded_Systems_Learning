
Project_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002ee  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f24  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087d  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af5  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  00002724  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004440  00000000  00000000  0000289c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d87  00000000  00000000  00006cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00007a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001346  00000000  00000000  00007aeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	02 d0       	rcall	.+4      	; 0x8c <main>
  88:	30 c1       	rjmp	.+608    	; 0x2ea <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <main>:
#include <Stepper.h>
#include <ADC.h>

int main(void)
{
	Stepper_Init();
  8c:	0e d0       	rcall	.+28     	; 0xaa <Stepper_Init>
	
	while(1)
	{
	for(uint8 counter = 0 ; counter < 8 ; counter++) Stepper_Full_wave();
  8e:	c8 e0       	ldi	r28, 0x08	; 8
  90:	23 d0       	rcall	.+70     	; 0xd8 <Stepper_Full_wave>
  92:	c1 50       	subi	r28, 0x01	; 1
  94:	e9 f7       	brne	.-6      	; 0x90 <main+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	87 ea       	ldi	r24, 0xA7	; 167
  9a:	91 e6       	ldi	r25, 0x61	; 97
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x10>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x1a>
  a6:	00 00       	nop
  a8:	f2 cf       	rjmp	.-28     	; 0x8e <main+0x2>

000000aa <Stepper_Init>:
#define SPEED_DELAY 100.0/SPEED

uint8 coils[4] = {IN1,IN2,IN3,IN4};

void Stepper_Init(void)
{	// Set_Channel_Direction(IN1,OUTPUT);
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	// Set_Channel_Direction(IN2,OUTPUT);
	// Set_Channel_Direction(IN3,OUTPUT);
	// Set_Channel_Direction(IN4,OUTPUT);
	Set_Nibble_Direction(STEPPER_PORT,STEPPER_SIG,OUTPUT);	
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	c8 d0       	rcall	.+400    	; 0x24a <Set_Nibble_Direction>
  ba:	c0 e6       	ldi	r28, 0x60	; 96
  bc:	d0 e0       	ldi	r29, 0x00	; 0
  be:	04 e6       	ldi	r16, 0x64	; 100
  c0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8 i = 0 ; i < 4 ; i++)	Write_Channel(coils[i],HIGH);
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	89 91       	ld	r24, Y+
  c6:	34 d0       	rcall	.+104    	; 0x130 <Write_Channel>
  c8:	c0 17       	cp	r28, r16
  ca:	d1 07       	cpc	r29, r17
  cc:	d1 f7       	brne	.-12     	; 0xc2 <Stepper_Init+0x18>
			
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	08 95       	ret

000000d8 <Stepper_Full_wave>:

void Stepper_Full_wave(void)
{
  d8:	ef 92       	push	r14
  da:	ff 92       	push	r15
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	c0 e6       	ldi	r28, 0x60	; 96
  e6:	d0 e0       	ldi	r29, 0x00	; 0
  e8:	0f 2e       	mov	r0, r31
  ea:	f4 e6       	ldi	r31, 0x64	; 100
  ec:	ef 2e       	mov	r14, r31
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	ff 2e       	mov	r15, r31
  f2:	f0 2d       	mov	r31, r0
  f4:	8e 01       	movw	r16, r28
	#if (0 == POLARITY )
		for (sint8 i = 0; i <4 ; i++)
		{
			Write_Channel(coils[i],LOW);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	89 91       	ld	r24, Y+
  fa:	1a d0       	rcall	.+52     	; 0x130 <Write_Channel>
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	9f e1       	ldi	r25, 0x1F	; 31
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <Stepper_Full_wave+0x28>
 104:	00 c0       	rjmp	.+0      	; 0x106 <Stepper_Full_wave+0x2e>
 106:	00 00       	nop
			_delay_ms(SPEED_DELAY);
			Write_Channel(coils[i],HIGH);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	f8 01       	movw	r30, r16
 10c:	80 81       	ld	r24, Z
 10e:	10 d0       	rcall	.+32     	; 0x130 <Write_Channel>
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9f e1       	ldi	r25, 0x1F	; 31
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <Stepper_Full_wave+0x3c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <Stepper_Full_wave+0x42>
 11a:	00 00       	nop
}

void Stepper_Full_wave(void)
{
	#if (0 == POLARITY )
		for (sint8 i = 0; i <4 ; i++)
 11c:	ce 15       	cp	r28, r14
 11e:	df 05       	cpc	r29, r15
 120:	49 f7       	brne	.-46     	; 0xf4 <Stepper_Full_wave+0x1c>
			Write_Channel(coils[i],HIGH);
			_delay_ms(SPEED_DELAY);
		}
	#endif

}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	ff 90       	pop	r15
 12c:	ef 90       	pop	r14
 12e:	08 95       	ret

00000130 <Write_Channel>:
		case PD:
		value = PIND_REG;
		break;
	}
	return value ;	
}
 130:	98 2f       	mov	r25, r24
 132:	97 70       	andi	r25, 0x07	; 7
 134:	86 95       	lsr	r24
 136:	86 95       	lsr	r24
 138:	86 95       	lsr	r24
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	41 f1       	breq	.+80     	; 0x18e <Write_Channel+0x5e>
 13e:	38 f0       	brcs	.+14     	; 0x14e <Write_Channel+0x1e>
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	09 f4       	brne	.+2      	; 0x146 <Write_Channel+0x16>
 144:	44 c0       	rjmp	.+136    	; 0x1ce <Write_Channel+0x9e>
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	09 f4       	brne	.+2      	; 0x14c <Write_Channel+0x1c>
 14a:	60 c0       	rjmp	.+192    	; 0x20c <Write_Channel+0xdc>
 14c:	08 95       	ret
 14e:	61 11       	cpse	r22, r1
 150:	0e c0       	rjmp	.+28     	; 0x16e <Write_Channel+0x3e>
 152:	4b b3       	in	r20, 0x1b	; 27
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	b9 01       	movw	r22, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <Write_Channel+0x30>
 15c:	66 0f       	add	r22, r22
 15e:	77 1f       	adc	r23, r23
 160:	9a 95       	dec	r25
 162:	e2 f7       	brpl	.-8      	; 0x15c <Write_Channel+0x2c>
 164:	cb 01       	movw	r24, r22
 166:	80 95       	com	r24
 168:	84 23       	and	r24, r20
 16a:	8b bb       	out	0x1b, r24	; 27
 16c:	08 95       	ret
 16e:	61 30       	cpi	r22, 0x01	; 1
 170:	09 f0       	breq	.+2      	; 0x174 <Write_Channel+0x44>
 172:	6a c0       	rjmp	.+212    	; 0x248 <Write_Channel+0x118>
 174:	4b b3       	in	r20, 0x1b	; 27
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	b9 01       	movw	r22, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <Write_Channel+0x52>
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	9a 95       	dec	r25
 184:	e2 f7       	brpl	.-8      	; 0x17e <Write_Channel+0x4e>
 186:	cb 01       	movw	r24, r22
 188:	84 2b       	or	r24, r20
 18a:	8b bb       	out	0x1b, r24	; 27
 18c:	08 95       	ret
 18e:	61 11       	cpse	r22, r1
 190:	0e c0       	rjmp	.+28     	; 0x1ae <Write_Channel+0x7e>
 192:	48 b3       	in	r20, 0x18	; 24
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	b9 01       	movw	r22, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <Write_Channel+0x70>
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	9a 95       	dec	r25
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <Write_Channel+0x6c>
 1a4:	cb 01       	movw	r24, r22
 1a6:	80 95       	com	r24
 1a8:	84 23       	and	r24, r20
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	08 95       	ret
 1ae:	61 30       	cpi	r22, 0x01	; 1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <Write_Channel+0x84>
 1b2:	4a c0       	rjmp	.+148    	; 0x248 <Write_Channel+0x118>
 1b4:	48 b3       	in	r20, 0x18	; 24
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	b9 01       	movw	r22, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <Write_Channel+0x92>
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	9a 95       	dec	r25
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <Write_Channel+0x8e>
 1c6:	cb 01       	movw	r24, r22
 1c8:	84 2b       	or	r24, r20
 1ca:	88 bb       	out	0x18, r24	; 24
 1cc:	08 95       	ret
 1ce:	61 11       	cpse	r22, r1
 1d0:	0e c0       	rjmp	.+28     	; 0x1ee <Write_Channel+0xbe>
 1d2:	45 b3       	in	r20, 0x15	; 21
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	b9 01       	movw	r22, r18
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <Write_Channel+0xb0>
 1dc:	66 0f       	add	r22, r22
 1de:	77 1f       	adc	r23, r23
 1e0:	9a 95       	dec	r25
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <Write_Channel+0xac>
 1e4:	cb 01       	movw	r24, r22
 1e6:	80 95       	com	r24
 1e8:	84 23       	and	r24, r20
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	08 95       	ret
 1ee:	61 30       	cpi	r22, 0x01	; 1
 1f0:	59 f5       	brne	.+86     	; 0x248 <Write_Channel+0x118>
 1f2:	45 b3       	in	r20, 0x15	; 21
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	b9 01       	movw	r22, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <Write_Channel+0xd0>
 1fc:	66 0f       	add	r22, r22
 1fe:	77 1f       	adc	r23, r23
 200:	9a 95       	dec	r25
 202:	e2 f7       	brpl	.-8      	; 0x1fc <Write_Channel+0xcc>
 204:	cb 01       	movw	r24, r22
 206:	84 2b       	or	r24, r20
 208:	85 bb       	out	0x15, r24	; 21
 20a:	08 95       	ret
 20c:	61 11       	cpse	r22, r1
 20e:	0e c0       	rjmp	.+28     	; 0x22c <Write_Channel+0xfc>
 210:	42 b3       	in	r20, 0x12	; 18
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	b9 01       	movw	r22, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <Write_Channel+0xee>
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	9a 95       	dec	r25
 220:	e2 f7       	brpl	.-8      	; 0x21a <Write_Channel+0xea>
 222:	cb 01       	movw	r24, r22
 224:	80 95       	com	r24
 226:	84 23       	and	r24, r20
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret
 22c:	61 30       	cpi	r22, 0x01	; 1
 22e:	61 f4       	brne	.+24     	; 0x248 <Write_Channel+0x118>
 230:	42 b3       	in	r20, 0x12	; 18
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	b9 01       	movw	r22, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <Write_Channel+0x10e>
 23a:	66 0f       	add	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	9a 95       	dec	r25
 240:	e2 f7       	brpl	.-8      	; 0x23a <Write_Channel+0x10a>
 242:	cb 01       	movw	r24, r22
 244:	84 2b       	or	r24, r20
 246:	82 bb       	out	0x12, r24	; 18
 248:	08 95       	ret

0000024a <Set_Nibble_Direction>:
//Below Functions can be improved (Ask ChatGPT)
void Set_Nibble_Direction(DIO_Port Port_ID , uint8 Significance , uint8 Direction)
{
	switch(Port_ID)
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	c1 f0       	breq	.+48     	; 0x27e <Set_Nibble_Direction+0x34>
 24e:	28 f0       	brcs	.+10     	; 0x25a <Set_Nibble_Direction+0x10>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	39 f1       	breq	.+78     	; 0x2a2 <Set_Nibble_Direction+0x58>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	b9 f1       	breq	.+110    	; 0x2c6 <Set_Nibble_Direction+0x7c>
 258:	08 95       	ret
	{
		case PA:
		if(Significance == HIGH)
 25a:	61 30       	cpi	r22, 0x01	; 1
 25c:	49 f4       	brne	.+18     	; 0x270 <Set_Nibble_Direction+0x26>
		{
			DDRA_REG = (DDRA_REG & 0x0F) | (Direction << 4);
 25e:	8a b3       	in	r24, 0x1a	; 26
 260:	8f 70       	andi	r24, 0x0F	; 15
 262:	90 e1       	ldi	r25, 0x10	; 16
 264:	49 9f       	mul	r20, r25
 266:	a0 01       	movw	r20, r0
 268:	11 24       	eor	r1, r1
 26a:	48 2b       	or	r20, r24
 26c:	4a bb       	out	0x1a, r20	; 26
 26e:	08 95       	ret
		}
		else if(Significance == LOW)
 270:	61 11       	cpse	r22, r1
 272:	3a c0       	rjmp	.+116    	; 0x2e8 <Set_Nibble_Direction+0x9e>
		{
			DDRA_REG = (DDRA_REG & 0xF0) | (Direction);
 274:	8a b3       	in	r24, 0x1a	; 26
 276:	80 7f       	andi	r24, 0xF0	; 240
 278:	48 2b       	or	r20, r24
 27a:	4a bb       	out	0x1a, r20	; 26
 27c:	08 95       	ret
		}
		break;
		case PB:
		if(Significance == HIGH)
 27e:	61 30       	cpi	r22, 0x01	; 1
 280:	49 f4       	brne	.+18     	; 0x294 <Set_Nibble_Direction+0x4a>
		{
			DDRB_REG = (DDRB_REG & 0x0F) | (Direction << 4);
 282:	87 b3       	in	r24, 0x17	; 23
 284:	8f 70       	andi	r24, 0x0F	; 15
 286:	90 e1       	ldi	r25, 0x10	; 16
 288:	49 9f       	mul	r20, r25
 28a:	a0 01       	movw	r20, r0
 28c:	11 24       	eor	r1, r1
 28e:	48 2b       	or	r20, r24
 290:	47 bb       	out	0x17, r20	; 23
 292:	08 95       	ret
		}
		else if(Significance == LOW)
 294:	61 11       	cpse	r22, r1
 296:	28 c0       	rjmp	.+80     	; 0x2e8 <Set_Nibble_Direction+0x9e>
		{
			DDRB_REG = (DDRB_REG & 0xF0) | (Direction);
 298:	87 b3       	in	r24, 0x17	; 23
 29a:	80 7f       	andi	r24, 0xF0	; 240
 29c:	48 2b       	or	r20, r24
 29e:	47 bb       	out	0x17, r20	; 23
 2a0:	08 95       	ret
		}
		break;
		case PC:
		if(Significance == HIGH)
 2a2:	61 30       	cpi	r22, 0x01	; 1
 2a4:	49 f4       	brne	.+18     	; 0x2b8 <Set_Nibble_Direction+0x6e>
		{
			DDRC_REG = (DDRC_REG & 0x0F) | (Direction << 4);
 2a6:	84 b3       	in	r24, 0x14	; 20
 2a8:	8f 70       	andi	r24, 0x0F	; 15
 2aa:	90 e1       	ldi	r25, 0x10	; 16
 2ac:	49 9f       	mul	r20, r25
 2ae:	a0 01       	movw	r20, r0
 2b0:	11 24       	eor	r1, r1
 2b2:	48 2b       	or	r20, r24
 2b4:	44 bb       	out	0x14, r20	; 20
 2b6:	08 95       	ret
		}
		else if( Significance == LOW)
 2b8:	61 11       	cpse	r22, r1
 2ba:	16 c0       	rjmp	.+44     	; 0x2e8 <Set_Nibble_Direction+0x9e>
		{
			DDRC_REG = (DDRC_REG & 0xF0) | (Direction);
 2bc:	84 b3       	in	r24, 0x14	; 20
 2be:	80 7f       	andi	r24, 0xF0	; 240
 2c0:	48 2b       	or	r20, r24
 2c2:	44 bb       	out	0x14, r20	; 20
 2c4:	08 95       	ret
		}
		break;
		case PD:
		if(Significance == HIGH)
 2c6:	61 30       	cpi	r22, 0x01	; 1
 2c8:	49 f4       	brne	.+18     	; 0x2dc <Set_Nibble_Direction+0x92>
		{
			DDRD_REG = (DDRD_REG & 0x0F) | (Direction << 4);
 2ca:	81 b3       	in	r24, 0x11	; 17
 2cc:	8f 70       	andi	r24, 0x0F	; 15
 2ce:	90 e1       	ldi	r25, 0x10	; 16
 2d0:	49 9f       	mul	r20, r25
 2d2:	a0 01       	movw	r20, r0
 2d4:	11 24       	eor	r1, r1
 2d6:	48 2b       	or	r20, r24
 2d8:	41 bb       	out	0x11, r20	; 17
 2da:	08 95       	ret
		}
		else if(Significance == LOW)
 2dc:	61 11       	cpse	r22, r1
 2de:	04 c0       	rjmp	.+8      	; 0x2e8 <Set_Nibble_Direction+0x9e>
		{
			DDRD_REG = (DDRD_REG & 0xF0) | (Direction);
 2e0:	81 b3       	in	r24, 0x11	; 17
 2e2:	80 7f       	andi	r24, 0xF0	; 240
 2e4:	48 2b       	or	r20, r24
 2e6:	41 bb       	out	0x11, r20	; 17
 2e8:	08 95       	ret

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>

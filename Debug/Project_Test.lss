
Project_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000522  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000596  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000596  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001402  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1e  00000000  00000000  00001b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f54  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  000034d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004eb9  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001051  00000000  00000000  000086c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00009712  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000017b6  00000000  00000000  00009822  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	11 c2       	rjmp	.+1058   	; 0x428 <__vector_1>
   6:	00 00       	nop
   8:	38 c2       	rjmp	.+1136   	; 0x47a <__vector_2>
   a:	00 00       	nop
   c:	5f c2       	rjmp	.+1214   	; 0x4cc <__vector_3>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	1b d0       	rcall	.+54     	; 0xbe <main>
  88:	4a c2       	rjmp	.+1172   	; 0x51e <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <PushB_ISR>:
#include <Stepper.h>
#include <Sensors.h>

void PushB_ISR()
{
	Write_LED(LED0,HIGH);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	82 e1       	ldi	r24, 0x12	; 18
  90:	2b d0       	rcall	.+86     	; 0xe8 <Write_LED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	83 ed       	ldi	r24, 0xD3	; 211
  96:	90 e3       	ldi	r25, 0x30	; 48
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <PushB_ISR+0xc>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <PushB_ISR+0x16>
  a2:	00 00       	nop
	_delay_ms(1000);
	Write_LED(LED0,LOW);
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	82 e1       	ldi	r24, 0x12	; 18
  a8:	1f d0       	rcall	.+62     	; 0xe8 <Write_LED>
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	83 ed       	ldi	r24, 0xD3	; 211
  ae:	90 e3       	ldi	r25, 0x30	; 48
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <PushB_ISR+0x24>
  b8:	00 c0       	rjmp	.+0      	; 0xba <PushB_ISR+0x2e>
  ba:	00 00       	nop
  bc:	08 95       	ret

000000be <main>:
}

int main(void)
{
	
	LED_Init(LED0);
  be:	82 e1       	ldi	r24, 0x12	; 18
  c0:	07 d0       	rcall	.+14     	; 0xd0 <LED_Init>
	PushB_Init(PushB0);
  c2:	8a e1       	ldi	r24, 0x1A	; 26
	EXTI_Init();
  c4:	0e d0       	rcall	.+28     	; 0xe2 <PushB_Init>
	EXTI0_Set_Callback(&PushB_ISR);
  c6:	92 d1       	rcall	.+804    	; 0x3ec <EXTI_Init>
  c8:	86 e4       	ldi	r24, 0x46	; 70
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	a8 d1       	rcall	.+848    	; 0x41e <EXTI0_Set_Callback>
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x10>

000000d0 <LED_Init>:
	Set_Channel_Direction(PushB,INPUT);	
}
void Buzzer_Init()
{
	Set_Channel_Direction(BUZZER,OUTPUT);
	Write_Channel(BUZZER,LOW);
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	0e d0       	rcall	.+28     	; 0xf4 <Set_Channel_Direction>
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	8c 2f       	mov	r24, r28
  dc:	fa d0       	rcall	.+500    	; 0x2d2 <Write_Channel>
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <PushB_Init>:
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	07 c0       	rjmp	.+14     	; 0xf4 <Set_Channel_Direction>
  e6:	08 95       	ret

000000e8 <Write_LED>:
}

void Write_LED (DIO_Channel LED , STD_Level Level)
{
	Write_Channel(LED,Level);
  e8:	f4 c0       	rjmp	.+488    	; 0x2d2 <Write_Channel>
  ea:	08 95       	ret

000000ec <GI_Enable>:

// CORRECTION: I-Bit gets set to enable interrupts, cleared to disable

void GI_Enable(void)
{
	SET_BIT(SREG_REG,I_BIT);  // Set I-bit to enable global interrupts
  ec:	8f b7       	in	r24, 0x3f	; 63
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	8f bf       	out	0x3f, r24	; 63
  f2:	08 95       	ret

000000f4 <Set_Channel_Direction>:
#include <DIO.h>

void Set_Channel_Direction (DIO_Channel Ch_ID , DIO_Direction Direction)
{
    uint8 port = Ch_ID/8 ;
    uint8 pin = Ch_ID%8 ;
  f4:	98 2f       	mov	r25, r24
  f6:	97 70       	andi	r25, 0x07	; 7
	
	switch(port)
  f8:	86 95       	lsr	r24
  fa:	86 95       	lsr	r24
  fc:	86 95       	lsr	r24
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	09 f4       	brne	.+2      	; 0x104 <Set_Channel_Direction+0x10>
 102:	40 c0       	rjmp	.+128    	; 0x184 <Set_Channel_Direction+0x90>
 104:	38 f0       	brcs	.+14     	; 0x114 <Set_Channel_Direction+0x20>
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	09 f4       	brne	.+2      	; 0x10c <Set_Channel_Direction+0x18>
 10a:	74 c0       	rjmp	.+232    	; 0x1f4 <Set_Channel_Direction+0x100>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	09 f4       	brne	.+2      	; 0x112 <Set_Channel_Direction+0x1e>
 110:	a9 c0       	rjmp	.+338    	; 0x264 <Set_Channel_Direction+0x170>
 112:	08 95       	ret
	{
		case PA:
		if(Direction == INPUT)
 114:	61 11       	cpse	r22, r1
 116:	12 c0       	rjmp	.+36     	; 0x13c <Set_Channel_Direction+0x48>
		{
			CLR_BIT(DDRA_REG,pin);
 118:	4a b3       	in	r20, 0x1a	; 26
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	b9 01       	movw	r22, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <Set_Channel_Direction+0x32>
 122:	66 0f       	add	r22, r22
 124:	77 1f       	adc	r23, r23
 126:	9a 95       	dec	r25
 128:	e2 f7       	brpl	.-8      	; 0x122 <Set_Channel_Direction+0x2e>
 12a:	cb 01       	movw	r24, r22
 12c:	80 95       	com	r24
 12e:	94 2f       	mov	r25, r20
 130:	98 23       	and	r25, r24
 132:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA_REG,pin);
 134:	9b b3       	in	r25, 0x1b	; 27
 136:	89 23       	and	r24, r25
 138:	8b bb       	out	0x1b, r24	; 27
 13a:	08 95       	ret
		}
		else if(Direction == PULL_UP)
 13c:	62 30       	cpi	r22, 0x02	; 2
 13e:	91 f4       	brne	.+36     	; 0x164 <Set_Channel_Direction+0x70>
		{
			CLR_BIT(DDRA_REG,pin);
 140:	4a b3       	in	r20, 0x1a	; 26
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	b9 01       	movw	r22, r18
 148:	02 c0       	rjmp	.+4      	; 0x14e <Set_Channel_Direction+0x5a>
 14a:	66 0f       	add	r22, r22
 14c:	77 1f       	adc	r23, r23
 14e:	9a 95       	dec	r25
 150:	e2 f7       	brpl	.-8      	; 0x14a <Set_Channel_Direction+0x56>
 152:	cb 01       	movw	r24, r22
 154:	96 2f       	mov	r25, r22
 156:	90 95       	com	r25
 158:	94 23       	and	r25, r20
 15a:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA_REG,pin);
 15c:	9b b3       	in	r25, 0x1b	; 27
 15e:	89 2b       	or	r24, r25
 160:	8b bb       	out	0x1b, r24	; 27
 162:	08 95       	ret
		}
		else if(Direction == OUTPUT)	
 164:	61 30       	cpi	r22, 0x01	; 1
 166:	09 f0       	breq	.+2      	; 0x16a <Set_Channel_Direction+0x76>
 168:	b3 c0       	rjmp	.+358    	; 0x2d0 <Set_Channel_Direction+0x1dc>
			SET_BIT(DDRA_REG,pin);
 16a:	4a b3       	in	r20, 0x1a	; 26
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <Set_Channel_Direction+0x84>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	9a 95       	dec	r25
 17a:	e2 f7       	brpl	.-8      	; 0x174 <Set_Channel_Direction+0x80>
 17c:	cb 01       	movw	r24, r22
 17e:	84 2b       	or	r24, r20
 180:	8a bb       	out	0x1a, r24	; 26
 182:	08 95       	ret
		break;
		case PB:
		if(Direction == INPUT)		
 184:	61 11       	cpse	r22, r1
 186:	12 c0       	rjmp	.+36     	; 0x1ac <Set_Channel_Direction+0xb8>
		{
			CLR_BIT(DDRB_REG,pin);
 188:	47 b3       	in	r20, 0x17	; 23
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <Set_Channel_Direction+0xa2>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	9a 95       	dec	r25
 198:	e2 f7       	brpl	.-8      	; 0x192 <Set_Channel_Direction+0x9e>
 19a:	cb 01       	movw	r24, r22
 19c:	80 95       	com	r24
 19e:	94 2f       	mov	r25, r20
 1a0:	98 23       	and	r25, r24
 1a2:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB_REG,pin);
 1a4:	98 b3       	in	r25, 0x18	; 24
 1a6:	89 23       	and	r24, r25
 1a8:	88 bb       	out	0x18, r24	; 24
 1aa:	08 95       	ret
		}
		else if(Direction == PULL_UP)
 1ac:	62 30       	cpi	r22, 0x02	; 2
 1ae:	91 f4       	brne	.+36     	; 0x1d4 <Set_Channel_Direction+0xe0>
		{
			CLR_BIT(DDRB_REG,pin);
 1b0:	47 b3       	in	r20, 0x17	; 23
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	b9 01       	movw	r22, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <Set_Channel_Direction+0xca>
 1ba:	66 0f       	add	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	9a 95       	dec	r25
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <Set_Channel_Direction+0xc6>
 1c2:	cb 01       	movw	r24, r22
 1c4:	96 2f       	mov	r25, r22
 1c6:	90 95       	com	r25
 1c8:	94 23       	and	r25, r20
 1ca:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB_REG,pin);
 1cc:	98 b3       	in	r25, 0x18	; 24
 1ce:	89 2b       	or	r24, r25
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	08 95       	ret
		}	
		else if(Direction == OUTPUT)
 1d4:	61 30       	cpi	r22, 0x01	; 1
 1d6:	09 f0       	breq	.+2      	; 0x1da <Set_Channel_Direction+0xe6>
 1d8:	7b c0       	rjmp	.+246    	; 0x2d0 <Set_Channel_Direction+0x1dc>
			SET_BIT(DDRB_REG,pin);
 1da:	47 b3       	in	r20, 0x17	; 23
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	b9 01       	movw	r22, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <Set_Channel_Direction+0xf4>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	9a 95       	dec	r25
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <Set_Channel_Direction+0xf0>
 1ec:	cb 01       	movw	r24, r22
 1ee:	84 2b       	or	r24, r20
 1f0:	87 bb       	out	0x17, r24	; 23
 1f2:	08 95       	ret
		break;
		case PC:
		if(Direction == INPUT)	
 1f4:	61 11       	cpse	r22, r1
 1f6:	12 c0       	rjmp	.+36     	; 0x21c <Set_Channel_Direction+0x128>
		{
			CLR_BIT(DDRC_REG,pin);
 1f8:	44 b3       	in	r20, 0x14	; 20
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	b9 01       	movw	r22, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <Set_Channel_Direction+0x112>
 202:	66 0f       	add	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	9a 95       	dec	r25
 208:	e2 f7       	brpl	.-8      	; 0x202 <Set_Channel_Direction+0x10e>
 20a:	cb 01       	movw	r24, r22
 20c:	80 95       	com	r24
 20e:	94 2f       	mov	r25, r20
 210:	98 23       	and	r25, r24
 212:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC_REG,pin);
 214:	95 b3       	in	r25, 0x15	; 21
 216:	89 23       	and	r24, r25
 218:	85 bb       	out	0x15, r24	; 21
 21a:	08 95       	ret
		}
		else if(Direction == PULL_UP)
 21c:	62 30       	cpi	r22, 0x02	; 2
 21e:	91 f4       	brne	.+36     	; 0x244 <Set_Channel_Direction+0x150>
		{
			CLR_BIT(DDRC_REG,pin);
 220:	44 b3       	in	r20, 0x14	; 20
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	b9 01       	movw	r22, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <Set_Channel_Direction+0x13a>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	9a 95       	dec	r25
 230:	e2 f7       	brpl	.-8      	; 0x22a <Set_Channel_Direction+0x136>
 232:	cb 01       	movw	r24, r22
 234:	96 2f       	mov	r25, r22
 236:	90 95       	com	r25
 238:	94 23       	and	r25, r20
 23a:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC_REG,pin);
 23c:	95 b3       	in	r25, 0x15	; 21
 23e:	89 2b       	or	r24, r25
 240:	85 bb       	out	0x15, r24	; 21
 242:	08 95       	ret
		}
		else if(Direction == OUTPUT)
 244:	61 30       	cpi	r22, 0x01	; 1
 246:	09 f0       	breq	.+2      	; 0x24a <Set_Channel_Direction+0x156>
 248:	43 c0       	rjmp	.+134    	; 0x2d0 <Set_Channel_Direction+0x1dc>
			SET_BIT(DDRC_REG,pin);
 24a:	44 b3       	in	r20, 0x14	; 20
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	b9 01       	movw	r22, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <Set_Channel_Direction+0x164>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	9a 95       	dec	r25
 25a:	e2 f7       	brpl	.-8      	; 0x254 <Set_Channel_Direction+0x160>
 25c:	cb 01       	movw	r24, r22
 25e:	84 2b       	or	r24, r20
 260:	84 bb       	out	0x14, r24	; 20
 262:	08 95       	ret
		break;
		case PD:
		if(Direction == INPUT)	
 264:	61 11       	cpse	r22, r1
 266:	12 c0       	rjmp	.+36     	; 0x28c <Set_Channel_Direction+0x198>
		{
			CLR_BIT(DDRD_REG,pin);
 268:	41 b3       	in	r20, 0x11	; 17
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	b9 01       	movw	r22, r18
 270:	02 c0       	rjmp	.+4      	; 0x276 <Set_Channel_Direction+0x182>
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	9a 95       	dec	r25
 278:	e2 f7       	brpl	.-8      	; 0x272 <Set_Channel_Direction+0x17e>
 27a:	cb 01       	movw	r24, r22
 27c:	80 95       	com	r24
 27e:	94 2f       	mov	r25, r20
 280:	98 23       	and	r25, r24
 282:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD_REG,pin);
 284:	92 b3       	in	r25, 0x12	; 18
 286:	89 23       	and	r24, r25
 288:	82 bb       	out	0x12, r24	; 18
 28a:	08 95       	ret
		}
		else if(Direction == PULL_UP)
 28c:	62 30       	cpi	r22, 0x02	; 2
 28e:	91 f4       	brne	.+36     	; 0x2b4 <Set_Channel_Direction+0x1c0>
		{
			CLR_BIT(DDRD_REG,pin);
 290:	41 b3       	in	r20, 0x11	; 17
 292:	21 e0       	ldi	r18, 0x01	; 1
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	b9 01       	movw	r22, r18
 298:	02 c0       	rjmp	.+4      	; 0x29e <Set_Channel_Direction+0x1aa>
 29a:	66 0f       	add	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	9a 95       	dec	r25
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <Set_Channel_Direction+0x1a6>
 2a2:	cb 01       	movw	r24, r22
 2a4:	96 2f       	mov	r25, r22
 2a6:	90 95       	com	r25
 2a8:	94 23       	and	r25, r20
 2aa:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD_REG,pin);
 2ac:	92 b3       	in	r25, 0x12	; 18
 2ae:	89 2b       	or	r24, r25
 2b0:	82 bb       	out	0x12, r24	; 18
 2b2:	08 95       	ret
		}
		else if(Direction == OUTPUT)
 2b4:	61 30       	cpi	r22, 0x01	; 1
 2b6:	61 f4       	brne	.+24     	; 0x2d0 <Set_Channel_Direction+0x1dc>
			SET_BIT(DDRD_REG,pin);
 2b8:	41 b3       	in	r20, 0x11	; 17
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	b9 01       	movw	r22, r18
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <Set_Channel_Direction+0x1d2>
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	9a 95       	dec	r25
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <Set_Channel_Direction+0x1ce>
 2ca:	cb 01       	movw	r24, r22
 2cc:	84 2b       	or	r24, r20
 2ce:	81 bb       	out	0x11, r24	; 17
 2d0:	08 95       	ret

000002d2 <Write_Channel>:
}

void Write_Channel(DIO_Channel Ch_ID ,STD_Level Level)
{
    uint8 port = Ch_ID/8 ;
    uint8 pin = Ch_ID%8 ;
 2d2:	98 2f       	mov	r25, r24
 2d4:	97 70       	andi	r25, 0x07	; 7
	
	switch(port)
 2d6:	86 95       	lsr	r24
 2d8:	86 95       	lsr	r24
 2da:	86 95       	lsr	r24
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	41 f1       	breq	.+80     	; 0x330 <Write_Channel+0x5e>
 2e0:	38 f0       	brcs	.+14     	; 0x2f0 <Write_Channel+0x1e>
 2e2:	82 30       	cpi	r24, 0x02	; 2
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <Write_Channel+0x16>
 2e6:	44 c0       	rjmp	.+136    	; 0x370 <Write_Channel+0x9e>
 2e8:	83 30       	cpi	r24, 0x03	; 3
 2ea:	09 f4       	brne	.+2      	; 0x2ee <Write_Channel+0x1c>
 2ec:	60 c0       	rjmp	.+192    	; 0x3ae <Write_Channel+0xdc>
 2ee:	08 95       	ret
	{
		case PA:
		if(Level == LOW)		CLR_BIT(PORTA_REG,pin);
 2f0:	61 11       	cpse	r22, r1
 2f2:	0e c0       	rjmp	.+28     	; 0x310 <Write_Channel+0x3e>
 2f4:	4b b3       	in	r20, 0x1b	; 27
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	b9 01       	movw	r22, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <Write_Channel+0x30>
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	9a 95       	dec	r25
 304:	e2 f7       	brpl	.-8      	; 0x2fe <Write_Channel+0x2c>
 306:	cb 01       	movw	r24, r22
 308:	80 95       	com	r24
 30a:	84 23       	and	r24, r20
 30c:	8b bb       	out	0x1b, r24	; 27
 30e:	08 95       	ret
		else if(Level == HIGH)	SET_BIT(PORTA_REG,pin);
 310:	61 30       	cpi	r22, 0x01	; 1
 312:	09 f0       	breq	.+2      	; 0x316 <Write_Channel+0x44>
 314:	6a c0       	rjmp	.+212    	; 0x3ea <Write_Channel+0x118>
 316:	4b b3       	in	r20, 0x1b	; 27
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	b9 01       	movw	r22, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <Write_Channel+0x52>
 320:	66 0f       	add	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	9a 95       	dec	r25
 326:	e2 f7       	brpl	.-8      	; 0x320 <Write_Channel+0x4e>
 328:	cb 01       	movw	r24, r22
 32a:	84 2b       	or	r24, r20
 32c:	8b bb       	out	0x1b, r24	; 27
 32e:	08 95       	ret
		break;
		case PB:
		if(Level == LOW)		CLR_BIT(PORTB_REG,pin);
 330:	61 11       	cpse	r22, r1
 332:	0e c0       	rjmp	.+28     	; 0x350 <Write_Channel+0x7e>
 334:	48 b3       	in	r20, 0x18	; 24
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	b9 01       	movw	r22, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <Write_Channel+0x70>
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	9a 95       	dec	r25
 344:	e2 f7       	brpl	.-8      	; 0x33e <Write_Channel+0x6c>
 346:	cb 01       	movw	r24, r22
 348:	80 95       	com	r24
 34a:	84 23       	and	r24, r20
 34c:	88 bb       	out	0x18, r24	; 24
 34e:	08 95       	ret
		else if(Level == HIGH)	SET_BIT(PORTB_REG,pin);
 350:	61 30       	cpi	r22, 0x01	; 1
 352:	09 f0       	breq	.+2      	; 0x356 <Write_Channel+0x84>
 354:	4a c0       	rjmp	.+148    	; 0x3ea <Write_Channel+0x118>
 356:	48 b3       	in	r20, 0x18	; 24
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	b9 01       	movw	r22, r18
 35e:	02 c0       	rjmp	.+4      	; 0x364 <Write_Channel+0x92>
 360:	66 0f       	add	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	9a 95       	dec	r25
 366:	e2 f7       	brpl	.-8      	; 0x360 <Write_Channel+0x8e>
 368:	cb 01       	movw	r24, r22
 36a:	84 2b       	or	r24, r20
 36c:	88 bb       	out	0x18, r24	; 24
 36e:	08 95       	ret
		break;
		case PC:
		if(Level == LOW)		CLR_BIT(PORTC_REG,pin);
 370:	61 11       	cpse	r22, r1
 372:	0e c0       	rjmp	.+28     	; 0x390 <Write_Channel+0xbe>
 374:	45 b3       	in	r20, 0x15	; 21
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	b9 01       	movw	r22, r18
 37c:	02 c0       	rjmp	.+4      	; 0x382 <Write_Channel+0xb0>
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	9a 95       	dec	r25
 384:	e2 f7       	brpl	.-8      	; 0x37e <Write_Channel+0xac>
 386:	cb 01       	movw	r24, r22
 388:	80 95       	com	r24
 38a:	84 23       	and	r24, r20
 38c:	85 bb       	out	0x15, r24	; 21
 38e:	08 95       	ret
		else if(Level == HIGH)	SET_BIT(PORTC_REG,pin);
 390:	61 30       	cpi	r22, 0x01	; 1
 392:	59 f5       	brne	.+86     	; 0x3ea <Write_Channel+0x118>
 394:	45 b3       	in	r20, 0x15	; 21
 396:	21 e0       	ldi	r18, 0x01	; 1
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	b9 01       	movw	r22, r18
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <Write_Channel+0xd0>
 39e:	66 0f       	add	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	9a 95       	dec	r25
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <Write_Channel+0xcc>
 3a6:	cb 01       	movw	r24, r22
 3a8:	84 2b       	or	r24, r20
 3aa:	85 bb       	out	0x15, r24	; 21
 3ac:	08 95       	ret
		break;
		case PD:
		if(Level == LOW)		CLR_BIT(PORTD_REG,pin);
 3ae:	61 11       	cpse	r22, r1
 3b0:	0e c0       	rjmp	.+28     	; 0x3ce <Write_Channel+0xfc>
 3b2:	42 b3       	in	r20, 0x12	; 18
 3b4:	21 e0       	ldi	r18, 0x01	; 1
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	b9 01       	movw	r22, r18
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <Write_Channel+0xee>
 3bc:	66 0f       	add	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	9a 95       	dec	r25
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <Write_Channel+0xea>
 3c4:	cb 01       	movw	r24, r22
 3c6:	80 95       	com	r24
 3c8:	84 23       	and	r24, r20
 3ca:	82 bb       	out	0x12, r24	; 18
 3cc:	08 95       	ret
		else if(Level == HIGH)	SET_BIT(PORTD_REG,pin);
 3ce:	61 30       	cpi	r22, 0x01	; 1
 3d0:	61 f4       	brne	.+24     	; 0x3ea <Write_Channel+0x118>
 3d2:	42 b3       	in	r20, 0x12	; 18
 3d4:	21 e0       	ldi	r18, 0x01	; 1
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	b9 01       	movw	r22, r18
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <Write_Channel+0x10e>
 3dc:	66 0f       	add	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	9a 95       	dec	r25
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <Write_Channel+0x10a>
 3e4:	cb 01       	movw	r24, r22
 3e6:	84 2b       	or	r24, r20
 3e8:	82 bb       	out	0x12, r24	; 18
 3ea:	08 95       	ret

000003ec <EXTI_Init>:
{
	EXTI1_PTR = CB_Address;
}
void EXTI2_Set_Callback(PTR_FN CB_Address)
{
	EXTI2_PTR = CB_Address;
 3ec:	84 b7       	in	r24, 0x34	; 52
 3ee:	8f 7b       	andi	r24, 0xBF	; 191
 3f0:	84 bf       	out	0x34, r24	; 52
 3f2:	85 b7       	in	r24, 0x35	; 53
 3f4:	80 7f       	andi	r24, 0xF0	; 240
 3f6:	85 bf       	out	0x35, r24	; 53
 3f8:	85 b7       	in	r24, 0x35	; 53
 3fa:	8f 60       	ori	r24, 0x0F	; 15
 3fc:	85 bf       	out	0x35, r24	; 53
 3fe:	84 b7       	in	r24, 0x34	; 52
 400:	80 64       	ori	r24, 0x40	; 64
 402:	84 bf       	out	0x34, r24	; 52
 404:	8b b7       	in	r24, 0x3b	; 59
 406:	8f 71       	andi	r24, 0x1F	; 31
 408:	8b bf       	out	0x3b, r24	; 59
 40a:	8b b7       	in	r24, 0x3b	; 59
 40c:	80 64       	ori	r24, 0x40	; 64
 40e:	8b bf       	out	0x3b, r24	; 59
 410:	8b b7       	in	r24, 0x3b	; 59
 412:	80 68       	ori	r24, 0x80	; 128
 414:	8b bf       	out	0x3b, r24	; 59
 416:	8a b7       	in	r24, 0x3a	; 58
 418:	8a bf       	out	0x3a, r24	; 58
 41a:	68 ce       	rjmp	.-816    	; 0xec <GI_Enable>
 41c:	08 95       	ret

0000041e <EXTI0_Set_Callback>:
 41e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <EXTI0_PTR+0x1>
 422:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <EXTI0_PTR>
 426:	08 95       	ret

00000428 <__vector_1>:
}

void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
 428:	1f 92       	push	r1
 42a:	0f 92       	push	r0
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
 432:	2f 93       	push	r18
 434:	3f 93       	push	r19
 436:	4f 93       	push	r20
 438:	5f 93       	push	r21
 43a:	6f 93       	push	r22
 43c:	7f 93       	push	r23
 43e:	8f 93       	push	r24
 440:	9f 93       	push	r25
 442:	af 93       	push	r26
 444:	bf 93       	push	r27
 446:	ef 93       	push	r30
 448:	ff 93       	push	r31
	if(EXTI0_PTR != NULL)	EXTI0_PTR() ;
 44a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTI0_PTR>
 44e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTI0_PTR+0x1>
 452:	30 97       	sbiw	r30, 0x00	; 0
 454:	09 f0       	breq	.+2      	; 0x458 <__vector_1+0x30>
 456:	09 95       	icall
}
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <__vector_2>:

void __vector_2(void) __attribute__((signal,used));
void __vector_2(void)
{
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
 484:	2f 93       	push	r18
 486:	3f 93       	push	r19
 488:	4f 93       	push	r20
 48a:	5f 93       	push	r21
 48c:	6f 93       	push	r22
 48e:	7f 93       	push	r23
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	af 93       	push	r26
 496:	bf 93       	push	r27
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
	if(EXTI1_PTR != NULL)	EXTI1_PTR() ;
 49c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <EXTI1_PTR>
 4a0:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <EXTI1_PTR+0x1>
 4a4:	30 97       	sbiw	r30, 0x00	; 0
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__vector_2+0x30>
 4a8:	09 95       	icall
}
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	bf 91       	pop	r27
 4b0:	af 91       	pop	r26
 4b2:	9f 91       	pop	r25
 4b4:	8f 91       	pop	r24
 4b6:	7f 91       	pop	r23
 4b8:	6f 91       	pop	r22
 4ba:	5f 91       	pop	r21
 4bc:	4f 91       	pop	r20
 4be:	3f 91       	pop	r19
 4c0:	2f 91       	pop	r18
 4c2:	0f 90       	pop	r0
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	0f 90       	pop	r0
 4c8:	1f 90       	pop	r1
 4ca:	18 95       	reti

000004cc <__vector_3>:

void __vector_3(void) __attribute__((signal,used));
void __vector_3(void)
{
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	2f 93       	push	r18
 4d8:	3f 93       	push	r19
 4da:	4f 93       	push	r20
 4dc:	5f 93       	push	r21
 4de:	6f 93       	push	r22
 4e0:	7f 93       	push	r23
 4e2:	8f 93       	push	r24
 4e4:	9f 93       	push	r25
 4e6:	af 93       	push	r26
 4e8:	bf 93       	push	r27
 4ea:	ef 93       	push	r30
 4ec:	ff 93       	push	r31
	if(EXTI2_PTR != NULL)	EXTI2_PTR() ;
 4ee:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4f2:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4f6:	30 97       	sbiw	r30, 0x00	; 0
 4f8:	09 f0       	breq	.+2      	; 0x4fc <__vector_3+0x30>
 4fa:	09 95       	icall
}
 4fc:	ff 91       	pop	r31
 4fe:	ef 91       	pop	r30
 500:	bf 91       	pop	r27
 502:	af 91       	pop	r26
 504:	9f 91       	pop	r25
 506:	8f 91       	pop	r24
 508:	7f 91       	pop	r23
 50a:	6f 91       	pop	r22
 50c:	5f 91       	pop	r21
 50e:	4f 91       	pop	r20
 510:	3f 91       	pop	r19
 512:	2f 91       	pop	r18
 514:	0f 90       	pop	r0
 516:	0f be       	out	0x3f, r0	; 63
 518:	0f 90       	pop	r0
 51a:	1f 90       	pop	r1
 51c:	18 95       	reti

0000051e <_exit>:
 51e:	f8 94       	cli

00000520 <__stop_program>:
 520:	ff cf       	rjmp	.-2      	; 0x520 <__stop_program>

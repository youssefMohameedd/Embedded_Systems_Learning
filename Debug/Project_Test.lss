
Project_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000774  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062d  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a8  00000000  00000000  00000f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000061d1  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ee  00000000  00000000  0000763d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000782b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000107c  00000000  00000000  0000784b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	31 d0       	rcall	.+98     	; 0xc4 <main>
  62:	42 c0       	rjmp	.+132    	; 0xe8 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <SSD_WTD>:
	
}
	
void SSD_WTD(uint8  value)
{
	uint8 First_Digit = value%10;
  66:	9d ec       	ldi	r25, 0xCD	; 205
  68:	89 9f       	mul	r24, r25
  6a:	91 2d       	mov	r25, r1
  6c:	11 24       	eor	r1, r1
  6e:	29 2f       	mov	r18, r25
  70:	26 95       	lsr	r18
  72:	26 95       	lsr	r18
  74:	26 95       	lsr	r18
  76:	22 0f       	add	r18, r18
  78:	32 2f       	mov	r19, r18
  7a:	33 0f       	add	r19, r19
  7c:	33 0f       	add	r19, r19
  7e:	23 0f       	add	r18, r19
  80:	82 1b       	sub	r24, r18
  82:	28 2f       	mov	r18, r24
	uint8 Second_Digit = value/10;
  84:	96 95       	lsr	r25
  86:	96 95       	lsr	r25
  88:	96 95       	lsr	r25
	
	//Write Digit 2 
	First_Digit <<= 4;
	PORTA = (PORTA & 0x0F ) | First_Digit;
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	8f 70       	andi	r24, 0x0F	; 15
  8e:	22 95       	swap	r18
  90:	20 7f       	andi	r18, 0xF0	; 240
  92:	28 2b       	or	r18, r24
  94:	2b bb       	out	0x1b, r18	; 27
#include <SSD_CFG.h>

void SSD_INIT(SSD_Num x)
{

	PORTB = 0b00000010 << x;
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	ef e3       	ldi	r30, 0x3F	; 63
  9c:	fc e9       	ldi	r31, 0x9C	; 156
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <SSD_WTD+0x38>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <SSD_WTD+0x3e>
  a4:	00 00       	nop
	SSD_INIT(SSD_1);
	_delay_ms(10);
	
	//Enable EN2
	Second_Digit <<= 4;
	PORTA = (PORTA & 0x0F ) | Second_Digit;
  a6:	8b b3       	in	r24, 0x1b	; 27
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	92 95       	swap	r25
  ac:	90 7f       	andi	r25, 0xF0	; 240
  ae:	98 2b       	or	r25, r24
  b0:	9b bb       	out	0x1b, r25	; 27
#include <SSD_CFG.h>

void SSD_INIT(SSD_Num x)
{

	PORTB = 0b00000010 << x;
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	8f e3       	ldi	r24, 0x3F	; 63
  b8:	9c e9       	ldi	r25, 0x9C	; 156
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <SSD_WTD+0x54>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <SSD_WTD+0x5a>
  c0:	00 00       	nop
  c2:	08 95       	ret

000000c4 <main>:
	
}

int main(void)
{	
	DDRB = 0x0F;  // Set PORTB as output for SSD control
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;  // Set upper nibble of PORTA as output for segments
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	PORTB = 0x00;
  cc:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x00; 
  ce:	1b ba       	out	0x1b, r1	; 27
#include <SSD_CFG.h>

void SSD_INIT(SSD_Num x)
{

	PORTB = 0b00000010 << x;
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	88 bb       	out	0x18, r24	; 24
	
	
}

int main(void)
{	
  d4:	d3 e6       	ldi	r29, 0x63	; 99
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <main+0x20>
	{	
		for (uint8 i = 99; i > 0 ; i--)
		{
			for(uint8 counter = 0 ; counter < 50 ; counter++)
			{
				SSD_WTD(i);
  d8:	8d 2f       	mov	r24, r29
  da:	c5 df       	rcall	.-118    	; 0x66 <SSD_WTD>
  dc:	c1 50       	subi	r28, 0x01	; 1

	while(1)
	{	
		for (uint8 i = 99; i > 0 ; i--)
		{
			for(uint8 counter = 0 ; counter < 50 ; counter++)
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x14>
  e0:	d1 50       	subi	r29, 0x01	; 1
	PORTA = 0x00; 
	SSD_INIT(SSD_1);

	while(1)
	{	
		for (uint8 i = 99; i > 0 ; i--)
  e2:	c1 f3       	breq	.-16     	; 0xd4 <main+0x10>
	
	
}

int main(void)
{	
  e4:	c2 e3       	ldi	r28, 0x32	; 50
  e6:	f8 cf       	rjmp	.-16     	; 0xd8 <main+0x14>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

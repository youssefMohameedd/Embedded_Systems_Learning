
Project_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000b3c  00000bd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800088  00800088  00000bf8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019a3  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af7  00000000  00000000  00002747  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011be  00000000  00000000  0000323e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  000043fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004c30  00000000  00000000  00004660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014df  00000000  00000000  00009290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000a76f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001672  00000000  00000000  0000a85f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	02 d0       	rcall	.+4      	; 0x8c <main>
  88:	57 c5       	rjmp	.+2734   	; 0xb38 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <main>:
#include <Sensors.h>

int main(void)
{
	
	ADC_Init();
  8c:	81 d1       	rcall	.+770    	; 0x390 <ADC_Init>
	LCD_Init();
  8e:	5a d0       	rcall	.+180    	; 0x144 <LCD_Init>
  90:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	9c e9       	ldi	r25, 0x9C	; 156
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <main+0x8>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0xe>
  9a:	00 00       	nop
	
	uint16 value ;

	while(1)
	{
		value = Sensor_Read(LM35);
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	51 d1       	rcall	.+674    	; 0x342 <Sensor_Read>
  a0:	6b 01       	movw	r12, r22
  a2:	7c 01       	movw	r14, r24
		LCD_Write_Cmd(DISPLAY_CLEAR);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	28 d0       	rcall	.+80     	; 0xf8 <LCD_Write_Cmd>
		LCD_Move_Pos(0,3);
  a8:	63 e0       	ldi	r22, 0x03	; 3
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	84 d0       	rcall	.+264    	; 0x1b6 <LCD_Move_Pos>
		LCD_Write_Str("Temp:");
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	90 e0       	ldi	r25, 0x00	; 0
		LCD_Write_Number(value);
  b2:	ca d0       	rcall	.+404    	; 0x248 <LCD_Write_Str>
  b4:	c7 01       	movw	r24, r14
  b6:	b6 01       	movw	r22, r12
  b8:	ff d3       	rcall	.+2046   	; 0x8b8 <__fixunssfsi>
  ba:	cb 01       	movw	r24, r22
  bc:	e9 d0       	rcall	.+466    	; 0x290 <LCD_Write_Number>
  be:	9f ef       	ldi	r25, 0xFF	; 255
  c0:	24 e3       	ldi	r18, 0x34	; 52
  c2:	8c e0       	ldi	r24, 0x0C	; 12
  c4:	91 50       	subi	r25, 0x01	; 1
  c6:	20 40       	sbci	r18, 0x00	; 0
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x38>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x42>
  ce:	00 00       	nop
  d0:	e5 cf       	rjmp	.-54     	; 0x9c <main+0x10>

000000d2 <LCD_Latch>:

static uint8 AC = 0; // Address Counter initialization 
static uint8 Init_Flag = 0;

void LCD_Latch(void) {
	Write_Channel(LCD_E, HIGH);
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	8b e0       	ldi	r24, 0x0B	; 11
  d6:	76 d2       	rcall	.+1260   	; 0x5c4 <Write_Channel>
  d8:	89 ef       	ldi	r24, 0xF9	; 249
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_Latch+0xa>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_Latch+0x10>
  e2:	00 00       	nop
	_delay_ms(1); 
	Write_Channel(LCD_E, LOW);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	8b e0       	ldi	r24, 0x0B	; 11
  e8:	6d d2       	rcall	.+1242   	; 0x5c4 <Write_Channel>
  ea:	89 ef       	ldi	r24, 0xF9	; 249
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Latch+0x1c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_Latch+0x22>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <LCD_Write_Cmd>:
	_delay_ms(1);
}
// Logic : __HigherNibble__|‾‾Latch‾‾|__LowerNibble__|‾‾Latch‾‾|__
void LCD_Write_Cmd(uint8 cmd) {
  f8:	cf 93       	push	r28
  fa:	c8 2f       	mov	r28, r24
	
	Write_Channel(LCD_RS, LOW);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	89 e0       	ldi	r24, 0x09	; 9
 100:	61 d2       	rcall	.+1218   	; 0x5c4 <Write_Channel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_Write_Cmd+0xc>
	_delay_us(2);
	
	#if(INIT_MODE==0)
	if(Init_Flag == 1)
 104:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	39 f4       	brne	.+14     	; 0x11a <LCD_Write_Cmd+0x22>
	{	
	Write_Nibble(LCD_PORT, LCD_SIG, cmd >> 4); // Send higher nibble
 10c:	4c 2f       	mov	r20, r28
 10e:	42 95       	swap	r20
 110:	4f 70       	andi	r20, 0x0F	; 15
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 116:	54 d3       	rcall	.+1704   	; 0x7c0 <Write_Nibble>
 118:	dc df       	rcall	.-72     	; 0xd2 <LCD_Latch>
	}
	Write_Nibble(LCD_PORT, LCD_SIG, cmd & 0x0F); // Send lower nibble
 11a:	4c 2f       	mov	r20, r28
 11c:	4f 70       	andi	r20, 0x0F	; 15
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 122:	4e d3       	rcall	.+1692   	; 0x7c0 <Write_Nibble>
 124:	d6 df       	rcall	.-84     	; 0xd2 <LCD_Latch>
 126:	80 e1       	ldi	r24, 0x10	; 16
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_Write_Cmd+0x30>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_Write_Cmd+0x36>
	Write_Port(LCD_PORT,cmd);
	LCD_Latch();
	
	#endif
	_delay_us(50);
	if(cmd == 0x01 || cmd == 0x02 ) _delay_ms(2);
 12e:	c1 50       	subi	r28, 0x01	; 1
 130:	c2 30       	cpi	r28, 0x02	; 2
 132:	30 f4       	brcc	.+12     	; 0x140 <LCD_Write_Cmd+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	83 ef       	ldi	r24, 0xF3	; 243
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_Write_Cmd+0x40>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_Write_Cmd+0x46>
 13e:	00 00       	nop
}
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <LCD_Init>:

void LCD_Init(void) 
{	
	Set_Channel_Direction(LCD_E, OUTPUT);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	8b e0       	ldi	r24, 0x0B	; 11
 148:	4e d1       	rcall	.+668    	; 0x3e6 <Set_Channel_Direction>
	Set_Channel_Direction(LCD_RS, OUTPUT);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	89 e0       	ldi	r24, 0x09	; 9
 14e:	4b d1       	rcall	.+662    	; 0x3e6 <Set_Channel_Direction>
	Set_Channel_Direction(LCD_RW, OUTPUT);
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	48 d1       	rcall	.+656    	; 0x3e6 <Set_Channel_Direction>
 156:	83 ed       	ldi	r24, 0xD3	; 211
 158:	90 e3       	ldi	r25, 0x30	; 48
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Init+0x16>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Init+0x1c>
	
	_delay_ms(50); // Wait for LCD power-up
	Write_Channel(LCD_RW, LOW); // Always in write mode
 160:	00 00       	nop
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	8a e0       	ldi	r24, 0x0A	; 10

	#if(INIT_MODE==0)
	
		Set_Nibble_Direction(LCD_PORT,LCD_SIG,0xF);
 166:	2e d2       	rcall	.+1116   	; 0x5c4 <Write_Channel>
 168:	4f e0       	ldi	r20, 0x0F	; 15
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	80 e0       	ldi	r24, 0x00	; 0
		//Initially, we configure the LCD as an 8-bit interface until it's completely stable to convert to a 4 bit-interface(Kinda Formalities) 
		LCD_Write_Cmd(EIGHT_BIT_MODE);	_delay_ms(5); 
 16e:	d8 d2       	rcall	.+1456   	; 0x720 <Set_Nibble_Direction>
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	c2 df       	rcall	.-124    	; 0xf8 <LCD_Write_Cmd>
 174:	81 ee       	ldi	r24, 0xE1	; 225
 176:	94 e0       	ldi	r25, 0x04	; 4
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Init+0x34>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Init+0x3a>
		LCD_Write_Cmd(EIGHT_BIT_MODE);	_delay_us(150);
 17e:	00 00       	nop
 180:	83 e0       	ldi	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	ba df       	rcall	.-140    	; 0xf8 <LCD_Write_Cmd>
 184:	92 e3       	ldi	r25, 0x32	; 50
 186:	9a 95       	dec	r25
		LCD_Write_Cmd(EIGHT_BIT_MODE);
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Init+0x42>
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	b5 df       	rcall	.-150    	; 0xf8 <LCD_Write_Cmd>
		LCD_Write_Cmd(FOUR_BIT_MODE);	_delay_ms(1);  // Ensure LCD properly latches 4-bit modeSome LCDs need a brief delay before fully transitioning
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	b3 df       	rcall	.-154    	; 0xf8 <LCD_Write_Cmd>
 192:	89 ef       	ldi	r24, 0xF9	; 249
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Init+0x52>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Init+0x58>
		Init_Flag = 1;
 19c:	00 00       	nop
 19e:	81 e0       	ldi	r24, 0x01	; 1
		LCD_Write_Cmd(FUNCTION_SET);
 1a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 1a4:	88 e2       	ldi	r24, 0x28	; 40
		LCD_Write_Cmd(DISPLAY_CONTROL);
 1a6:	a8 df       	rcall	.-176    	; 0xf8 <LCD_Write_Cmd>
 1a8:	8f e0       	ldi	r24, 0x0F	; 15
 1aa:	a6 df       	rcall	.-180    	; 0xf8 <LCD_Write_Cmd>
		LCD_Write_Cmd(DISPLAY_CLEAR); 
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	a4 df       	rcall	.-184    	; 0xf8 <LCD_Write_Cmd>
 1b0:	86 e0       	ldi	r24, 0x06	; 6
		LCD_Write_Cmd(ENTRY_MODE_SET); //optional
 1b2:	a2 cf       	rjmp	.-188    	; 0xf8 <LCD_Write_Cmd>
 1b4:	08 95       	ret

000001b6 <LCD_Move_Pos>:
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	40 f4       	brcc	.+16     	; 0x1ca <LCD_Move_Pos+0x14>
}

void LCD_Move_Pos(uint8 row, uint8 col)
{
	uint8 index = 0;
	if(row <2 && col <16)	index =(row*LINE_2_BASE_ADDRESS) + col;
 1ba:	60 31       	cpi	r22, 0x10	; 16
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <LCD_Move_Pos+0x1a>
 1be:	90 e4       	ldi	r25, 0x40	; 64
 1c0:	89 9f       	mul	r24, r25
 1c2:	60 0d       	add	r22, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	86 2f       	mov	r24, r22
 1c8:	0a c0       	rjmp	.+20     	; 0x1de <LCD_Move_Pos+0x28>
	else if (row >1 )		index = LINE_2_BASE_ADDRESS + col ;
 1ca:	80 e4       	ldi	r24, 0x40	; 64
 1cc:	86 0f       	add	r24, r22
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <LCD_Move_Pos+0x28>
	else if (col >16)		index = LINE_2_BASE_ADDRESS + (col%16); // wrapping exceeding columns
 1d0:	61 31       	cpi	r22, 0x11	; 17
 1d2:	20 f0       	brcs	.+8      	; 0x1dc <LCD_Move_Pos+0x26>
 1d4:	86 2f       	mov	r24, r22
 1d6:	8f 70       	andi	r24, 0x0F	; 15
 1d8:	80 5c       	subi	r24, 0xC0	; 192
 1da:	01 c0       	rjmp	.+2      	; 0x1de <LCD_Move_Pos+0x28>

}

void LCD_Move_Pos(uint8 row, uint8 col)
{
	uint8 index = 0;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
	if(row <2 && col <16)	index =(row*LINE_2_BASE_ADDRESS) + col;
	else if (row >1 )		index = LINE_2_BASE_ADDRESS + col ;
	else if (col >16)		index = LINE_2_BASE_ADDRESS + (col%16); // wrapping exceeding columns
	AC = index;			// necessary for end of line string bug handling
 1de:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <AC>
	SET_BIT(index,7);   // Command Selection to modify the Address Counter value
	LCD_Write_Cmd(index);
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	89 cf       	rjmp	.-238    	; 0xf8 <LCD_Write_Cmd>
 1e6:	08 95       	ret

000001e8 <LCD_Write_Char>:

}

void LCD_Write_Char(uint8 character)
 {	
 1e8:	cf 93       	push	r28
 1ea:	c8 2f       	mov	r28, r24
	 //Handling end of Line string initiations
	if(AC == 0x10) LCD_Move_Pos(1,0);
 1ec:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <AC>
 1f0:	80 31       	cpi	r24, 0x10	; 16
 1f2:	19 f4       	brne	.+6      	; 0x1fa <LCD_Write_Char+0x12>
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	de df       	rcall	.-68     	; 0x1b6 <LCD_Move_Pos>
	if(AC > 0x4F)
 1fa:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <AC>
 1fe:	80 35       	cpi	r24, 0x50	; 80
 200:	20 f0       	brcs	.+8      	; 0x20a <LCD_Write_Char+0x22>
	 {
		 AC = 0 ;
 202:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <AC>
		 LCD_Write_Cmd(RETURN_HOME);
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	77 df       	rcall	.-274    	; 0xf8 <LCD_Write_Cmd>
	 }
	
	Write_Channel(LCD_RS, HIGH);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	89 e0       	ldi	r24, 0x09	; 9
 20e:	da d1       	rcall	.+948    	; 0x5c4 <Write_Channel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	00 c0       	rjmp	.+0      	; 0x212 <LCD_Write_Char+0x2a>
	_delay_us(2);
	
	#if(INIT_MODE==0)
	
	Write_Nibble(LCD_PORT,LCD_SIG, character >> 4);   // Send higher nibble
 212:	4c 2f       	mov	r20, r28
 214:	42 95       	swap	r20
 216:	4f 70       	andi	r20, 0x0F	; 15
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 21c:	d1 d2       	rcall	.+1442   	; 0x7c0 <Write_Nibble>

	Write_Nibble(LCD_PORT,LCD_SIG, character & 0x0F); // Send lower nibble
 21e:	59 df       	rcall	.-334    	; 0xd2 <LCD_Latch>
 220:	4c 2f       	mov	r20, r28
 222:	4f 70       	andi	r20, 0x0F	; 15
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 228:	cb d2       	rcall	.+1430   	; 0x7c0 <Write_Nibble>
 22a:	53 df       	rcall	.-346    	; 0xd2 <LCD_Latch>
 22c:	80 e1       	ldi	r24, 0x10	; 16
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <LCD_Write_Char+0x46>
 232:	00 c0       	rjmp	.+0      	; 0x234 <LCD_Write_Char+0x4c>
	Write_Port(LCD_PORT,character);
	LCD_Latch();
	
	#endif
	_delay_us(50);
	AC++;
 234:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <AC>
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <AC>
	
}
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <LCD_Write_Digit>:

void LCD_Write_Digit(uint8 digit)
{
	digit = digit + '0' ; //mapping decimal digits to corresponding ascii code
	LCD_Write_Char(digit);
 242:	80 5d       	subi	r24, 0xD0	; 208
 244:	d1 cf       	rjmp	.-94     	; 0x1e8 <LCD_Write_Char>
 246:	08 95       	ret

00000248 <LCD_Write_Str>:
	
}

void LCD_Write_Str(uint8 * ptr)
{ 
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	ec 01       	movw	r28, r24
	while((*ptr)!='\0')
 24e:	88 81       	ld	r24, Y
 250:	88 23       	and	r24, r24
 252:	29 f0       	breq	.+10     	; 0x25e <LCD_Write_Str+0x16>
 254:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Write_Char(*ptr);
 256:	c8 df       	rcall	.-112    	; 0x1e8 <LCD_Write_Char>
	
}

void LCD_Write_Str(uint8 * ptr)
{ 
	while((*ptr)!='\0')
 258:	89 91       	ld	r24, Y+
 25a:	81 11       	cpse	r24, r1
 25c:	fc cf       	rjmp	.-8      	; 0x256 <LCD_Write_Str+0xe>
	{
		LCD_Write_Char(*ptr);
		ptr++;
	}
	
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <No_Digits>:

uint8  No_Digits(uint32 n)
{
 264:	9c 01       	movw	r18, r24
	uint8 counter = 0;
	while (n!=0)
 266:	89 2b       	or	r24, r25
 268:	81 f0       	breq	.+32     	; 0x28a <No_Digits+0x26>
 26a:	40 e0       	ldi	r20, 0x00	; 0
	{	n = n/10;
 26c:	ad ec       	ldi	r26, 0xCD	; 205
 26e:	bc ec       	ldi	r27, 0xCC	; 204
 270:	54 d4       	rcall	.+2216   	; 0xb1a <__umulhisi3>
 272:	9c 01       	movw	r18, r24
 274:	36 95       	lsr	r19
 276:	27 95       	ror	r18
 278:	36 95       	lsr	r19
 27a:	27 95       	ror	r18
 27c:	36 95       	lsr	r19
 27e:	27 95       	ror	r18
		counter++;
 280:	4f 5f       	subi	r20, 0xFF	; 255
}

uint8  No_Digits(uint32 n)
{
	uint8 counter = 0;
	while (n!=0)
 282:	21 15       	cp	r18, r1
 284:	31 05       	cpc	r19, r1
 286:	91 f7       	brne	.-28     	; 0x26c <No_Digits+0x8>
 288:	01 c0       	rjmp	.+2      	; 0x28c <No_Digits+0x28>
	
}

uint8  No_Digits(uint32 n)
{
	uint8 counter = 0;
 28a:	40 e0       	ldi	r20, 0x00	; 0
	while (n!=0)
	{	n = n/10;
		counter++;
	}
	return counter;
}
 28c:	84 2f       	mov	r24, r20
 28e:	08 95       	ret

00000290 <LCD_Write_Number>:

void LCD_Write_Number(uint32 number)
{
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	7c 01       	movw	r14, r24
	//if(number ==0 )LCD_Write_Char(0);
	
	uint8 counter = No_Digits(number);
 29e:	e2 df       	rcall	.-60     	; 0x264 <No_Digits>
	uint32 divisor= 1 ;
	uint8 digit ;
	for (uint8 i = 0 ; i <counter-1 ; i++ )
 2a0:	48 2f       	mov	r20, r24
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	41 50       	subi	r20, 0x01	; 1
 2a6:	51 09       	sbc	r21, r1
 2a8:	14 16       	cp	r1, r20
 2aa:	15 06       	cpc	r1, r21
 2ac:	ac f4       	brge	.+42     	; 0x2d8 <LCD_Write_Number+0x48>
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	c1 e0       	ldi	r28, 0x01	; 1
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		 divisor = divisor*10; //used in multiplication and arithmetic shift
 2b4:	9e 01       	movw	r18, r28
 2b6:	22 0f       	add	r18, r18
 2b8:	33 1f       	adc	r19, r19
 2ba:	cc 0f       	add	r28, r28
 2bc:	dd 1f       	adc	r29, r29
 2be:	cc 0f       	add	r28, r28
 2c0:	dd 1f       	adc	r29, r29
 2c2:	cc 0f       	add	r28, r28
 2c4:	dd 1f       	adc	r29, r29
 2c6:	c2 0f       	add	r28, r18
 2c8:	d3 1f       	adc	r29, r19
	//if(number ==0 )LCD_Write_Char(0);
	
	uint8 counter = No_Digits(number);
	uint32 divisor= 1 ;
	uint8 digit ;
	for (uint8 i = 0 ; i <counter-1 ; i++ )
 2ca:	9f 5f       	subi	r25, 0xFF	; 255
 2cc:	29 2f       	mov	r18, r25
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	24 17       	cp	r18, r20
 2d2:	35 07       	cpc	r19, r21
 2d4:	7c f3       	brlt	.-34     	; 0x2b4 <LCD_Write_Number+0x24>
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <LCD_Write_Number+0x4c>
void LCD_Write_Number(uint32 number)
{
	//if(number ==0 )LCD_Write_Char(0);
	
	uint8 counter = No_Digits(number);
	uint32 divisor= 1 ;
 2d8:	c1 e0       	ldi	r28, 0x01	; 1
 2da:	d0 e0       	ldi	r29, 0x00	; 0
	uint8 digit ;
	for (uint8 i = 0 ; i <counter-1 ; i++ )
	{
		 divisor = divisor*10; //used in multiplication and arithmetic shift
	}
	while(number>0)
 2dc:	e1 14       	cp	r14, r1
 2de:	f1 04       	cpc	r15, r1
 2e0:	49 f1       	breq	.+82     	; 0x334 <LCD_Write_Number+0xa4>
	{
		digit = number/divisor ;
		LCD_Write_Digit(digit);
 2e2:	c7 01       	movw	r24, r14
 2e4:	be 01       	movw	r22, r28
 2e6:	05 d4       	rcall	.+2058   	; 0xaf2 <__udivmodhi4>
 2e8:	08 2f       	mov	r16, r24
 2ea:	19 2f       	mov	r17, r25
 2ec:	86 2f       	mov	r24, r22
 2ee:	a9 df       	rcall	.-174    	; 0x242 <LCD_Write_Digit>
		number = number % divisor;  // equivalent to number = number - digit *divisor; anythin%1 =0
 2f0:	e0 2e       	mov	r14, r16
 2f2:	f1 2e       	mov	r15, r17
		divisor = divisor /10 ;
 2f4:	9e 01       	movw	r18, r28
 2f6:	ad ec       	ldi	r26, 0xCD	; 205
 2f8:	bc ec       	ldi	r27, 0xCC	; 204
 2fa:	0f d4       	rcall	.+2078   	; 0xb1a <__umulhisi3>
 2fc:	ec 01       	movw	r28, r24
 2fe:	d6 95       	lsr	r29
 300:	c7 95       	ror	r28
 302:	d6 95       	lsr	r29
 304:	c7 95       	ror	r28
 306:	d6 95       	lsr	r29
 308:	c7 95       	ror	r28
		// the following condition is to handle 
		if(number == 0 && divisor >1)
 30a:	e1 14       	cp	r14, r1
 30c:	f1 04       	cpc	r15, r1
 30e:	49 f7       	brne	.-46     	; 0x2e2 <LCD_Write_Number+0x52>
		{
			while (divisor >= 1)
 310:	c2 30       	cpi	r28, 0x02	; 2
 312:	d1 05       	cpc	r29, r1
			{
				LCD_Write_Digit(0);
 314:	78 f0       	brcs	.+30     	; 0x334 <LCD_Write_Number+0xa4>
 316:	80 e0       	ldi	r24, 0x00	; 0
				number = number % divisor; 
				divisor = divisor /10 ;
 318:	94 df       	rcall	.-216    	; 0x242 <LCD_Write_Digit>
 31a:	9e 01       	movw	r18, r28
 31c:	ad ec       	ldi	r26, 0xCD	; 205
 31e:	bc ec       	ldi	r27, 0xCC	; 204
 320:	fc d3       	rcall	.+2040   	; 0xb1a <__umulhisi3>
 322:	ec 01       	movw	r28, r24
 324:	d6 95       	lsr	r29
 326:	c7 95       	ror	r28
 328:	d6 95       	lsr	r29
 32a:	c7 95       	ror	r28
 32c:	d6 95       	lsr	r29
 32e:	c7 95       	ror	r28
		number = number % divisor;  // equivalent to number = number - digit *divisor; anythin%1 =0
		divisor = divisor /10 ;
		// the following condition is to handle 
		if(number == 0 && divisor >1)
		{
			while (divisor >= 1)
 330:	20 97       	sbiw	r28, 0x00	; 0
 332:	89 f7       	brne	.-30     	; 0x316 <LCD_Write_Number+0x86>
				divisor = divisor /10 ;
			}

		}
	}
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	08 95       	ret

00000342 <Sensor_Read>:
	//Strain-gage // load-Cell 
};


float Sensor_Read(ADC_Channels Index) 
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
	#if(ADC_MODE == ADC_MODE_SINGLE_CONVERSION )
	ADC_Start_Conversion(Sensors[Index].Channel);
 346:	21 e1       	ldi	r18, 0x11	; 17
 348:	82 9f       	mul	r24, r18
 34a:	c0 01       	movw	r24, r0
 34c:	11 24       	eor	r1, r1
 34e:	ec 01       	movw	r28, r24
 350:	ca 59       	subi	r28, 0x9A	; 154
 352:	df 4f       	sbci	r29, 0xFF	; 255
 354:	88 81       	ld	r24, Y
 356:	2b d0       	rcall	.+86     	; 0x3ae <ADC_Start_Conversion>
	#endif
	float VADC = ADC_GetResult();  // get Sensor O/P Voltage
 358:	34 d0       	rcall	.+104    	; 0x3c2 <ADC_GetResult>
 35a:	bc 01       	movw	r22, r24
	float Resistance = (VADC * Sensors[Index].Resistance_Sensitivity) + Sensors[Index].Resistance_Bias; //get resistance if required
	float Result = (Resistance * Sensors[Index].Temperature_Sensitivity) + Sensors[Index].Temperature_Bias; // get Physical Reading

	return  Result ;
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	d7 d2       	rcall	.+1454   	; 0x910 <__floatunsisf>
 362:	29 81       	ldd	r18, Y+1	; 0x01
 364:	3a 81       	ldd	r19, Y+2	; 0x02
 366:	4b 81       	ldd	r20, Y+3	; 0x03
 368:	5c 81       	ldd	r21, Y+4	; 0x04
 36a:	60 d3       	rcall	.+1728   	; 0xa2c <__mulsf3>
 36c:	2d 81       	ldd	r18, Y+5	; 0x05
 36e:	3e 81       	ldd	r19, Y+6	; 0x06
 370:	4f 81       	ldd	r20, Y+7	; 0x07
 372:	58 85       	ldd	r21, Y+8	; 0x08
 374:	3d d2       	rcall	.+1146   	; 0x7f0 <__addsf3>
 376:	29 85       	ldd	r18, Y+9	; 0x09
 378:	3a 85       	ldd	r19, Y+10	; 0x0a
 37a:	4b 85       	ldd	r20, Y+11	; 0x0b
 37c:	5c 85       	ldd	r21, Y+12	; 0x0c
 37e:	56 d3       	rcall	.+1708   	; 0xa2c <__mulsf3>
 380:	2d 85       	ldd	r18, Y+13	; 0x0d
 382:	3e 85       	ldd	r19, Y+14	; 0x0e
 384:	4f 85       	ldd	r20, Y+15	; 0x0f
 386:	58 89       	ldd	r21, Y+16	; 0x10
 388:	33 d2       	rcall	.+1126   	; 0x7f0 <__addsf3>
 38a:	df 91       	pop	r29
	
}
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <ADC_Init>:
void ADC_Init (void)
{
	

	//Reference Voltage Config - AREF
	ADMUX_REG &= ADC_VOLTAGE_REF_CLEAR_MASK;
 390:	87 b1       	in	r24, 0x07	; 7
 392:	8f 73       	andi	r24, 0x3F	; 63
 394:	87 b9       	out	0x07, r24	; 7
	ADMUX_REG |= ADC_VOLTAGE_REF;
 396:	3e 9a       	sbi	0x07, 6	; 7

	//Prescalar Division Factor
	ADCSRA_REG &= PRESCALER_CLR_MASK;
 398:	86 b1       	in	r24, 0x06	; 6
 39a:	88 7f       	andi	r24, 0xF8	; 248
 39c:	86 b9       	out	0x06, r24	; 6
	ADCSRA_REG |= PRESCALAR_FACTOR;
 39e:	86 b1       	in	r24, 0x06	; 6
 3a0:	87 60       	ori	r24, 0x07	; 7
 3a2:	86 b9       	out	0x06, r24	; 6

	//Mode Selection. Note : We used #if macro because the bit manipulation meant for 1 bit only, otherwise we
	//use nomral bit masking.
	#if   (ADC_MODE == ADC_MODE_SINGLE_CONVERSION)
	CLR_BIT(ADCSRA_REG,ADATE_BIT);
 3a4:	35 98       	cbi	0x06, 5	; 6
	//ADC Interrupt Selection. Note: Interrupt Flag gets cleared by writing digital logic 1 and vice versa
	#if   (ADC_Interrupt == TRUE)
	CLR_BIT(ADCSRA_REG,ADIE_BIT);
	CLR_BIT(ADCSRA_REG,ADIF_BIT);
	#elif (ADC_Interrupt == FALSE)
	SET_BIT(ADCSRA_REG,ADIE_BIT);
 3a6:	33 9a       	sbi	0x06, 3	; 6
	SET_BIT(ADCSRA_REG,ADIF_BIT);
 3a8:	34 9a       	sbi	0x06, 4	; 6
	#endif
	//Enable ADC
	SET_BIT(ADCSRA_REG,ADEN_BIT);
 3aa:	37 9a       	sbi	0x06, 7	; 6
 3ac:	08 95       	ret

000003ae <ADC_Start_Conversion>:

void ADC_Start_Conversion (ADC_Channels Channel)
{

	//ADC Channel Selection
	ADMUX_REG &= ADC_CHANNEL_CLEAR_MASK;
 3ae:	97 b1       	in	r25, 0x07	; 7
 3b0:	90 7e       	andi	r25, 0xE0	; 224
 3b2:	97 b9       	out	0x07, r25	; 7
	ADMUX_REG |= Channel;
 3b4:	97 b1       	in	r25, 0x07	; 7
 3b6:	89 2b       	or	r24, r25
 3b8:	87 b9       	out	0x07, r24	; 7
 
	//ADC Start Conversion
	SET_BIT(ADCSRA_REG,ADSC_BIT);
 3ba:	36 9a       	sbi	0x06, 6	; 6
	while(GET_BIT(ADCSRA_REG,ADSC_BIT) == 1 ) ;
 3bc:	36 99       	sbic	0x06, 6	; 6
 3be:	fe cf       	rjmp	.-4      	; 0x3bc <ADC_Start_Conversion+0xe>
	
}
 3c0:	08 95       	ret

000003c2 <ADC_GetResult>:
 *
 * @return uint16 The ADC conversion result in voltage representation
 */
uint16 ADC_GetResult(void)
{
	float Result = ADCLH_REG * ADC_VOLT_RESOLUTION_FACTOR;
 3c2:	64 b1       	in	r22, 0x04	; 4
 3c4:	75 b1       	in	r23, 0x05	; 5
	return (uint16) Result;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	a2 d2       	rcall	.+1348   	; 0x910 <__floatunsisf>
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	40 ea       	ldi	r20, 0xA0	; 160
 3d2:	50 e4       	ldi	r21, 0x40	; 64
 3d4:	2b d3       	rcall	.+1622   	; 0xa2c <__mulsf3>
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	40 e8       	ldi	r20, 0x80	; 128
 3dc:	5a e3       	ldi	r21, 0x3A	; 58
 3de:	26 d3       	rcall	.+1612   	; 0xa2c <__mulsf3>
 3e0:	6b d2       	rcall	.+1238   	; 0x8b8 <__fixunssfsi>

 3e2:	cb 01       	movw	r24, r22
 3e4:	08 95       	ret

000003e6 <Set_Channel_Direction>:
	uint8 value = Read_Port(Port_ID);
	if(Significance == HIGH)	value =  (value & 0xF0) >> 4 ; 
	else if (Significance == LOW) value = (value &0x0F) ;
	
	return value ;
}
 3e6:	98 2f       	mov	r25, r24
 3e8:	97 70       	andi	r25, 0x07	; 7
 3ea:	86 95       	lsr	r24
 3ec:	86 95       	lsr	r24
 3ee:	86 95       	lsr	r24
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	09 f4       	brne	.+2      	; 0x3f6 <Set_Channel_Direction+0x10>
 3f4:	40 c0       	rjmp	.+128    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 3f6:	38 f0       	brcs	.+14     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3f8:	82 30       	cpi	r24, 0x02	; 2
 3fa:	09 f4       	brne	.+2      	; 0x3fe <Set_Channel_Direction+0x18>
 3fc:	74 c0       	rjmp	.+232    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 3fe:	83 30       	cpi	r24, 0x03	; 3
 400:	09 f4       	brne	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 402:	a9 c0       	rjmp	.+338    	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 404:	08 95       	ret
 406:	61 11       	cpse	r22, r1
 408:	12 c0       	rjmp	.+36     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 40a:	4a b3       	in	r20, 0x1a	; 26
 40c:	21 e0       	ldi	r18, 0x01	; 1
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	b9 01       	movw	r22, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	9a 95       	dec	r25
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	cb 01       	movw	r24, r22
 41e:	80 95       	com	r24
 420:	94 2f       	mov	r25, r20
 422:	98 23       	and	r25, r24
 424:	9a bb       	out	0x1a, r25	; 26
 426:	9b b3       	in	r25, 0x1b	; 27
 428:	89 23       	and	r24, r25
 42a:	8b bb       	out	0x1b, r24	; 27
 42c:	08 95       	ret
 42e:	62 30       	cpi	r22, 0x02	; 2
 430:	91 f4       	brne	.+36     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 432:	4a b3       	in	r20, 0x1a	; 26
 434:	21 e0       	ldi	r18, 0x01	; 1
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	b9 01       	movw	r22, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	66 0f       	add	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	9a 95       	dec	r25
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	cb 01       	movw	r24, r22
 446:	96 2f       	mov	r25, r22
 448:	90 95       	com	r25
 44a:	94 23       	and	r25, r20
 44c:	9a bb       	out	0x1a, r25	; 26
 44e:	9b b3       	in	r25, 0x1b	; 27
 450:	89 2b       	or	r24, r25
 452:	8b bb       	out	0x1b, r24	; 27
 454:	08 95       	ret
 456:	61 30       	cpi	r22, 0x01	; 1
 458:	09 f0       	breq	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 45a:	b3 c0       	rjmp	.+358    	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
 45c:	4a b3       	in	r20, 0x1a	; 26
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	b9 01       	movw	r22, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	66 0f       	add	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	9a 95       	dec	r25
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	cb 01       	movw	r24, r22
 470:	84 2b       	or	r24, r20
 472:	8a bb       	out	0x1a, r24	; 26
 474:	08 95       	ret
 476:	61 11       	cpse	r22, r1
 478:	12 c0       	rjmp	.+36     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 47a:	47 b3       	in	r20, 0x17	; 23
 47c:	21 e0       	ldi	r18, 0x01	; 1
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	b9 01       	movw	r22, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 484:	66 0f       	add	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	9a 95       	dec	r25
 48a:	e2 f7       	brpl	.-8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 48c:	cb 01       	movw	r24, r22
 48e:	80 95       	com	r24
 490:	94 2f       	mov	r25, r20
 492:	98 23       	and	r25, r24
 494:	97 bb       	out	0x17, r25	; 23
 496:	98 b3       	in	r25, 0x18	; 24
 498:	89 23       	and	r24, r25
 49a:	88 bb       	out	0x18, r24	; 24
 49c:	08 95       	ret
 49e:	62 30       	cpi	r22, 0x02	; 2
 4a0:	91 f4       	brne	.+36     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4a2:	47 b3       	in	r20, 0x17	; 23
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	b9 01       	movw	r22, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	9a 95       	dec	r25
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4b4:	cb 01       	movw	r24, r22
 4b6:	96 2f       	mov	r25, r22
 4b8:	90 95       	com	r25
 4ba:	94 23       	and	r25, r20
 4bc:	97 bb       	out	0x17, r25	; 23
 4be:	98 b3       	in	r25, 0x18	; 24
 4c0:	89 2b       	or	r24, r25
 4c2:	88 bb       	out	0x18, r24	; 24
 4c4:	08 95       	ret
 4c6:	61 30       	cpi	r22, 0x01	; 1
 4c8:	09 f0       	breq	.+2      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4ca:	7b c0       	rjmp	.+246    	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
 4cc:	47 b3       	in	r20, 0x17	; 23
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	9a 95       	dec	r25
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4de:	cb 01       	movw	r24, r22
 4e0:	84 2b       	or	r24, r20
 4e2:	87 bb       	out	0x17, r24	; 23
 4e4:	08 95       	ret
 4e6:	61 11       	cpse	r22, r1
 4e8:	12 c0       	rjmp	.+36     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 4ea:	44 b3       	in	r20, 0x14	; 20
 4ec:	21 e0       	ldi	r18, 0x01	; 1
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	b9 01       	movw	r22, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4f4:	66 0f       	add	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	9a 95       	dec	r25
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4fc:	cb 01       	movw	r24, r22
 4fe:	80 95       	com	r24
 500:	94 2f       	mov	r25, r20
 502:	98 23       	and	r25, r24
 504:	94 bb       	out	0x14, r25	; 20
 506:	95 b3       	in	r25, 0x15	; 21
 508:	89 23       	and	r24, r25
 50a:	85 bb       	out	0x15, r24	; 21
 50c:	08 95       	ret
 50e:	62 30       	cpi	r22, 0x02	; 2
 510:	91 f4       	brne	.+36     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 512:	44 b3       	in	r20, 0x14	; 20
 514:	21 e0       	ldi	r18, 0x01	; 1
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	b9 01       	movw	r22, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 51c:	66 0f       	add	r22, r22
 51e:	77 1f       	adc	r23, r23
 520:	9a 95       	dec	r25
 522:	e2 f7       	brpl	.-8      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 524:	cb 01       	movw	r24, r22
 526:	96 2f       	mov	r25, r22
 528:	90 95       	com	r25
 52a:	94 23       	and	r25, r20
 52c:	94 bb       	out	0x14, r25	; 20
 52e:	95 b3       	in	r25, 0x15	; 21
 530:	89 2b       	or	r24, r25
 532:	85 bb       	out	0x15, r24	; 21
 534:	08 95       	ret
 536:	61 30       	cpi	r22, 0x01	; 1
 538:	09 f0       	breq	.+2      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 53a:	43 c0       	rjmp	.+134    	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
 53c:	44 b3       	in	r20, 0x14	; 20
 53e:	21 e0       	ldi	r18, 0x01	; 1
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	b9 01       	movw	r22, r18
 544:	02 c0       	rjmp	.+4      	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	9a 95       	dec	r25
 54c:	e2 f7       	brpl	.-8      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 54e:	cb 01       	movw	r24, r22
 550:	84 2b       	or	r24, r20
 552:	84 bb       	out	0x14, r24	; 20
 554:	08 95       	ret
 556:	61 11       	cpse	r22, r1
 558:	12 c0       	rjmp	.+36     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
 55a:	41 b3       	in	r20, 0x11	; 17
 55c:	21 e0       	ldi	r18, 0x01	; 1
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	b9 01       	movw	r22, r18
 562:	02 c0       	rjmp	.+4      	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 564:	66 0f       	add	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	9a 95       	dec	r25
 56a:	e2 f7       	brpl	.-8      	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
 56c:	cb 01       	movw	r24, r22
 56e:	80 95       	com	r24
 570:	94 2f       	mov	r25, r20
 572:	98 23       	and	r25, r24
 574:	91 bb       	out	0x11, r25	; 17
 576:	92 b3       	in	r25, 0x12	; 18
 578:	89 23       	and	r24, r25
 57a:	82 bb       	out	0x12, r24	; 18
 57c:	08 95       	ret
 57e:	62 30       	cpi	r22, 0x02	; 2
 580:	91 f4       	brne	.+36     	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 582:	41 b3       	in	r20, 0x11	; 17
 584:	21 e0       	ldi	r18, 0x01	; 1
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	b9 01       	movw	r22, r18
 58a:	02 c0       	rjmp	.+4      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 58c:	66 0f       	add	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	9a 95       	dec	r25
 592:	e2 f7       	brpl	.-8      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
 594:	cb 01       	movw	r24, r22
 596:	96 2f       	mov	r25, r22
 598:	90 95       	com	r25
 59a:	94 23       	and	r25, r20
 59c:	91 bb       	out	0x11, r25	; 17
 59e:	92 b3       	in	r25, 0x12	; 18
 5a0:	89 2b       	or	r24, r25
 5a2:	82 bb       	out	0x12, r24	; 18
 5a4:	08 95       	ret
 5a6:	61 30       	cpi	r22, 0x01	; 1
 5a8:	61 f4       	brne	.+24     	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
 5aa:	41 b3       	in	r20, 0x11	; 17
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	b9 01       	movw	r22, r18
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	9a 95       	dec	r25
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 5bc:	cb 01       	movw	r24, r22
 5be:	84 2b       	or	r24, r20
 5c0:	81 bb       	out	0x11, r24	; 17
 5c2:	08 95       	ret

000005c4 <Write_Channel>:
 5c4:	98 2f       	mov	r25, r24
 5c6:	97 70       	andi	r25, 0x07	; 7
 5c8:	86 95       	lsr	r24
 5ca:	86 95       	lsr	r24
 5cc:	86 95       	lsr	r24
 5ce:	81 30       	cpi	r24, 0x01	; 1
 5d0:	41 f1       	breq	.+80     	; 0x622 <Write_Channel+0x5e>
 5d2:	38 f0       	brcs	.+14     	; 0x5e2 <Write_Channel+0x1e>
 5d4:	82 30       	cpi	r24, 0x02	; 2
 5d6:	09 f4       	brne	.+2      	; 0x5da <Write_Channel+0x16>
 5d8:	44 c0       	rjmp	.+136    	; 0x662 <Write_Channel+0x9e>
 5da:	83 30       	cpi	r24, 0x03	; 3
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <Write_Channel+0x1c>
 5de:	60 c0       	rjmp	.+192    	; 0x6a0 <Write_Channel+0xdc>
 5e0:	08 95       	ret
 5e2:	61 11       	cpse	r22, r1
 5e4:	0e c0       	rjmp	.+28     	; 0x602 <Write_Channel+0x3e>
 5e6:	4b b3       	in	r20, 0x1b	; 27
 5e8:	21 e0       	ldi	r18, 0x01	; 1
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	b9 01       	movw	r22, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <Write_Channel+0x30>
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	9a 95       	dec	r25
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <Write_Channel+0x2c>
 5f8:	cb 01       	movw	r24, r22
 5fa:	80 95       	com	r24
 5fc:	84 23       	and	r24, r20
 5fe:	8b bb       	out	0x1b, r24	; 27
 600:	08 95       	ret
 602:	61 30       	cpi	r22, 0x01	; 1
 604:	09 f0       	breq	.+2      	; 0x608 <Write_Channel+0x44>
 606:	6a c0       	rjmp	.+212    	; 0x6dc <Write_Channel+0x118>
 608:	4b b3       	in	r20, 0x1b	; 27
 60a:	21 e0       	ldi	r18, 0x01	; 1
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	b9 01       	movw	r22, r18
 610:	02 c0       	rjmp	.+4      	; 0x616 <Write_Channel+0x52>
 612:	66 0f       	add	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	9a 95       	dec	r25
 618:	e2 f7       	brpl	.-8      	; 0x612 <Write_Channel+0x4e>
 61a:	cb 01       	movw	r24, r22
 61c:	84 2b       	or	r24, r20
 61e:	8b bb       	out	0x1b, r24	; 27
 620:	08 95       	ret
 622:	61 11       	cpse	r22, r1
 624:	0e c0       	rjmp	.+28     	; 0x642 <Write_Channel+0x7e>
 626:	48 b3       	in	r20, 0x18	; 24
 628:	21 e0       	ldi	r18, 0x01	; 1
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	b9 01       	movw	r22, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <Write_Channel+0x70>
 630:	66 0f       	add	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	9a 95       	dec	r25
 636:	e2 f7       	brpl	.-8      	; 0x630 <Write_Channel+0x6c>
 638:	cb 01       	movw	r24, r22
 63a:	80 95       	com	r24
 63c:	84 23       	and	r24, r20
 63e:	88 bb       	out	0x18, r24	; 24
 640:	08 95       	ret
 642:	61 30       	cpi	r22, 0x01	; 1
 644:	09 f0       	breq	.+2      	; 0x648 <Write_Channel+0x84>
 646:	4a c0       	rjmp	.+148    	; 0x6dc <Write_Channel+0x118>
 648:	48 b3       	in	r20, 0x18	; 24
 64a:	21 e0       	ldi	r18, 0x01	; 1
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	b9 01       	movw	r22, r18
 650:	02 c0       	rjmp	.+4      	; 0x656 <Write_Channel+0x92>
 652:	66 0f       	add	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	9a 95       	dec	r25
 658:	e2 f7       	brpl	.-8      	; 0x652 <Write_Channel+0x8e>
 65a:	cb 01       	movw	r24, r22
 65c:	84 2b       	or	r24, r20
 65e:	88 bb       	out	0x18, r24	; 24
 660:	08 95       	ret
 662:	61 11       	cpse	r22, r1
 664:	0e c0       	rjmp	.+28     	; 0x682 <Write_Channel+0xbe>
 666:	45 b3       	in	r20, 0x15	; 21
 668:	21 e0       	ldi	r18, 0x01	; 1
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	b9 01       	movw	r22, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <Write_Channel+0xb0>
 670:	66 0f       	add	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	9a 95       	dec	r25
 676:	e2 f7       	brpl	.-8      	; 0x670 <Write_Channel+0xac>
 678:	cb 01       	movw	r24, r22
 67a:	80 95       	com	r24
 67c:	84 23       	and	r24, r20
 67e:	85 bb       	out	0x15, r24	; 21
 680:	08 95       	ret
 682:	61 30       	cpi	r22, 0x01	; 1
 684:	59 f5       	brne	.+86     	; 0x6dc <Write_Channel+0x118>
 686:	45 b3       	in	r20, 0x15	; 21
 688:	21 e0       	ldi	r18, 0x01	; 1
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	b9 01       	movw	r22, r18
 68e:	02 c0       	rjmp	.+4      	; 0x694 <Write_Channel+0xd0>
 690:	66 0f       	add	r22, r22
 692:	77 1f       	adc	r23, r23
 694:	9a 95       	dec	r25
 696:	e2 f7       	brpl	.-8      	; 0x690 <Write_Channel+0xcc>
 698:	cb 01       	movw	r24, r22
 69a:	84 2b       	or	r24, r20
 69c:	85 bb       	out	0x15, r24	; 21
 69e:	08 95       	ret
 6a0:	61 11       	cpse	r22, r1
 6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <Write_Channel+0xfc>
 6a4:	42 b3       	in	r20, 0x12	; 18
 6a6:	21 e0       	ldi	r18, 0x01	; 1
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	b9 01       	movw	r22, r18
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <Write_Channel+0xee>
 6ae:	66 0f       	add	r22, r22
 6b0:	77 1f       	adc	r23, r23
 6b2:	9a 95       	dec	r25
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <Write_Channel+0xea>
 6b6:	cb 01       	movw	r24, r22
 6b8:	80 95       	com	r24
 6ba:	84 23       	and	r24, r20
 6bc:	82 bb       	out	0x12, r24	; 18
 6be:	08 95       	ret
 6c0:	61 30       	cpi	r22, 0x01	; 1
 6c2:	61 f4       	brne	.+24     	; 0x6dc <Write_Channel+0x118>
 6c4:	42 b3       	in	r20, 0x12	; 18
 6c6:	21 e0       	ldi	r18, 0x01	; 1
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	b9 01       	movw	r22, r18
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <Write_Channel+0x10e>
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	9a 95       	dec	r25
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <Write_Channel+0x10a>
 6d6:	cb 01       	movw	r24, r22
 6d8:	84 2b       	or	r24, r20
 6da:	82 bb       	out	0x12, r24	; 18
 6dc:	08 95       	ret

000006de <Write_Port>:
 6de:	81 30       	cpi	r24, 0x01	; 1
 6e0:	41 f0       	breq	.+16     	; 0x6f2 <Write_Port+0x14>
 6e2:	28 f0       	brcs	.+10     	; 0x6ee <Write_Port+0x10>
 6e4:	82 30       	cpi	r24, 0x02	; 2
 6e6:	39 f0       	breq	.+14     	; 0x6f6 <Write_Port+0x18>
 6e8:	83 30       	cpi	r24, 0x03	; 3
 6ea:	39 f0       	breq	.+14     	; 0x6fa <Write_Port+0x1c>
 6ec:	08 95       	ret
 6ee:	6b bb       	out	0x1b, r22	; 27
 6f0:	08 95       	ret
 6f2:	68 bb       	out	0x18, r22	; 24
 6f4:	08 95       	ret
 6f6:	65 bb       	out	0x15, r22	; 21
 6f8:	08 95       	ret
 6fa:	62 bb       	out	0x12, r22	; 18
 6fc:	08 95       	ret

000006fe <Read_Port>:
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	41 f0       	breq	.+16     	; 0x712 <Read_Port+0x14>
 702:	28 f0       	brcs	.+10     	; 0x70e <Read_Port+0x10>
 704:	82 30       	cpi	r24, 0x02	; 2
 706:	39 f0       	breq	.+14     	; 0x716 <Read_Port+0x18>
 708:	83 30       	cpi	r24, 0x03	; 3
 70a:	39 f0       	breq	.+14     	; 0x71a <Read_Port+0x1c>
 70c:	07 c0       	rjmp	.+14     	; 0x71c <Read_Port+0x1e>
 70e:	99 b3       	in	r25, 0x19	; 25
 710:	05 c0       	rjmp	.+10     	; 0x71c <Read_Port+0x1e>
 712:	96 b3       	in	r25, 0x16	; 22
 714:	03 c0       	rjmp	.+6      	; 0x71c <Read_Port+0x1e>
 716:	93 b3       	in	r25, 0x13	; 19
 718:	01 c0       	rjmp	.+2      	; 0x71c <Read_Port+0x1e>
 71a:	90 b3       	in	r25, 0x10	; 16
 71c:	89 2f       	mov	r24, r25
 71e:	08 95       	ret

00000720 <Set_Nibble_Direction>:
 720:	81 30       	cpi	r24, 0x01	; 1
 722:	c1 f0       	breq	.+48     	; 0x754 <Set_Nibble_Direction+0x34>
 724:	28 f0       	brcs	.+10     	; 0x730 <Set_Nibble_Direction+0x10>
 726:	82 30       	cpi	r24, 0x02	; 2
 728:	39 f1       	breq	.+78     	; 0x778 <Set_Nibble_Direction+0x58>
 72a:	83 30       	cpi	r24, 0x03	; 3
 72c:	b9 f1       	breq	.+110    	; 0x79c <Set_Nibble_Direction+0x7c>
 72e:	08 95       	ret
 730:	61 30       	cpi	r22, 0x01	; 1
 732:	49 f4       	brne	.+18     	; 0x746 <Set_Nibble_Direction+0x26>
 734:	8a b3       	in	r24, 0x1a	; 26
 736:	8f 70       	andi	r24, 0x0F	; 15
 738:	90 e1       	ldi	r25, 0x10	; 16
 73a:	49 9f       	mul	r20, r25
 73c:	a0 01       	movw	r20, r0
 73e:	11 24       	eor	r1, r1
 740:	48 2b       	or	r20, r24
 742:	4a bb       	out	0x1a, r20	; 26
 744:	08 95       	ret
 746:	61 11       	cpse	r22, r1
 748:	3a c0       	rjmp	.+116    	; 0x7be <Set_Nibble_Direction+0x9e>
 74a:	8a b3       	in	r24, 0x1a	; 26
 74c:	80 7f       	andi	r24, 0xF0	; 240
 74e:	48 2b       	or	r20, r24
 750:	4a bb       	out	0x1a, r20	; 26
 752:	08 95       	ret
 754:	61 30       	cpi	r22, 0x01	; 1
 756:	49 f4       	brne	.+18     	; 0x76a <Set_Nibble_Direction+0x4a>
 758:	87 b3       	in	r24, 0x17	; 23
 75a:	8f 70       	andi	r24, 0x0F	; 15
 75c:	90 e1       	ldi	r25, 0x10	; 16
 75e:	49 9f       	mul	r20, r25
 760:	a0 01       	movw	r20, r0
 762:	11 24       	eor	r1, r1
 764:	48 2b       	or	r20, r24
 766:	47 bb       	out	0x17, r20	; 23
 768:	08 95       	ret
 76a:	61 11       	cpse	r22, r1
 76c:	28 c0       	rjmp	.+80     	; 0x7be <Set_Nibble_Direction+0x9e>
 76e:	87 b3       	in	r24, 0x17	; 23
 770:	80 7f       	andi	r24, 0xF0	; 240
 772:	48 2b       	or	r20, r24
 774:	47 bb       	out	0x17, r20	; 23
 776:	08 95       	ret
 778:	61 30       	cpi	r22, 0x01	; 1
 77a:	49 f4       	brne	.+18     	; 0x78e <Set_Nibble_Direction+0x6e>
 77c:	84 b3       	in	r24, 0x14	; 20
 77e:	8f 70       	andi	r24, 0x0F	; 15
 780:	90 e1       	ldi	r25, 0x10	; 16
 782:	49 9f       	mul	r20, r25
 784:	a0 01       	movw	r20, r0
 786:	11 24       	eor	r1, r1
 788:	48 2b       	or	r20, r24
 78a:	44 bb       	out	0x14, r20	; 20
 78c:	08 95       	ret
 78e:	61 11       	cpse	r22, r1
 790:	16 c0       	rjmp	.+44     	; 0x7be <Set_Nibble_Direction+0x9e>
 792:	84 b3       	in	r24, 0x14	; 20
 794:	80 7f       	andi	r24, 0xF0	; 240
 796:	48 2b       	or	r20, r24
 798:	44 bb       	out	0x14, r20	; 20
 79a:	08 95       	ret
 79c:	61 30       	cpi	r22, 0x01	; 1
 79e:	49 f4       	brne	.+18     	; 0x7b2 <Set_Nibble_Direction+0x92>
 7a0:	81 b3       	in	r24, 0x11	; 17
 7a2:	8f 70       	andi	r24, 0x0F	; 15
 7a4:	90 e1       	ldi	r25, 0x10	; 16
 7a6:	49 9f       	mul	r20, r25
 7a8:	a0 01       	movw	r20, r0
 7aa:	11 24       	eor	r1, r1
 7ac:	48 2b       	or	r20, r24
 7ae:	41 bb       	out	0x11, r20	; 17
 7b0:	08 95       	ret
 7b2:	61 11       	cpse	r22, r1
 7b4:	04 c0       	rjmp	.+8      	; 0x7be <Set_Nibble_Direction+0x9e>
 7b6:	81 b3       	in	r24, 0x11	; 17
 7b8:	80 7f       	andi	r24, 0xF0	; 240
 7ba:	48 2b       	or	r20, r24
 7bc:	41 bb       	out	0x11, r20	; 17
 7be:	08 95       	ret

000007c0 <Write_Nibble>:

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
 7c0:	cf 93       	push	r28
 7c2:	df 93       	push	r29
 7c4:	d8 2f       	mov	r29, r24
 7c6:	c4 2f       	mov	r28, r20
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 7c8:	61 30       	cpi	r22, 0x01	; 1
 7ca:	41 f4       	brne	.+16     	; 0x7dc <Write_Nibble+0x1c>
}
			
uint8 Read_Nibble(DIO_Port Port_ID , uint8 Significance)
{
	
	uint8 value = Read_Port(Port_ID);
 7cc:	98 df       	rcall	.-208    	; 0x6fe <Read_Port>
	return value ;
}

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 7ce:	8f 70       	andi	r24, 0x0F	; 15
 7d0:	90 e1       	ldi	r25, 0x10	; 16
 7d2:	c9 9f       	mul	r28, r25
 7d4:	b0 01       	movw	r22, r0
 7d6:	11 24       	eor	r1, r1
 7d8:	68 2b       	or	r22, r24
}
			
uint8 Read_Nibble(DIO_Port Port_ID , uint8 Significance)
{
	
	uint8 value = Read_Port(Port_ID);
 7da:	04 c0       	rjmp	.+8      	; 0x7e4 <Write_Nibble+0x24>
 7dc:	90 df       	rcall	.-224    	; 0x6fe <Read_Port>
	return value ;
}

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 7de:	80 7f       	andi	r24, 0xF0	; 240
 7e0:	68 2f       	mov	r22, r24
	Write_Port(Port_ID,Value);
 7e2:	6c 2b       	or	r22, r28
 7e4:	8d 2f       	mov	r24, r29
 7e6:	7b df       	rcall	.-266    	; 0x6de <Write_Port>
 7e8:	df 91       	pop	r29
 7ea:	cf 91       	pop	r28
 7ec:	08 95       	ret

000007ee <__subsf3>:
 7ee:	50 58       	subi	r21, 0x80	; 128

000007f0 <__addsf3>:
 7f0:	bb 27       	eor	r27, r27
 7f2:	aa 27       	eor	r26, r26
 7f4:	0e d0       	rcall	.+28     	; 0x812 <__addsf3x>
 7f6:	e0 c0       	rjmp	.+448    	; 0x9b8 <__fp_round>
 7f8:	d1 d0       	rcall	.+418    	; 0x99c <__fp_pscA>
 7fa:	30 f0       	brcs	.+12     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fc:	d6 d0       	rcall	.+428    	; 0x9aa <__fp_pscB>
 7fe:	20 f0       	brcs	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 800:	31 f4       	brne	.+12     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 802:	9f 3f       	cpi	r25, 0xFF	; 255
 804:	11 f4       	brne	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 806:	1e f4       	brtc	.+6      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 808:	c6 c0       	rjmp	.+396    	; 0x996 <__fp_nan>
 80a:	0e f4       	brtc	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80c:	e0 95       	com	r30
 80e:	e7 fb       	bst	r30, 7
 810:	bc c0       	rjmp	.+376    	; 0x98a <__fp_inf>

00000812 <__addsf3x>:
 812:	e9 2f       	mov	r30, r25
 814:	e2 d0       	rcall	.+452    	; 0x9da <__fp_split3>
 816:	80 f3       	brcs	.-32     	; 0x7f8 <__addsf3+0x8>
 818:	ba 17       	cp	r27, r26
 81a:	62 07       	cpc	r22, r18
 81c:	73 07       	cpc	r23, r19
 81e:	84 07       	cpc	r24, r20
 820:	95 07       	cpc	r25, r21
 822:	18 f0       	brcs	.+6      	; 0x82a <__addsf3x+0x18>
 824:	71 f4       	brne	.+28     	; 0x842 <__addsf3x+0x30>
 826:	9e f5       	brtc	.+102    	; 0x88e <__stack+0x2f>
 828:	fa c0       	rjmp	.+500    	; 0xa1e <__fp_zero>
 82a:	0e f4       	brtc	.+2      	; 0x82e <__addsf3x+0x1c>
 82c:	e0 95       	com	r30
 82e:	0b 2e       	mov	r0, r27
 830:	ba 2f       	mov	r27, r26
 832:	a0 2d       	mov	r26, r0
 834:	0b 01       	movw	r0, r22
 836:	b9 01       	movw	r22, r18
 838:	90 01       	movw	r18, r0
 83a:	0c 01       	movw	r0, r24
 83c:	ca 01       	movw	r24, r20
 83e:	a0 01       	movw	r20, r0
 840:	11 24       	eor	r1, r1
 842:	ff 27       	eor	r31, r31
 844:	59 1b       	sub	r21, r25
 846:	99 f0       	breq	.+38     	; 0x86e <__stack+0xf>
 848:	59 3f       	cpi	r21, 0xF9	; 249
 84a:	50 f4       	brcc	.+20     	; 0x860 <__stack+0x1>
 84c:	50 3e       	cpi	r21, 0xE0	; 224
 84e:	68 f1       	brcs	.+90     	; 0x8aa <__stack+0x4b>
 850:	1a 16       	cp	r1, r26
 852:	f0 40       	sbci	r31, 0x00	; 0
 854:	a2 2f       	mov	r26, r18
 856:	23 2f       	mov	r18, r19
 858:	34 2f       	mov	r19, r20
 85a:	44 27       	eor	r20, r20
 85c:	58 5f       	subi	r21, 0xF8	; 248
 85e:	f3 cf       	rjmp	.-26     	; 0x846 <__addsf3x+0x34>
 860:	46 95       	lsr	r20
 862:	37 95       	ror	r19
 864:	27 95       	ror	r18
 866:	a7 95       	ror	r26
 868:	f0 40       	sbci	r31, 0x00	; 0
 86a:	53 95       	inc	r21
 86c:	c9 f7       	brne	.-14     	; 0x860 <__stack+0x1>
 86e:	7e f4       	brtc	.+30     	; 0x88e <__stack+0x2f>
 870:	1f 16       	cp	r1, r31
 872:	ba 0b       	sbc	r27, r26
 874:	62 0b       	sbc	r22, r18
 876:	73 0b       	sbc	r23, r19
 878:	84 0b       	sbc	r24, r20
 87a:	ba f0       	brmi	.+46     	; 0x8aa <__stack+0x4b>
 87c:	91 50       	subi	r25, 0x01	; 1
 87e:	a1 f0       	breq	.+40     	; 0x8a8 <__stack+0x49>
 880:	ff 0f       	add	r31, r31
 882:	bb 1f       	adc	r27, r27
 884:	66 1f       	adc	r22, r22
 886:	77 1f       	adc	r23, r23
 888:	88 1f       	adc	r24, r24
 88a:	c2 f7       	brpl	.-16     	; 0x87c <__stack+0x1d>
 88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
 88e:	ba 0f       	add	r27, r26
 890:	62 1f       	adc	r22, r18
 892:	73 1f       	adc	r23, r19
 894:	84 1f       	adc	r24, r20
 896:	48 f4       	brcc	.+18     	; 0x8aa <__stack+0x4b>
 898:	87 95       	ror	r24
 89a:	77 95       	ror	r23
 89c:	67 95       	ror	r22
 89e:	b7 95       	ror	r27
 8a0:	f7 95       	ror	r31
 8a2:	9e 3f       	cpi	r25, 0xFE	; 254
 8a4:	08 f0       	brcs	.+2      	; 0x8a8 <__stack+0x49>
 8a6:	b3 cf       	rjmp	.-154    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 8a8:	93 95       	inc	r25
 8aa:	88 0f       	add	r24, r24
 8ac:	08 f0       	brcs	.+2      	; 0x8b0 <__stack+0x51>
 8ae:	99 27       	eor	r25, r25
 8b0:	ee 0f       	add	r30, r30
 8b2:	97 95       	ror	r25
 8b4:	87 95       	ror	r24
 8b6:	08 95       	ret

000008b8 <__fixunssfsi>:
 8b8:	98 d0       	rcall	.+304    	; 0x9ea <__fp_splitA>
 8ba:	88 f0       	brcs	.+34     	; 0x8de <__fixunssfsi+0x26>
 8bc:	9f 57       	subi	r25, 0x7F	; 127
 8be:	90 f0       	brcs	.+36     	; 0x8e4 <__fixunssfsi+0x2c>
 8c0:	b9 2f       	mov	r27, r25
 8c2:	99 27       	eor	r25, r25
 8c4:	b7 51       	subi	r27, 0x17	; 23
 8c6:	a0 f0       	brcs	.+40     	; 0x8f0 <__fixunssfsi+0x38>
 8c8:	d1 f0       	breq	.+52     	; 0x8fe <__fixunssfsi+0x46>
 8ca:	66 0f       	add	r22, r22
 8cc:	77 1f       	adc	r23, r23
 8ce:	88 1f       	adc	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	1a f0       	brmi	.+6      	; 0x8da <__fixunssfsi+0x22>
 8d4:	ba 95       	dec	r27
 8d6:	c9 f7       	brne	.-14     	; 0x8ca <__fixunssfsi+0x12>
 8d8:	12 c0       	rjmp	.+36     	; 0x8fe <__fixunssfsi+0x46>
 8da:	b1 30       	cpi	r27, 0x01	; 1
 8dc:	81 f0       	breq	.+32     	; 0x8fe <__fixunssfsi+0x46>
 8de:	9f d0       	rcall	.+318    	; 0xa1e <__fp_zero>
 8e0:	b1 e0       	ldi	r27, 0x01	; 1
 8e2:	08 95       	ret
 8e4:	9c c0       	rjmp	.+312    	; 0xa1e <__fp_zero>
 8e6:	67 2f       	mov	r22, r23
 8e8:	78 2f       	mov	r23, r24
 8ea:	88 27       	eor	r24, r24
 8ec:	b8 5f       	subi	r27, 0xF8	; 248
 8ee:	39 f0       	breq	.+14     	; 0x8fe <__fixunssfsi+0x46>
 8f0:	b9 3f       	cpi	r27, 0xF9	; 249
 8f2:	cc f3       	brlt	.-14     	; 0x8e6 <__fixunssfsi+0x2e>
 8f4:	86 95       	lsr	r24
 8f6:	77 95       	ror	r23
 8f8:	67 95       	ror	r22
 8fa:	b3 95       	inc	r27
 8fc:	d9 f7       	brne	.-10     	; 0x8f4 <__fixunssfsi+0x3c>
 8fe:	3e f4       	brtc	.+14     	; 0x90e <__fixunssfsi+0x56>
 900:	90 95       	com	r25
 902:	80 95       	com	r24
 904:	70 95       	com	r23
 906:	61 95       	neg	r22
 908:	7f 4f       	sbci	r23, 0xFF	; 255
 90a:	8f 4f       	sbci	r24, 0xFF	; 255
 90c:	9f 4f       	sbci	r25, 0xFF	; 255
 90e:	08 95       	ret

00000910 <__floatunsisf>:
 910:	e8 94       	clt
 912:	09 c0       	rjmp	.+18     	; 0x926 <__floatsisf+0x12>

00000914 <__floatsisf>:
 914:	97 fb       	bst	r25, 7
 916:	3e f4       	brtc	.+14     	; 0x926 <__floatsisf+0x12>
 918:	90 95       	com	r25
 91a:	80 95       	com	r24
 91c:	70 95       	com	r23
 91e:	61 95       	neg	r22
 920:	7f 4f       	sbci	r23, 0xFF	; 255
 922:	8f 4f       	sbci	r24, 0xFF	; 255
 924:	9f 4f       	sbci	r25, 0xFF	; 255
 926:	99 23       	and	r25, r25
 928:	a9 f0       	breq	.+42     	; 0x954 <__floatsisf+0x40>
 92a:	f9 2f       	mov	r31, r25
 92c:	96 e9       	ldi	r25, 0x96	; 150
 92e:	bb 27       	eor	r27, r27
 930:	93 95       	inc	r25
 932:	f6 95       	lsr	r31
 934:	87 95       	ror	r24
 936:	77 95       	ror	r23
 938:	67 95       	ror	r22
 93a:	b7 95       	ror	r27
 93c:	f1 11       	cpse	r31, r1
 93e:	f8 cf       	rjmp	.-16     	; 0x930 <__floatsisf+0x1c>
 940:	fa f4       	brpl	.+62     	; 0x980 <__floatsisf+0x6c>
 942:	bb 0f       	add	r27, r27
 944:	11 f4       	brne	.+4      	; 0x94a <__floatsisf+0x36>
 946:	60 ff       	sbrs	r22, 0
 948:	1b c0       	rjmp	.+54     	; 0x980 <__floatsisf+0x6c>
 94a:	6f 5f       	subi	r22, 0xFF	; 255
 94c:	7f 4f       	sbci	r23, 0xFF	; 255
 94e:	8f 4f       	sbci	r24, 0xFF	; 255
 950:	9f 4f       	sbci	r25, 0xFF	; 255
 952:	16 c0       	rjmp	.+44     	; 0x980 <__floatsisf+0x6c>
 954:	88 23       	and	r24, r24
 956:	11 f0       	breq	.+4      	; 0x95c <__floatsisf+0x48>
 958:	96 e9       	ldi	r25, 0x96	; 150
 95a:	11 c0       	rjmp	.+34     	; 0x97e <__floatsisf+0x6a>
 95c:	77 23       	and	r23, r23
 95e:	21 f0       	breq	.+8      	; 0x968 <__floatsisf+0x54>
 960:	9e e8       	ldi	r25, 0x8E	; 142
 962:	87 2f       	mov	r24, r23
 964:	76 2f       	mov	r23, r22
 966:	05 c0       	rjmp	.+10     	; 0x972 <__floatsisf+0x5e>
 968:	66 23       	and	r22, r22
 96a:	71 f0       	breq	.+28     	; 0x988 <__floatsisf+0x74>
 96c:	96 e8       	ldi	r25, 0x86	; 134
 96e:	86 2f       	mov	r24, r22
 970:	70 e0       	ldi	r23, 0x00	; 0
 972:	60 e0       	ldi	r22, 0x00	; 0
 974:	2a f0       	brmi	.+10     	; 0x980 <__floatsisf+0x6c>
 976:	9a 95       	dec	r25
 978:	66 0f       	add	r22, r22
 97a:	77 1f       	adc	r23, r23
 97c:	88 1f       	adc	r24, r24
 97e:	da f7       	brpl	.-10     	; 0x976 <__floatsisf+0x62>
 980:	88 0f       	add	r24, r24
 982:	96 95       	lsr	r25
 984:	87 95       	ror	r24
 986:	97 f9       	bld	r25, 7
 988:	08 95       	ret

0000098a <__fp_inf>:
 98a:	97 f9       	bld	r25, 7
 98c:	9f 67       	ori	r25, 0x7F	; 127
 98e:	80 e8       	ldi	r24, 0x80	; 128
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	08 95       	ret

00000996 <__fp_nan>:
 996:	9f ef       	ldi	r25, 0xFF	; 255
 998:	80 ec       	ldi	r24, 0xC0	; 192
 99a:	08 95       	ret

0000099c <__fp_pscA>:
 99c:	00 24       	eor	r0, r0
 99e:	0a 94       	dec	r0
 9a0:	16 16       	cp	r1, r22
 9a2:	17 06       	cpc	r1, r23
 9a4:	18 06       	cpc	r1, r24
 9a6:	09 06       	cpc	r0, r25
 9a8:	08 95       	ret

000009aa <__fp_pscB>:
 9aa:	00 24       	eor	r0, r0
 9ac:	0a 94       	dec	r0
 9ae:	12 16       	cp	r1, r18
 9b0:	13 06       	cpc	r1, r19
 9b2:	14 06       	cpc	r1, r20
 9b4:	05 06       	cpc	r0, r21
 9b6:	08 95       	ret

000009b8 <__fp_round>:
 9b8:	09 2e       	mov	r0, r25
 9ba:	03 94       	inc	r0
 9bc:	00 0c       	add	r0, r0
 9be:	11 f4       	brne	.+4      	; 0x9c4 <__fp_round+0xc>
 9c0:	88 23       	and	r24, r24
 9c2:	52 f0       	brmi	.+20     	; 0x9d8 <__fp_round+0x20>
 9c4:	bb 0f       	add	r27, r27
 9c6:	40 f4       	brcc	.+16     	; 0x9d8 <__fp_round+0x20>
 9c8:	bf 2b       	or	r27, r31
 9ca:	11 f4       	brne	.+4      	; 0x9d0 <__fp_round+0x18>
 9cc:	60 ff       	sbrs	r22, 0
 9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__fp_round+0x20>
 9d0:	6f 5f       	subi	r22, 0xFF	; 255
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	08 95       	ret

000009da <__fp_split3>:
 9da:	57 fd       	sbrc	r21, 7
 9dc:	90 58       	subi	r25, 0x80	; 128
 9de:	44 0f       	add	r20, r20
 9e0:	55 1f       	adc	r21, r21
 9e2:	59 f0       	breq	.+22     	; 0x9fa <__fp_splitA+0x10>
 9e4:	5f 3f       	cpi	r21, 0xFF	; 255
 9e6:	71 f0       	breq	.+28     	; 0xa04 <__fp_splitA+0x1a>
 9e8:	47 95       	ror	r20

000009ea <__fp_splitA>:
 9ea:	88 0f       	add	r24, r24
 9ec:	97 fb       	bst	r25, 7
 9ee:	99 1f       	adc	r25, r25
 9f0:	61 f0       	breq	.+24     	; 0xa0a <__fp_splitA+0x20>
 9f2:	9f 3f       	cpi	r25, 0xFF	; 255
 9f4:	79 f0       	breq	.+30     	; 0xa14 <__fp_splitA+0x2a>
 9f6:	87 95       	ror	r24
 9f8:	08 95       	ret
 9fa:	12 16       	cp	r1, r18
 9fc:	13 06       	cpc	r1, r19
 9fe:	14 06       	cpc	r1, r20
 a00:	55 1f       	adc	r21, r21
 a02:	f2 cf       	rjmp	.-28     	; 0x9e8 <__fp_split3+0xe>
 a04:	46 95       	lsr	r20
 a06:	f1 df       	rcall	.-30     	; 0x9ea <__fp_splitA>
 a08:	08 c0       	rjmp	.+16     	; 0xa1a <__fp_splitA+0x30>
 a0a:	16 16       	cp	r1, r22
 a0c:	17 06       	cpc	r1, r23
 a0e:	18 06       	cpc	r1, r24
 a10:	99 1f       	adc	r25, r25
 a12:	f1 cf       	rjmp	.-30     	; 0x9f6 <__fp_splitA+0xc>
 a14:	86 95       	lsr	r24
 a16:	71 05       	cpc	r23, r1
 a18:	61 05       	cpc	r22, r1
 a1a:	08 94       	sec
 a1c:	08 95       	ret

00000a1e <__fp_zero>:
 a1e:	e8 94       	clt

00000a20 <__fp_szero>:
 a20:	bb 27       	eor	r27, r27
 a22:	66 27       	eor	r22, r22
 a24:	77 27       	eor	r23, r23
 a26:	cb 01       	movw	r24, r22
 a28:	97 f9       	bld	r25, 7
 a2a:	08 95       	ret

00000a2c <__mulsf3>:
 a2c:	0b d0       	rcall	.+22     	; 0xa44 <__mulsf3x>
 a2e:	c4 cf       	rjmp	.-120    	; 0x9b8 <__fp_round>
 a30:	b5 df       	rcall	.-150    	; 0x99c <__fp_pscA>
 a32:	28 f0       	brcs	.+10     	; 0xa3e <__mulsf3+0x12>
 a34:	ba df       	rcall	.-140    	; 0x9aa <__fp_pscB>
 a36:	18 f0       	brcs	.+6      	; 0xa3e <__mulsf3+0x12>
 a38:	95 23       	and	r25, r21
 a3a:	09 f0       	breq	.+2      	; 0xa3e <__mulsf3+0x12>
 a3c:	a6 cf       	rjmp	.-180    	; 0x98a <__fp_inf>
 a3e:	ab cf       	rjmp	.-170    	; 0x996 <__fp_nan>
 a40:	11 24       	eor	r1, r1
 a42:	ee cf       	rjmp	.-36     	; 0xa20 <__fp_szero>

00000a44 <__mulsf3x>:
 a44:	ca df       	rcall	.-108    	; 0x9da <__fp_split3>
 a46:	a0 f3       	brcs	.-24     	; 0xa30 <__mulsf3+0x4>

00000a48 <__mulsf3_pse>:
 a48:	95 9f       	mul	r25, r21
 a4a:	d1 f3       	breq	.-12     	; 0xa40 <__mulsf3+0x14>
 a4c:	95 0f       	add	r25, r21
 a4e:	50 e0       	ldi	r21, 0x00	; 0
 a50:	55 1f       	adc	r21, r21
 a52:	62 9f       	mul	r22, r18
 a54:	f0 01       	movw	r30, r0
 a56:	72 9f       	mul	r23, r18
 a58:	bb 27       	eor	r27, r27
 a5a:	f0 0d       	add	r31, r0
 a5c:	b1 1d       	adc	r27, r1
 a5e:	63 9f       	mul	r22, r19
 a60:	aa 27       	eor	r26, r26
 a62:	f0 0d       	add	r31, r0
 a64:	b1 1d       	adc	r27, r1
 a66:	aa 1f       	adc	r26, r26
 a68:	64 9f       	mul	r22, r20
 a6a:	66 27       	eor	r22, r22
 a6c:	b0 0d       	add	r27, r0
 a6e:	a1 1d       	adc	r26, r1
 a70:	66 1f       	adc	r22, r22
 a72:	82 9f       	mul	r24, r18
 a74:	22 27       	eor	r18, r18
 a76:	b0 0d       	add	r27, r0
 a78:	a1 1d       	adc	r26, r1
 a7a:	62 1f       	adc	r22, r18
 a7c:	73 9f       	mul	r23, r19
 a7e:	b0 0d       	add	r27, r0
 a80:	a1 1d       	adc	r26, r1
 a82:	62 1f       	adc	r22, r18
 a84:	83 9f       	mul	r24, r19
 a86:	a0 0d       	add	r26, r0
 a88:	61 1d       	adc	r22, r1
 a8a:	22 1f       	adc	r18, r18
 a8c:	74 9f       	mul	r23, r20
 a8e:	33 27       	eor	r19, r19
 a90:	a0 0d       	add	r26, r0
 a92:	61 1d       	adc	r22, r1
 a94:	23 1f       	adc	r18, r19
 a96:	84 9f       	mul	r24, r20
 a98:	60 0d       	add	r22, r0
 a9a:	21 1d       	adc	r18, r1
 a9c:	82 2f       	mov	r24, r18
 a9e:	76 2f       	mov	r23, r22
 aa0:	6a 2f       	mov	r22, r26
 aa2:	11 24       	eor	r1, r1
 aa4:	9f 57       	subi	r25, 0x7F	; 127
 aa6:	50 40       	sbci	r21, 0x00	; 0
 aa8:	8a f0       	brmi	.+34     	; 0xacc <__mulsf3_pse+0x84>
 aaa:	e1 f0       	breq	.+56     	; 0xae4 <__mulsf3_pse+0x9c>
 aac:	88 23       	and	r24, r24
 aae:	4a f0       	brmi	.+18     	; 0xac2 <__mulsf3_pse+0x7a>
 ab0:	ee 0f       	add	r30, r30
 ab2:	ff 1f       	adc	r31, r31
 ab4:	bb 1f       	adc	r27, r27
 ab6:	66 1f       	adc	r22, r22
 ab8:	77 1f       	adc	r23, r23
 aba:	88 1f       	adc	r24, r24
 abc:	91 50       	subi	r25, 0x01	; 1
 abe:	50 40       	sbci	r21, 0x00	; 0
 ac0:	a9 f7       	brne	.-22     	; 0xaac <__mulsf3_pse+0x64>
 ac2:	9e 3f       	cpi	r25, 0xFE	; 254
 ac4:	51 05       	cpc	r21, r1
 ac6:	70 f0       	brcs	.+28     	; 0xae4 <__mulsf3_pse+0x9c>
 ac8:	60 cf       	rjmp	.-320    	; 0x98a <__fp_inf>
 aca:	aa cf       	rjmp	.-172    	; 0xa20 <__fp_szero>
 acc:	5f 3f       	cpi	r21, 0xFF	; 255
 ace:	ec f3       	brlt	.-6      	; 0xaca <__mulsf3_pse+0x82>
 ad0:	98 3e       	cpi	r25, 0xE8	; 232
 ad2:	dc f3       	brlt	.-10     	; 0xaca <__mulsf3_pse+0x82>
 ad4:	86 95       	lsr	r24
 ad6:	77 95       	ror	r23
 ad8:	67 95       	ror	r22
 ada:	b7 95       	ror	r27
 adc:	f7 95       	ror	r31
 ade:	e7 95       	ror	r30
 ae0:	9f 5f       	subi	r25, 0xFF	; 255
 ae2:	c1 f7       	brne	.-16     	; 0xad4 <__mulsf3_pse+0x8c>
 ae4:	fe 2b       	or	r31, r30
 ae6:	88 0f       	add	r24, r24
 ae8:	91 1d       	adc	r25, r1
 aea:	96 95       	lsr	r25
 aec:	87 95       	ror	r24
 aee:	97 f9       	bld	r25, 7
 af0:	08 95       	ret

00000af2 <__udivmodhi4>:
 af2:	aa 1b       	sub	r26, r26
 af4:	bb 1b       	sub	r27, r27
 af6:	51 e1       	ldi	r21, 0x11	; 17
 af8:	07 c0       	rjmp	.+14     	; 0xb08 <__udivmodhi4_ep>

00000afa <__udivmodhi4_loop>:
 afa:	aa 1f       	adc	r26, r26
 afc:	bb 1f       	adc	r27, r27
 afe:	a6 17       	cp	r26, r22
 b00:	b7 07       	cpc	r27, r23
 b02:	10 f0       	brcs	.+4      	; 0xb08 <__udivmodhi4_ep>
 b04:	a6 1b       	sub	r26, r22
 b06:	b7 0b       	sbc	r27, r23

00000b08 <__udivmodhi4_ep>:
 b08:	88 1f       	adc	r24, r24
 b0a:	99 1f       	adc	r25, r25
 b0c:	5a 95       	dec	r21
 b0e:	a9 f7       	brne	.-22     	; 0xafa <__udivmodhi4_loop>
 b10:	80 95       	com	r24
 b12:	90 95       	com	r25
 b14:	bc 01       	movw	r22, r24
 b16:	cd 01       	movw	r24, r26
 b18:	08 95       	ret

00000b1a <__umulhisi3>:
 b1a:	a2 9f       	mul	r26, r18
 b1c:	b0 01       	movw	r22, r0
 b1e:	b3 9f       	mul	r27, r19
 b20:	c0 01       	movw	r24, r0
 b22:	a3 9f       	mul	r26, r19
 b24:	70 0d       	add	r23, r0
 b26:	81 1d       	adc	r24, r1
 b28:	11 24       	eor	r1, r1
 b2a:	91 1d       	adc	r25, r1
 b2c:	b2 9f       	mul	r27, r18
 b2e:	70 0d       	add	r23, r0
 b30:	81 1d       	adc	r24, r1
 b32:	11 24       	eor	r1, r1
 b34:	91 1d       	adc	r25, r1
 b36:	08 95       	ret

00000b38 <_exit>:
 b38:	f8 94       	cli

00000b3a <__stop_program>:
 b3a:	ff cf       	rjmp	.-2      	; 0xb3a <__stop_program>

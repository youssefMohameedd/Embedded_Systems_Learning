
Project_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000b40  00000bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800082  00800082  00000bf6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020cf  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e24  00000000  00000000  00002f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a6b  00000000  00000000  00003d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  000057cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007505  00000000  00000000  00005ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ac5  00000000  00000000  0000d1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000ec6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000294c  00000000  00000000  0000edf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	9e c3       	rjmp	.+1852   	; 0x742 <__vector_1>
   6:	00 00       	nop
   8:	c5 c3       	rjmp	.+1930   	; 0x794 <__vector_2>
   a:	00 00       	nop
   c:	ec c3       	rjmp	.+2008   	; 0x7e6 <__vector_3>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c1       	rjmp	.+678    	; 0x2e8 <__vector_16>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 38       	cpi	r26, 0x8F	; 143
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0d d0       	rcall	.+26     	; 0xa2 <main>
  88:	59 c5       	rjmp	.+2738   	; 0xb3c <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <ADC_ISR>:
static float value = 0 ;

void ADC_ISR(void)
{
	
	value = Sensor_Read(NTC);
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	93 d0       	rcall	.+294    	; 0x1b6 <Sensor_Read>
  90:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <__data_end>
  94:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <__data_end+0x1>
  98:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end+0x2>
  9c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x3>
  a0:	08 95       	ret

000000a2 <main>:
}

int main(void)
{
	//Preferably initialize the ADC before the LCD to ensure delay for stabilazaiton
	ADC_Init(NTC);
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	f3 d0       	rcall	.+486    	; 0x28c <ADC_Init>
	ADC_Set_Callback(ADC_ISR);
  a6:	86 e4       	ldi	r24, 0x46	; 70
  a8:	90 e0       	ldi	r25, 0x00	; 0
	
	LCD_Init();
  aa:	19 d1       	rcall	.+562    	; 0x2de <ADC_Set_Callback>
  ac:	4b d0       	rcall	.+150    	; 0x144 <LCD_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f e3       	ldi	r24, 0x3F	; 63
  b0:	9c e9       	ldi	r25, 0x9C	; 156
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x10>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x16>
  b8:	00 00       	nop
	_delay_ms(10);	

	while(1)
	{
	
		SSD_Write_Two_Digits(value);
  ba:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <__data_end>
  be:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <__data_end+0x1>
  c2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end+0x2>
  c6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x3>
  ca:	1b d4       	rcall	.+2102   	; 0x902 <__fixunssfsi>
  cc:	86 2f       	mov	r24, r22
  ce:	bb d0       	rcall	.+374    	; 0x246 <SSD_Write_Two_Digits>
  d0:	f4 cf       	rjmp	.-24     	; 0xba <main+0x18>

000000d2 <LCD_Latch>:

static uint8 AC = 0; // Address Counter initialization 
static uint8 Init_Flag = 0;

void LCD_Latch(void) {
	Write_Channel(LCD_E, HIGH);
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	8b e0       	ldi	r24, 0x0B	; 11
  d6:	20 d2       	rcall	.+1088   	; 0x518 <Write_Channel>
  d8:	89 ef       	ldi	r24, 0xF9	; 249
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_Latch+0xa>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_Latch+0x10>
  e2:	00 00       	nop
	_delay_ms(1); 
	Write_Channel(LCD_E, LOW);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	8b e0       	ldi	r24, 0x0B	; 11
  e8:	17 d2       	rcall	.+1070   	; 0x518 <Write_Channel>
  ea:	89 ef       	ldi	r24, 0xF9	; 249
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Latch+0x1c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_Latch+0x22>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <LCD_Write_Cmd>:
	_delay_ms(1);
}
// Logic : __HigherNibble__|‾‾Latch‾‾|__LowerNibble__|‾‾Latch‾‾|__
void LCD_Write_Cmd(uint8 cmd) {
  f8:	cf 93       	push	r28
  fa:	c8 2f       	mov	r28, r24
	
	Write_Channel(LCD_RS, LOW);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	89 e0       	ldi	r24, 0x09	; 9
 100:	0b d2       	rcall	.+1046   	; 0x518 <Write_Channel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_Write_Cmd+0xc>
	_delay_us(2);
	
	#if(INIT_MODE==0)
	if(Init_Flag == 1)
 104:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <Init_Flag>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	39 f4       	brne	.+14     	; 0x11a <LCD_Write_Cmd+0x22>
	{	
	Write_Nibble(LCD_PORT, LCD_SIG, cmd >> 4); // Send higher nibble
 10c:	4c 2f       	mov	r20, r28
 10e:	42 95       	swap	r20
 110:	4f 70       	andi	r20, 0x0F	; 15
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 116:	fe d2       	rcall	.+1532   	; 0x714 <Write_Nibble>
 118:	dc df       	rcall	.-72     	; 0xd2 <LCD_Latch>
	}
	Write_Nibble(LCD_PORT, LCD_SIG, cmd & 0x0F); // Send lower nibble
 11a:	4c 2f       	mov	r20, r28
 11c:	4f 70       	andi	r20, 0x0F	; 15
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 122:	f8 d2       	rcall	.+1520   	; 0x714 <Write_Nibble>
 124:	d6 df       	rcall	.-84     	; 0xd2 <LCD_Latch>
 126:	80 e1       	ldi	r24, 0x10	; 16
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_Write_Cmd+0x30>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_Write_Cmd+0x36>
	Write_Port(LCD_PORT,cmd);
	LCD_Latch();
	
	#endif
	_delay_us(50);
	if(cmd == 0x01 || cmd == 0x02 ) _delay_ms(2);
 12e:	c1 50       	subi	r28, 0x01	; 1
 130:	c2 30       	cpi	r28, 0x02	; 2
 132:	30 f4       	brcc	.+12     	; 0x140 <LCD_Write_Cmd+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	83 ef       	ldi	r24, 0xF3	; 243
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_Write_Cmd+0x40>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_Write_Cmd+0x46>
 13e:	00 00       	nop
}
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <LCD_Init>:

void LCD_Init(void) 
{	
	Set_Channel_Direction(LCD_E, OUTPUT);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	8b e0       	ldi	r24, 0x0B	; 11
 148:	f8 d0       	rcall	.+496    	; 0x33a <Set_Channel_Direction>
	Set_Channel_Direction(LCD_RS, OUTPUT);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	89 e0       	ldi	r24, 0x09	; 9
 14e:	f5 d0       	rcall	.+490    	; 0x33a <Set_Channel_Direction>
	Set_Channel_Direction(LCD_RW, OUTPUT);
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	f2 d0       	rcall	.+484    	; 0x33a <Set_Channel_Direction>
 156:	83 ed       	ldi	r24, 0xD3	; 211
 158:	90 e3       	ldi	r25, 0x30	; 48
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Init+0x16>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Init+0x1c>
	
	_delay_ms(50); // Wait for LCD power-up
	Write_Channel(LCD_RW, LOW); // Always in write mode
 160:	00 00       	nop
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	8a e0       	ldi	r24, 0x0A	; 10

	#if(INIT_MODE==0)
	
		Set_Nibble_Direction(LCD_PORT,LCD_SIG,0xF);
 166:	d8 d1       	rcall	.+944    	; 0x518 <Write_Channel>
 168:	4f e0       	ldi	r20, 0x0F	; 15
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	80 e0       	ldi	r24, 0x00	; 0
		//Initially, we configure the LCD as an 8-bit interface until it's completely stable to convert to a 4 bit-interface(Kinda Formalities) 
		LCD_Write_Cmd(EIGHT_BIT_MODE);	_delay_ms(5); 
 16e:	82 d2       	rcall	.+1284   	; 0x674 <Set_Nibble_Direction>
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	c2 df       	rcall	.-124    	; 0xf8 <LCD_Write_Cmd>
 174:	81 ee       	ldi	r24, 0xE1	; 225
 176:	94 e0       	ldi	r25, 0x04	; 4
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Init+0x34>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Init+0x3a>
		LCD_Write_Cmd(EIGHT_BIT_MODE);	_delay_us(150);
 17e:	00 00       	nop
 180:	83 e0       	ldi	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	ba df       	rcall	.-140    	; 0xf8 <LCD_Write_Cmd>
 184:	92 e3       	ldi	r25, 0x32	; 50
 186:	9a 95       	dec	r25
		LCD_Write_Cmd(EIGHT_BIT_MODE);
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Init+0x42>
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	b5 df       	rcall	.-150    	; 0xf8 <LCD_Write_Cmd>
		LCD_Write_Cmd(FOUR_BIT_MODE);	_delay_ms(1);  // Ensure LCD properly latches 4-bit modeSome LCDs need a brief delay before fully transitioning
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	b3 df       	rcall	.-154    	; 0xf8 <LCD_Write_Cmd>
 192:	89 ef       	ldi	r24, 0xF9	; 249
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Init+0x52>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Init+0x58>
		Init_Flag = 1;
 19c:	00 00       	nop
 19e:	81 e0       	ldi	r24, 0x01	; 1
		LCD_Write_Cmd(FUNCTION_SET);
 1a0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <Init_Flag>
 1a4:	88 e2       	ldi	r24, 0x28	; 40
		LCD_Write_Cmd(DISPLAY_CONTROL);
 1a6:	a8 df       	rcall	.-176    	; 0xf8 <LCD_Write_Cmd>
 1a8:	8f e0       	ldi	r24, 0x0F	; 15
 1aa:	a6 df       	rcall	.-180    	; 0xf8 <LCD_Write_Cmd>
		LCD_Write_Cmd(DISPLAY_CLEAR); 
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	a4 df       	rcall	.-184    	; 0xf8 <LCD_Write_Cmd>
 1b0:	86 e0       	ldi	r24, 0x06	; 6
		LCD_Write_Cmd(ENTRY_MODE_SET); //optional
 1b2:	a2 cf       	rjmp	.-188    	; 0xf8 <LCD_Write_Cmd>
 1b4:	08 95       	ret

000001b6 <Sensor_Read>:
	//Strain-gage // load-Cell 
};


float Sensor_Read(ADC_Channels Index) 
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	c8 2f       	mov	r28, r24
	#if(ADC_MODE == ADC_MODE_SINGLE_CONVERSION )
	ADC_Start_Conversion(Sensors[Index].Channel);
	#endif
	float VADC = ADC_GetResult();  // get Sensor O/P Voltage
 1bc:	80 d0       	rcall	.+256    	; 0x2be <ADC_GetResult>
	float Resistance = (VADC * Sensors[Index].Resistance_Sensitivity) + Sensors[Index].Resistance_Bias; //get resistance if required
 1be:	21 e1       	ldi	r18, 0x11	; 17
 1c0:	c2 9f       	mul	r28, r18
 1c2:	e0 01       	movw	r28, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	c0 5a       	subi	r28, 0xA0	; 160
 1c8:	df 4f       	sbci	r29, 0xFF	; 255
	float Result = (Resistance * Sensors[Index].Temperature_Sensitivity) + Sensors[Index].Temperature_Bias; // get Physical Reading

	return  Result ;
 1ca:	29 81       	ldd	r18, Y+1	; 0x01
 1cc:	3a 81       	ldd	r19, Y+2	; 0x02
 1ce:	4b 81       	ldd	r20, Y+3	; 0x03
 1d0:	5c 81       	ldd	r21, Y+4	; 0x04
 1d2:	51 d4       	rcall	.+2210   	; 0xa76 <__mulsf3>
 1d4:	2d 81       	ldd	r18, Y+5	; 0x05
 1d6:	3e 81       	ldd	r19, Y+6	; 0x06
 1d8:	4f 81       	ldd	r20, Y+7	; 0x07
 1da:	58 85       	ldd	r21, Y+8	; 0x08
 1dc:	2e d3       	rcall	.+1628   	; 0x83a <__addsf3>
 1de:	29 85       	ldd	r18, Y+9	; 0x09
 1e0:	3a 85       	ldd	r19, Y+10	; 0x0a
 1e2:	4b 85       	ldd	r20, Y+11	; 0x0b
 1e4:	5c 85       	ldd	r21, Y+12	; 0x0c
 1e6:	47 d4       	rcall	.+2190   	; 0xa76 <__mulsf3>
 1e8:	2d 85       	ldd	r18, Y+13	; 0x0d
 1ea:	3e 85       	ldd	r19, Y+14	; 0x0e
 1ec:	4f 85       	ldd	r20, Y+15	; 0x0f
 1ee:	58 89       	ldd	r21, Y+16	; 0x10
 1f0:	24 d3       	rcall	.+1608   	; 0x83a <__addsf3>
	
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <SSD_Write_One_Digit>:
	Set_Nibble_Direction(SSD_PORT,SSD_SIG,0xF);  
	Write_Nibble(SSD_PORT,SSD_SIG,0x0);
	
}
void SSD_Write_One_Digit(SSD_Num SSD_Number , uint8 value)
{
 1f8:	cf 93       	push	r28
 1fa:	c8 2f       	mov	r28, r24

	if(  value >= 0 && value < 10  )
 1fc:	6a 30       	cpi	r22, 0x0A	; 10
 1fe:	28 f4       	brcc	.+10     	; 0x20a <SSD_Write_One_Digit+0x12>
	{
		Write_Nibble(SSD_PORT,SSD_SIG,value);
 200:	46 2f       	mov	r20, r22
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	86 d2       	rcall	.+1292   	; 0x714 <Write_Nibble>
 208:	04 c0       	rjmp	.+8      	; 0x212 <SSD_Write_One_Digit+0x1a>
	}
	else	Write_Nibble(SSD_PORT,SSD_SIG,0x0);
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	81 d2       	rcall	.+1282   	; 0x714 <Write_Nibble>
	
	switch(SSD_Number)
 212:	cc 23       	and	r28, r28
 214:	19 f0       	breq	.+6      	; 0x21c <SSD_Write_One_Digit+0x24>
 216:	c1 30       	cpi	r28, 0x01	; 1
 218:	41 f0       	breq	.+16     	; 0x22a <SSD_Write_One_Digit+0x32>
 21a:	0d c0       	rjmp	.+26     	; 0x236 <SSD_Write_One_Digit+0x3e>
	{
		case SSD_1:
		Write_Channel(EN1,HIGH);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	89 e0       	ldi	r24, 0x09	; 9
 220:	7b d1       	rcall	.+758    	; 0x518 <Write_Channel>
		Write_Channel(EN2,LOW);
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	8a e0       	ldi	r24, 0x0A	; 10
 226:	78 d1       	rcall	.+752    	; 0x518 <Write_Channel>
		break;
 228:	06 c0       	rjmp	.+12     	; 0x236 <SSD_Write_One_Digit+0x3e>
		case SSD_2:
		Write_Channel(EN1,LOW);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	89 e0       	ldi	r24, 0x09	; 9
 22e:	74 d1       	rcall	.+744    	; 0x518 <Write_Channel>
		Write_Channel(EN2,HIGH);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	8a e0       	ldi	r24, 0x0A	; 10
 234:	71 d1       	rcall	.+738    	; 0x518 <Write_Channel>
 236:	8f e3       	ldi	r24, 0x3F	; 63
 238:	9c e9       	ldi	r25, 0x9C	; 156
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <SSD_Write_One_Digit+0x42>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <SSD_Write_One_Digit+0x48>
 240:	00 00       	nop
 242:	cf 91       	pop	r28
		break;
	}
	
	_delay_ms(10);
	
}
 244:	08 95       	ret

00000246 <SSD_Write_Two_Digits>:
 246:	cf 93       	push	r28
void SSD_Write_Two_Digits(uint8 value)
{
	uint8 First_Digit = value % 10 ;
	uint8 Second_Digit = value / 10 ;
	
	SSD_Write_One_Digit(SSD_1,First_Digit);
 248:	cd ec       	ldi	r28, 0xCD	; 205
 24a:	8c 9f       	mul	r24, r28
 24c:	c1 2d       	mov	r28, r1
 24e:	11 24       	eor	r1, r1
 250:	c6 95       	lsr	r28
 252:	c6 95       	lsr	r28
 254:	c6 95       	lsr	r28
 256:	2c 2f       	mov	r18, r28
 258:	22 0f       	add	r18, r18
 25a:	92 2f       	mov	r25, r18
 25c:	99 0f       	add	r25, r25
 25e:	99 0f       	add	r25, r25
 260:	92 0f       	add	r25, r18
 262:	68 2f       	mov	r22, r24
 264:	69 1b       	sub	r22, r25
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	c7 df       	rcall	.-114    	; 0x1f8 <SSD_Write_One_Digit>
	SSD_Write_One_Digit(SSD_2,Second_Digit);
 26a:	6c 2f       	mov	r22, r28
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	c4 df       	rcall	.-120    	; 0x1f8 <SSD_Write_One_Digit>
	
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <GI_Enable>:

// I-Bit gets set to enable interrupts, cleared to disable

void GI_Enable(void)
{
	SET_BIT(SREG_REG,I_BIT);  // Set I-bit to enable global interrupts
 274:	8f b7       	in	r24, 0x3f	; 63
 276:	80 68       	ori	r24, 0x80	; 128
 278:	8f bf       	out	0x3f, r24	; 63
 27a:	08 95       	ret

0000027c <ADC_Start_Conversion>:
	GI_Enable();
}
void ADC_Interrupt_Disable(void)
{
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG,ADIE_BIT);
 27c:	97 b1       	in	r25, 0x07	; 7
 27e:	90 7e       	andi	r25, 0xE0	; 224
 280:	97 b9       	out	0x07, r25	; 7
 282:	97 b1       	in	r25, 0x07	; 7
 284:	89 2b       	or	r24, r25
 286:	87 b9       	out	0x07, r24	; 7
 288:	36 9a       	sbi	0x06, 6	; 6
 28a:	08 95       	ret

0000028c <ADC_Init>:
 28c:	cf 93       	push	r28
 28e:	c8 2f       	mov	r28, r24
 290:	37 9a       	sbi	0x06, 7	; 6
 292:	87 b1       	in	r24, 0x07	; 7
 294:	8f 73       	andi	r24, 0x3F	; 63
 296:	87 b9       	out	0x07, r24	; 7
 298:	3e 9a       	sbi	0x07, 6	; 7
 29a:	86 b1       	in	r24, 0x06	; 6
 29c:	88 7f       	andi	r24, 0xF8	; 248
 29e:	86 b9       	out	0x06, r24	; 6
 2a0:	86 b1       	in	r24, 0x06	; 6
 2a2:	87 60       	ori	r24, 0x07	; 7
 2a4:	86 b9       	out	0x06, r24	; 6
 2a6:	e6 df       	rcall	.-52     	; 0x274 <GI_Enable>
 2a8:	33 9a       	sbi	0x06, 3	; 6
 2aa:	35 9a       	sbi	0x06, 5	; 6
 2ac:	80 b7       	in	r24, 0x30	; 48
 2ae:	8f 71       	andi	r24, 0x1F	; 31
 2b0:	80 bf       	out	0x30, r24	; 48
 2b2:	80 b7       	in	r24, 0x30	; 48
 2b4:	80 bf       	out	0x30, r24	; 48
 2b6:	8c 2f       	mov	r24, r28
 2b8:	e1 df       	rcall	.-62     	; 0x27c <ADC_Start_Conversion>
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <ADC_GetResult>:
 2be:	64 b1       	in	r22, 0x04	; 4
 2c0:	75 b1       	in	r23, 0x05	; 5
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	49 d3       	rcall	.+1682   	; 0x95a <__floatunsisf>
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	40 ea       	ldi	r20, 0xA0	; 160
 2ce:	50 e4       	ldi	r21, 0x40	; 64
 2d0:	d2 d3       	rcall	.+1956   	; 0xa76 <__mulsf3>
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	40 e8       	ldi	r20, 0x80	; 128
 2d8:	5a e3       	ldi	r21, 0x3A	; 58
 2da:	cd c3       	rjmp	.+1946   	; 0xa76 <__mulsf3>
 2dc:	08 95       	ret

000002de <ADC_Set_Callback>:
}
void ADC_Set_Callback(PTR_FN CB_Address)
{
	ADC_PTR = CB_Address;
 2de:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <ADC_PTR+0x1>
 2e2:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <ADC_PTR>
 2e6:	08 95       	ret

000002e8 <__vector_16>:
}

void __vector_16(void) __attribute__((signal,used));
void __vector_16(void)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	2f 93       	push	r18
 2f4:	3f 93       	push	r19
 2f6:	4f 93       	push	r20
 2f8:	5f 93       	push	r21
 2fa:	6f 93       	push	r22
 2fc:	7f 93       	push	r23
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31

	if(ADC_PTR != NULL)	ADC_PTR() ;
 30a:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <ADC_PTR>
 30e:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <ADC_PTR+0x1>
 312:	30 97       	sbiw	r30, 0x00	; 0
 314:	09 f0       	breq	.+2      	; 0x318 <__vector_16+0x30>
 316:	09 95       	icall
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <Set_Channel_Direction>:
	uint8 value = Read_Port(Port_ID);
	if(Significance == HIGH)	value =  (value & 0xF0) >> 4 ; 
	else if (Significance == LOW) value = (value &0x0F) ;
	
	return value ;
}
 33a:	98 2f       	mov	r25, r24
 33c:	97 70       	andi	r25, 0x07	; 7
 33e:	86 95       	lsr	r24
 340:	86 95       	lsr	r24
 342:	86 95       	lsr	r24
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	09 f4       	brne	.+2      	; 0x34a <Set_Channel_Direction+0x10>
 348:	40 c0       	rjmp	.+128    	; 0x3ca <Set_Channel_Direction+0x90>
 34a:	38 f0       	brcs	.+14     	; 0x35a <Set_Channel_Direction+0x20>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	09 f4       	brne	.+2      	; 0x352 <Set_Channel_Direction+0x18>
 350:	74 c0       	rjmp	.+232    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 352:	83 30       	cpi	r24, 0x03	; 3
 354:	09 f4       	brne	.+2      	; 0x358 <Set_Channel_Direction+0x1e>
 356:	a9 c0       	rjmp	.+338    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 358:	08 95       	ret
 35a:	61 11       	cpse	r22, r1
 35c:	12 c0       	rjmp	.+36     	; 0x382 <Set_Channel_Direction+0x48>
 35e:	4a b3       	in	r20, 0x1a	; 26
 360:	21 e0       	ldi	r18, 0x01	; 1
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	b9 01       	movw	r22, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <Set_Channel_Direction+0x32>
 368:	66 0f       	add	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	9a 95       	dec	r25
 36e:	e2 f7       	brpl	.-8      	; 0x368 <Set_Channel_Direction+0x2e>
 370:	cb 01       	movw	r24, r22
 372:	80 95       	com	r24
 374:	94 2f       	mov	r25, r20
 376:	98 23       	and	r25, r24
 378:	9a bb       	out	0x1a, r25	; 26
 37a:	9b b3       	in	r25, 0x1b	; 27
 37c:	89 23       	and	r24, r25
 37e:	8b bb       	out	0x1b, r24	; 27
 380:	08 95       	ret
 382:	62 30       	cpi	r22, 0x02	; 2
 384:	91 f4       	brne	.+36     	; 0x3aa <Set_Channel_Direction+0x70>
 386:	4a b3       	in	r20, 0x1a	; 26
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	b9 01       	movw	r22, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <Set_Channel_Direction+0x5a>
 390:	66 0f       	add	r22, r22
 392:	77 1f       	adc	r23, r23
 394:	9a 95       	dec	r25
 396:	e2 f7       	brpl	.-8      	; 0x390 <Set_Channel_Direction+0x56>
 398:	cb 01       	movw	r24, r22
 39a:	96 2f       	mov	r25, r22
 39c:	90 95       	com	r25
 39e:	94 23       	and	r25, r20
 3a0:	9a bb       	out	0x1a, r25	; 26
 3a2:	9b b3       	in	r25, 0x1b	; 27
 3a4:	89 2b       	or	r24, r25
 3a6:	8b bb       	out	0x1b, r24	; 27
 3a8:	08 95       	ret
 3aa:	61 30       	cpi	r22, 0x01	; 1
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <Set_Channel_Direction+0x76>
 3ae:	b3 c0       	rjmp	.+358    	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 3b0:	4a b3       	in	r20, 0x1a	; 26
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	b9 01       	movw	r22, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <Set_Channel_Direction+0x84>
 3ba:	66 0f       	add	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	9a 95       	dec	r25
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <Set_Channel_Direction+0x80>
 3c2:	cb 01       	movw	r24, r22
 3c4:	84 2b       	or	r24, r20
 3c6:	8a bb       	out	0x1a, r24	; 26
 3c8:	08 95       	ret
 3ca:	61 11       	cpse	r22, r1
 3cc:	12 c0       	rjmp	.+36     	; 0x3f2 <Set_Channel_Direction+0xb8>
 3ce:	47 b3       	in	r20, 0x17	; 23
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	b9 01       	movw	r22, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <Set_Channel_Direction+0xa2>
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	9a 95       	dec	r25
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <Set_Channel_Direction+0x9e>
 3e0:	cb 01       	movw	r24, r22
 3e2:	80 95       	com	r24
 3e4:	94 2f       	mov	r25, r20
 3e6:	98 23       	and	r25, r24
 3e8:	97 bb       	out	0x17, r25	; 23
 3ea:	98 b3       	in	r25, 0x18	; 24
 3ec:	89 23       	and	r24, r25
 3ee:	88 bb       	out	0x18, r24	; 24
 3f0:	08 95       	ret
 3f2:	62 30       	cpi	r22, 0x02	; 2
 3f4:	91 f4       	brne	.+36     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3f6:	47 b3       	in	r20, 0x17	; 23
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	b9 01       	movw	r22, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	9a 95       	dec	r25
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	cb 01       	movw	r24, r22
 40a:	96 2f       	mov	r25, r22
 40c:	90 95       	com	r25
 40e:	94 23       	and	r25, r20
 410:	97 bb       	out	0x17, r25	; 23
 412:	98 b3       	in	r25, 0x18	; 24
 414:	89 2b       	or	r24, r25
 416:	88 bb       	out	0x18, r24	; 24
 418:	08 95       	ret
 41a:	61 30       	cpi	r22, 0x01	; 1
 41c:	09 f0       	breq	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41e:	7b c0       	rjmp	.+246    	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 420:	47 b3       	in	r20, 0x17	; 23
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	b9 01       	movw	r22, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	9a 95       	dec	r25
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	cb 01       	movw	r24, r22
 434:	84 2b       	or	r24, r20
 436:	87 bb       	out	0x17, r24	; 23
 438:	08 95       	ret
 43a:	61 11       	cpse	r22, r1
 43c:	12 c0       	rjmp	.+36     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 43e:	44 b3       	in	r20, 0x14	; 20
 440:	21 e0       	ldi	r18, 0x01	; 1
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	b9 01       	movw	r22, r18
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	9a 95       	dec	r25
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	cb 01       	movw	r24, r22
 452:	80 95       	com	r24
 454:	94 2f       	mov	r25, r20
 456:	98 23       	and	r25, r24
 458:	94 bb       	out	0x14, r25	; 20
 45a:	95 b3       	in	r25, 0x15	; 21
 45c:	89 23       	and	r24, r25
 45e:	85 bb       	out	0x15, r24	; 21
 460:	08 95       	ret
 462:	62 30       	cpi	r22, 0x02	; 2
 464:	91 f4       	brne	.+36     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 466:	44 b3       	in	r20, 0x14	; 20
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	b9 01       	movw	r22, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	9a 95       	dec	r25
 476:	e2 f7       	brpl	.-8      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 478:	cb 01       	movw	r24, r22
 47a:	96 2f       	mov	r25, r22
 47c:	90 95       	com	r25
 47e:	94 23       	and	r25, r20
 480:	94 bb       	out	0x14, r25	; 20
 482:	95 b3       	in	r25, 0x15	; 21
 484:	89 2b       	or	r24, r25
 486:	85 bb       	out	0x15, r24	; 21
 488:	08 95       	ret
 48a:	61 30       	cpi	r22, 0x01	; 1
 48c:	09 f0       	breq	.+2      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48e:	43 c0       	rjmp	.+134    	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 490:	44 b3       	in	r20, 0x14	; 20
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	b9 01       	movw	r22, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	9a 95       	dec	r25
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	cb 01       	movw	r24, r22
 4a4:	84 2b       	or	r24, r20
 4a6:	84 bb       	out	0x14, r24	; 20
 4a8:	08 95       	ret
 4aa:	61 11       	cpse	r22, r1
 4ac:	12 c0       	rjmp	.+36     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ae:	41 b3       	in	r20, 0x11	; 17
 4b0:	21 e0       	ldi	r18, 0x01	; 1
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	b9 01       	movw	r22, r18
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4b8:	66 0f       	add	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	9a 95       	dec	r25
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4c0:	cb 01       	movw	r24, r22
 4c2:	80 95       	com	r24
 4c4:	94 2f       	mov	r25, r20
 4c6:	98 23       	and	r25, r24
 4c8:	91 bb       	out	0x11, r25	; 17
 4ca:	92 b3       	in	r25, 0x12	; 18
 4cc:	89 23       	and	r24, r25
 4ce:	82 bb       	out	0x12, r24	; 18
 4d0:	08 95       	ret
 4d2:	62 30       	cpi	r22, 0x02	; 2
 4d4:	91 f4       	brne	.+36     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4d6:	41 b3       	in	r20, 0x11	; 17
 4d8:	21 e0       	ldi	r18, 0x01	; 1
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	b9 01       	movw	r22, r18
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e0:	66 0f       	add	r22, r22
 4e2:	77 1f       	adc	r23, r23
 4e4:	9a 95       	dec	r25
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4e8:	cb 01       	movw	r24, r22
 4ea:	96 2f       	mov	r25, r22
 4ec:	90 95       	com	r25
 4ee:	94 23       	and	r25, r20
 4f0:	91 bb       	out	0x11, r25	; 17
 4f2:	92 b3       	in	r25, 0x12	; 18
 4f4:	89 2b       	or	r24, r25
 4f6:	82 bb       	out	0x12, r24	; 18
 4f8:	08 95       	ret
 4fa:	61 30       	cpi	r22, 0x01	; 1
 4fc:	61 f4       	brne	.+24     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 4fe:	41 b3       	in	r20, 0x11	; 17
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	b9 01       	movw	r22, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	9a 95       	dec	r25
 50e:	e2 f7       	brpl	.-8      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 510:	cb 01       	movw	r24, r22
 512:	84 2b       	or	r24, r20
 514:	81 bb       	out	0x11, r24	; 17
 516:	08 95       	ret

00000518 <Write_Channel>:
 518:	98 2f       	mov	r25, r24
 51a:	97 70       	andi	r25, 0x07	; 7
 51c:	86 95       	lsr	r24
 51e:	86 95       	lsr	r24
 520:	86 95       	lsr	r24
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	41 f1       	breq	.+80     	; 0x576 <Write_Channel+0x5e>
 526:	38 f0       	brcs	.+14     	; 0x536 <Write_Channel+0x1e>
 528:	82 30       	cpi	r24, 0x02	; 2
 52a:	09 f4       	brne	.+2      	; 0x52e <Write_Channel+0x16>
 52c:	44 c0       	rjmp	.+136    	; 0x5b6 <Write_Channel+0x9e>
 52e:	83 30       	cpi	r24, 0x03	; 3
 530:	09 f4       	brne	.+2      	; 0x534 <Write_Channel+0x1c>
 532:	60 c0       	rjmp	.+192    	; 0x5f4 <Write_Channel+0xdc>
 534:	08 95       	ret
 536:	61 11       	cpse	r22, r1
 538:	0e c0       	rjmp	.+28     	; 0x556 <Write_Channel+0x3e>
 53a:	4b b3       	in	r20, 0x1b	; 27
 53c:	21 e0       	ldi	r18, 0x01	; 1
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	b9 01       	movw	r22, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <Write_Channel+0x30>
 544:	66 0f       	add	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	9a 95       	dec	r25
 54a:	e2 f7       	brpl	.-8      	; 0x544 <Write_Channel+0x2c>
 54c:	cb 01       	movw	r24, r22
 54e:	80 95       	com	r24
 550:	84 23       	and	r24, r20
 552:	8b bb       	out	0x1b, r24	; 27
 554:	08 95       	ret
 556:	61 30       	cpi	r22, 0x01	; 1
 558:	09 f0       	breq	.+2      	; 0x55c <Write_Channel+0x44>
 55a:	6a c0       	rjmp	.+212    	; 0x630 <Write_Channel+0x118>
 55c:	4b b3       	in	r20, 0x1b	; 27
 55e:	21 e0       	ldi	r18, 0x01	; 1
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	b9 01       	movw	r22, r18
 564:	02 c0       	rjmp	.+4      	; 0x56a <Write_Channel+0x52>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	9a 95       	dec	r25
 56c:	e2 f7       	brpl	.-8      	; 0x566 <Write_Channel+0x4e>
 56e:	cb 01       	movw	r24, r22
 570:	84 2b       	or	r24, r20
 572:	8b bb       	out	0x1b, r24	; 27
 574:	08 95       	ret
 576:	61 11       	cpse	r22, r1
 578:	0e c0       	rjmp	.+28     	; 0x596 <Write_Channel+0x7e>
 57a:	48 b3       	in	r20, 0x18	; 24
 57c:	21 e0       	ldi	r18, 0x01	; 1
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	b9 01       	movw	r22, r18
 582:	02 c0       	rjmp	.+4      	; 0x588 <Write_Channel+0x70>
 584:	66 0f       	add	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	9a 95       	dec	r25
 58a:	e2 f7       	brpl	.-8      	; 0x584 <Write_Channel+0x6c>
 58c:	cb 01       	movw	r24, r22
 58e:	80 95       	com	r24
 590:	84 23       	and	r24, r20
 592:	88 bb       	out	0x18, r24	; 24
 594:	08 95       	ret
 596:	61 30       	cpi	r22, 0x01	; 1
 598:	09 f0       	breq	.+2      	; 0x59c <Write_Channel+0x84>
 59a:	4a c0       	rjmp	.+148    	; 0x630 <Write_Channel+0x118>
 59c:	48 b3       	in	r20, 0x18	; 24
 59e:	21 e0       	ldi	r18, 0x01	; 1
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	b9 01       	movw	r22, r18
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <Write_Channel+0x92>
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	9a 95       	dec	r25
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <Write_Channel+0x8e>
 5ae:	cb 01       	movw	r24, r22
 5b0:	84 2b       	or	r24, r20
 5b2:	88 bb       	out	0x18, r24	; 24
 5b4:	08 95       	ret
 5b6:	61 11       	cpse	r22, r1
 5b8:	0e c0       	rjmp	.+28     	; 0x5d6 <Write_Channel+0xbe>
 5ba:	45 b3       	in	r20, 0x15	; 21
 5bc:	21 e0       	ldi	r18, 0x01	; 1
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	b9 01       	movw	r22, r18
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <Write_Channel+0xb0>
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	9a 95       	dec	r25
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <Write_Channel+0xac>
 5cc:	cb 01       	movw	r24, r22
 5ce:	80 95       	com	r24
 5d0:	84 23       	and	r24, r20
 5d2:	85 bb       	out	0x15, r24	; 21
 5d4:	08 95       	ret
 5d6:	61 30       	cpi	r22, 0x01	; 1
 5d8:	59 f5       	brne	.+86     	; 0x630 <Write_Channel+0x118>
 5da:	45 b3       	in	r20, 0x15	; 21
 5dc:	21 e0       	ldi	r18, 0x01	; 1
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	b9 01       	movw	r22, r18
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <Write_Channel+0xd0>
 5e4:	66 0f       	add	r22, r22
 5e6:	77 1f       	adc	r23, r23
 5e8:	9a 95       	dec	r25
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <Write_Channel+0xcc>
 5ec:	cb 01       	movw	r24, r22
 5ee:	84 2b       	or	r24, r20
 5f0:	85 bb       	out	0x15, r24	; 21
 5f2:	08 95       	ret
 5f4:	61 11       	cpse	r22, r1
 5f6:	0e c0       	rjmp	.+28     	; 0x614 <Write_Channel+0xfc>
 5f8:	42 b3       	in	r20, 0x12	; 18
 5fa:	21 e0       	ldi	r18, 0x01	; 1
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	b9 01       	movw	r22, r18
 600:	02 c0       	rjmp	.+4      	; 0x606 <Write_Channel+0xee>
 602:	66 0f       	add	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	9a 95       	dec	r25
 608:	e2 f7       	brpl	.-8      	; 0x602 <Write_Channel+0xea>
 60a:	cb 01       	movw	r24, r22
 60c:	80 95       	com	r24
 60e:	84 23       	and	r24, r20
 610:	82 bb       	out	0x12, r24	; 18
 612:	08 95       	ret
 614:	61 30       	cpi	r22, 0x01	; 1
 616:	61 f4       	brne	.+24     	; 0x630 <Write_Channel+0x118>
 618:	42 b3       	in	r20, 0x12	; 18
 61a:	21 e0       	ldi	r18, 0x01	; 1
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	b9 01       	movw	r22, r18
 620:	02 c0       	rjmp	.+4      	; 0x626 <Write_Channel+0x10e>
 622:	66 0f       	add	r22, r22
 624:	77 1f       	adc	r23, r23
 626:	9a 95       	dec	r25
 628:	e2 f7       	brpl	.-8      	; 0x622 <Write_Channel+0x10a>
 62a:	cb 01       	movw	r24, r22
 62c:	84 2b       	or	r24, r20
 62e:	82 bb       	out	0x12, r24	; 18
 630:	08 95       	ret

00000632 <Write_Port>:
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	41 f0       	breq	.+16     	; 0x646 <Write_Port+0x14>
 636:	28 f0       	brcs	.+10     	; 0x642 <Write_Port+0x10>
 638:	82 30       	cpi	r24, 0x02	; 2
 63a:	39 f0       	breq	.+14     	; 0x64a <Write_Port+0x18>
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	39 f0       	breq	.+14     	; 0x64e <Write_Port+0x1c>
 640:	08 95       	ret
 642:	6b bb       	out	0x1b, r22	; 27
 644:	08 95       	ret
 646:	68 bb       	out	0x18, r22	; 24
 648:	08 95       	ret
 64a:	65 bb       	out	0x15, r22	; 21
 64c:	08 95       	ret
 64e:	62 bb       	out	0x12, r22	; 18
 650:	08 95       	ret

00000652 <Read_Port>:
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	41 f0       	breq	.+16     	; 0x666 <Read_Port+0x14>
 656:	28 f0       	brcs	.+10     	; 0x662 <Read_Port+0x10>
 658:	82 30       	cpi	r24, 0x02	; 2
 65a:	39 f0       	breq	.+14     	; 0x66a <Read_Port+0x18>
 65c:	83 30       	cpi	r24, 0x03	; 3
 65e:	39 f0       	breq	.+14     	; 0x66e <Read_Port+0x1c>
 660:	07 c0       	rjmp	.+14     	; 0x670 <Read_Port+0x1e>
 662:	99 b3       	in	r25, 0x19	; 25
 664:	05 c0       	rjmp	.+10     	; 0x670 <Read_Port+0x1e>
 666:	96 b3       	in	r25, 0x16	; 22
 668:	03 c0       	rjmp	.+6      	; 0x670 <Read_Port+0x1e>
 66a:	93 b3       	in	r25, 0x13	; 19
 66c:	01 c0       	rjmp	.+2      	; 0x670 <Read_Port+0x1e>
 66e:	90 b3       	in	r25, 0x10	; 16
 670:	89 2f       	mov	r24, r25
 672:	08 95       	ret

00000674 <Set_Nibble_Direction>:
 674:	81 30       	cpi	r24, 0x01	; 1
 676:	c1 f0       	breq	.+48     	; 0x6a8 <Set_Nibble_Direction+0x34>
 678:	28 f0       	brcs	.+10     	; 0x684 <Set_Nibble_Direction+0x10>
 67a:	82 30       	cpi	r24, 0x02	; 2
 67c:	39 f1       	breq	.+78     	; 0x6cc <Set_Nibble_Direction+0x58>
 67e:	83 30       	cpi	r24, 0x03	; 3
 680:	b9 f1       	breq	.+110    	; 0x6f0 <Set_Nibble_Direction+0x7c>
 682:	08 95       	ret
 684:	61 30       	cpi	r22, 0x01	; 1
 686:	49 f4       	brne	.+18     	; 0x69a <Set_Nibble_Direction+0x26>
 688:	8a b3       	in	r24, 0x1a	; 26
 68a:	8f 70       	andi	r24, 0x0F	; 15
 68c:	90 e1       	ldi	r25, 0x10	; 16
 68e:	49 9f       	mul	r20, r25
 690:	a0 01       	movw	r20, r0
 692:	11 24       	eor	r1, r1
 694:	48 2b       	or	r20, r24
 696:	4a bb       	out	0x1a, r20	; 26
 698:	08 95       	ret
 69a:	61 11       	cpse	r22, r1
 69c:	3a c0       	rjmp	.+116    	; 0x712 <Set_Nibble_Direction+0x9e>
 69e:	8a b3       	in	r24, 0x1a	; 26
 6a0:	80 7f       	andi	r24, 0xF0	; 240
 6a2:	48 2b       	or	r20, r24
 6a4:	4a bb       	out	0x1a, r20	; 26
 6a6:	08 95       	ret
 6a8:	61 30       	cpi	r22, 0x01	; 1
 6aa:	49 f4       	brne	.+18     	; 0x6be <Set_Nibble_Direction+0x4a>
 6ac:	87 b3       	in	r24, 0x17	; 23
 6ae:	8f 70       	andi	r24, 0x0F	; 15
 6b0:	90 e1       	ldi	r25, 0x10	; 16
 6b2:	49 9f       	mul	r20, r25
 6b4:	a0 01       	movw	r20, r0
 6b6:	11 24       	eor	r1, r1
 6b8:	48 2b       	or	r20, r24
 6ba:	47 bb       	out	0x17, r20	; 23
 6bc:	08 95       	ret
 6be:	61 11       	cpse	r22, r1
 6c0:	28 c0       	rjmp	.+80     	; 0x712 <Set_Nibble_Direction+0x9e>
 6c2:	87 b3       	in	r24, 0x17	; 23
 6c4:	80 7f       	andi	r24, 0xF0	; 240
 6c6:	48 2b       	or	r20, r24
 6c8:	47 bb       	out	0x17, r20	; 23
 6ca:	08 95       	ret
 6cc:	61 30       	cpi	r22, 0x01	; 1
 6ce:	49 f4       	brne	.+18     	; 0x6e2 <Set_Nibble_Direction+0x6e>
 6d0:	84 b3       	in	r24, 0x14	; 20
 6d2:	8f 70       	andi	r24, 0x0F	; 15
 6d4:	90 e1       	ldi	r25, 0x10	; 16
 6d6:	49 9f       	mul	r20, r25
 6d8:	a0 01       	movw	r20, r0
 6da:	11 24       	eor	r1, r1
 6dc:	48 2b       	or	r20, r24
 6de:	44 bb       	out	0x14, r20	; 20
 6e0:	08 95       	ret
 6e2:	61 11       	cpse	r22, r1
 6e4:	16 c0       	rjmp	.+44     	; 0x712 <Set_Nibble_Direction+0x9e>
 6e6:	84 b3       	in	r24, 0x14	; 20
 6e8:	80 7f       	andi	r24, 0xF0	; 240
 6ea:	48 2b       	or	r20, r24
 6ec:	44 bb       	out	0x14, r20	; 20
 6ee:	08 95       	ret
 6f0:	61 30       	cpi	r22, 0x01	; 1
 6f2:	49 f4       	brne	.+18     	; 0x706 <Set_Nibble_Direction+0x92>
 6f4:	81 b3       	in	r24, 0x11	; 17
 6f6:	8f 70       	andi	r24, 0x0F	; 15
 6f8:	90 e1       	ldi	r25, 0x10	; 16
 6fa:	49 9f       	mul	r20, r25
 6fc:	a0 01       	movw	r20, r0
 6fe:	11 24       	eor	r1, r1
 700:	48 2b       	or	r20, r24
 702:	41 bb       	out	0x11, r20	; 17
 704:	08 95       	ret
 706:	61 11       	cpse	r22, r1
 708:	04 c0       	rjmp	.+8      	; 0x712 <Set_Nibble_Direction+0x9e>
 70a:	81 b3       	in	r24, 0x11	; 17
 70c:	80 7f       	andi	r24, 0xF0	; 240
 70e:	48 2b       	or	r20, r24
 710:	41 bb       	out	0x11, r20	; 17
 712:	08 95       	ret

00000714 <Write_Nibble>:

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	d8 2f       	mov	r29, r24
 71a:	c4 2f       	mov	r28, r20
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 71c:	61 30       	cpi	r22, 0x01	; 1
 71e:	41 f4       	brne	.+16     	; 0x730 <Write_Nibble+0x1c>
}
			
uint8 Read_Nibble(DIO_Port Port_ID , uint8 Significance)
{
	
	uint8 value = Read_Port(Port_ID);
 720:	98 df       	rcall	.-208    	; 0x652 <Read_Port>
	return value ;
}

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 722:	8f 70       	andi	r24, 0x0F	; 15
 724:	90 e1       	ldi	r25, 0x10	; 16
 726:	c9 9f       	mul	r28, r25
 728:	b0 01       	movw	r22, r0
 72a:	11 24       	eor	r1, r1
 72c:	68 2b       	or	r22, r24
}
			
uint8 Read_Nibble(DIO_Port Port_ID , uint8 Significance)
{
	
	uint8 value = Read_Port(Port_ID);
 72e:	04 c0       	rjmp	.+8      	; 0x738 <Write_Nibble+0x24>
 730:	90 df       	rcall	.-224    	; 0x652 <Read_Port>
	return value ;
}

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 732:	80 7f       	andi	r24, 0xF0	; 240
 734:	68 2f       	mov	r22, r24
	Write_Port(Port_ID,Value);
 736:	6c 2b       	or	r22, r28
 738:	8d 2f       	mov	r24, r29
 73a:	7b df       	rcall	.-266    	; 0x632 <Write_Port>
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	08 95       	ret

00000742 <__vector_1>:
	}
}

void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
 742:	1f 92       	push	r1
 744:	0f 92       	push	r0
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	0f 92       	push	r0
 74a:	11 24       	eor	r1, r1
 74c:	2f 93       	push	r18
 74e:	3f 93       	push	r19
 750:	4f 93       	push	r20
 752:	5f 93       	push	r21
 754:	6f 93       	push	r22
 756:	7f 93       	push	r23
 758:	8f 93       	push	r24
 75a:	9f 93       	push	r25
 75c:	af 93       	push	r26
 75e:	bf 93       	push	r27
 760:	ef 93       	push	r30
 762:	ff 93       	push	r31
	if(EXTI0_PTR != NULL)	EXTI0_PTR() ;
 764:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <EXTI0_PTR>
 768:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <EXTI0_PTR+0x1>
 76c:	30 97       	sbiw	r30, 0x00	; 0
 76e:	09 f0       	breq	.+2      	; 0x772 <__vector_1+0x30>
 770:	09 95       	icall
}
 772:	ff 91       	pop	r31
 774:	ef 91       	pop	r30
 776:	bf 91       	pop	r27
 778:	af 91       	pop	r26
 77a:	9f 91       	pop	r25
 77c:	8f 91       	pop	r24
 77e:	7f 91       	pop	r23
 780:	6f 91       	pop	r22
 782:	5f 91       	pop	r21
 784:	4f 91       	pop	r20
 786:	3f 91       	pop	r19
 788:	2f 91       	pop	r18
 78a:	0f 90       	pop	r0
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	0f 90       	pop	r0
 790:	1f 90       	pop	r1
 792:	18 95       	reti

00000794 <__vector_2>:

void __vector_2(void) __attribute__((signal,used));
void __vector_2(void)
{
 794:	1f 92       	push	r1
 796:	0f 92       	push	r0
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	0f 92       	push	r0
 79c:	11 24       	eor	r1, r1
 79e:	2f 93       	push	r18
 7a0:	3f 93       	push	r19
 7a2:	4f 93       	push	r20
 7a4:	5f 93       	push	r21
 7a6:	6f 93       	push	r22
 7a8:	7f 93       	push	r23
 7aa:	8f 93       	push	r24
 7ac:	9f 93       	push	r25
 7ae:	af 93       	push	r26
 7b0:	bf 93       	push	r27
 7b2:	ef 93       	push	r30
 7b4:	ff 93       	push	r31
	if(EXTI1_PTR != NULL)	EXTI1_PTR() ;
 7b6:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <EXTI1_PTR>
 7ba:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <EXTI1_PTR+0x1>
 7be:	30 97       	sbiw	r30, 0x00	; 0
 7c0:	09 f0       	breq	.+2      	; 0x7c4 <__vector_2+0x30>
 7c2:	09 95       	icall
}
 7c4:	ff 91       	pop	r31
 7c6:	ef 91       	pop	r30
 7c8:	bf 91       	pop	r27
 7ca:	af 91       	pop	r26
 7cc:	9f 91       	pop	r25
 7ce:	8f 91       	pop	r24
 7d0:	7f 91       	pop	r23
 7d2:	6f 91       	pop	r22
 7d4:	5f 91       	pop	r21
 7d6:	4f 91       	pop	r20
 7d8:	3f 91       	pop	r19
 7da:	2f 91       	pop	r18
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti

000007e6 <__vector_3>:

void __vector_3(void) __attribute__((signal,used));
void __vector_3(void)
{
 7e6:	1f 92       	push	r1
 7e8:	0f 92       	push	r0
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	0f 92       	push	r0
 7ee:	11 24       	eor	r1, r1
 7f0:	2f 93       	push	r18
 7f2:	3f 93       	push	r19
 7f4:	4f 93       	push	r20
 7f6:	5f 93       	push	r21
 7f8:	6f 93       	push	r22
 7fa:	7f 93       	push	r23
 7fc:	8f 93       	push	r24
 7fe:	9f 93       	push	r25
 800:	af 93       	push	r26
 802:	bf 93       	push	r27
 804:	ef 93       	push	r30
 806:	ff 93       	push	r31
	if(EXTI2_PTR != NULL)	EXTI2_PTR() ;
 808:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <EXTI2_PTR>
 80c:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <EXTI2_PTR+0x1>
 810:	30 97       	sbiw	r30, 0x00	; 0
 812:	09 f0       	breq	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 814:	09 95       	icall
}
 816:	ff 91       	pop	r31
 818:	ef 91       	pop	r30
 81a:	bf 91       	pop	r27
 81c:	af 91       	pop	r26
 81e:	9f 91       	pop	r25
 820:	8f 91       	pop	r24
 822:	7f 91       	pop	r23
 824:	6f 91       	pop	r22
 826:	5f 91       	pop	r21
 828:	4f 91       	pop	r20
 82a:	3f 91       	pop	r19
 82c:	2f 91       	pop	r18
 82e:	0f 90       	pop	r0
 830:	0f be       	out	0x3f, r0	; 63
 832:	0f 90       	pop	r0
 834:	1f 90       	pop	r1
 836:	18 95       	reti

00000838 <__subsf3>:
 838:	50 58       	subi	r21, 0x80	; 128

0000083a <__addsf3>:
 83a:	bb 27       	eor	r27, r27
 83c:	aa 27       	eor	r26, r26
 83e:	0e d0       	rcall	.+28     	; 0x85c <__addsf3x>
 840:	e0 c0       	rjmp	.+448    	; 0xa02 <__fp_round>
 842:	d1 d0       	rcall	.+418    	; 0x9e6 <__fp_pscA>
 844:	30 f0       	brcs	.+12     	; 0x852 <__addsf3+0x18>
 846:	d6 d0       	rcall	.+428    	; 0x9f4 <__fp_pscB>
 848:	20 f0       	brcs	.+8      	; 0x852 <__addsf3+0x18>
 84a:	31 f4       	brne	.+12     	; 0x858 <__addsf3+0x1e>
 84c:	9f 3f       	cpi	r25, 0xFF	; 255
 84e:	11 f4       	brne	.+4      	; 0x854 <__addsf3+0x1a>
 850:	1e f4       	brtc	.+6      	; 0x858 <__addsf3+0x1e>
 852:	c6 c0       	rjmp	.+396    	; 0x9e0 <__fp_nan>
 854:	0e f4       	brtc	.+2      	; 0x858 <__addsf3+0x1e>
 856:	e0 95       	com	r30
 858:	e7 fb       	bst	r30, 7
 85a:	bc c0       	rjmp	.+376    	; 0x9d4 <__fp_inf>

0000085c <__addsf3x>:
 85c:	e9 2f       	mov	r30, r25
 85e:	e2 d0       	rcall	.+452    	; 0xa24 <__fp_split3>
 860:	80 f3       	brcs	.-32     	; 0x842 <__addsf3+0x8>
 862:	ba 17       	cp	r27, r26
 864:	62 07       	cpc	r22, r18
 866:	73 07       	cpc	r23, r19
 868:	84 07       	cpc	r24, r20
 86a:	95 07       	cpc	r25, r21
 86c:	18 f0       	brcs	.+6      	; 0x874 <__stack+0x15>
 86e:	71 f4       	brne	.+28     	; 0x88c <__stack+0x2d>
 870:	9e f5       	brtc	.+102    	; 0x8d8 <__stack+0x79>
 872:	fa c0       	rjmp	.+500    	; 0xa68 <__fp_zero>
 874:	0e f4       	brtc	.+2      	; 0x878 <__stack+0x19>
 876:	e0 95       	com	r30
 878:	0b 2e       	mov	r0, r27
 87a:	ba 2f       	mov	r27, r26
 87c:	a0 2d       	mov	r26, r0
 87e:	0b 01       	movw	r0, r22
 880:	b9 01       	movw	r22, r18
 882:	90 01       	movw	r18, r0
 884:	0c 01       	movw	r0, r24
 886:	ca 01       	movw	r24, r20
 888:	a0 01       	movw	r20, r0
 88a:	11 24       	eor	r1, r1
 88c:	ff 27       	eor	r31, r31
 88e:	59 1b       	sub	r21, r25
 890:	99 f0       	breq	.+38     	; 0x8b8 <__stack+0x59>
 892:	59 3f       	cpi	r21, 0xF9	; 249
 894:	50 f4       	brcc	.+20     	; 0x8aa <__stack+0x4b>
 896:	50 3e       	cpi	r21, 0xE0	; 224
 898:	68 f1       	brcs	.+90     	; 0x8f4 <__stack+0x95>
 89a:	1a 16       	cp	r1, r26
 89c:	f0 40       	sbci	r31, 0x00	; 0
 89e:	a2 2f       	mov	r26, r18
 8a0:	23 2f       	mov	r18, r19
 8a2:	34 2f       	mov	r19, r20
 8a4:	44 27       	eor	r20, r20
 8a6:	58 5f       	subi	r21, 0xF8	; 248
 8a8:	f3 cf       	rjmp	.-26     	; 0x890 <__stack+0x31>
 8aa:	46 95       	lsr	r20
 8ac:	37 95       	ror	r19
 8ae:	27 95       	ror	r18
 8b0:	a7 95       	ror	r26
 8b2:	f0 40       	sbci	r31, 0x00	; 0
 8b4:	53 95       	inc	r21
 8b6:	c9 f7       	brne	.-14     	; 0x8aa <__stack+0x4b>
 8b8:	7e f4       	brtc	.+30     	; 0x8d8 <__stack+0x79>
 8ba:	1f 16       	cp	r1, r31
 8bc:	ba 0b       	sbc	r27, r26
 8be:	62 0b       	sbc	r22, r18
 8c0:	73 0b       	sbc	r23, r19
 8c2:	84 0b       	sbc	r24, r20
 8c4:	ba f0       	brmi	.+46     	; 0x8f4 <__stack+0x95>
 8c6:	91 50       	subi	r25, 0x01	; 1
 8c8:	a1 f0       	breq	.+40     	; 0x8f2 <__stack+0x93>
 8ca:	ff 0f       	add	r31, r31
 8cc:	bb 1f       	adc	r27, r27
 8ce:	66 1f       	adc	r22, r22
 8d0:	77 1f       	adc	r23, r23
 8d2:	88 1f       	adc	r24, r24
 8d4:	c2 f7       	brpl	.-16     	; 0x8c6 <__stack+0x67>
 8d6:	0e c0       	rjmp	.+28     	; 0x8f4 <__stack+0x95>
 8d8:	ba 0f       	add	r27, r26
 8da:	62 1f       	adc	r22, r18
 8dc:	73 1f       	adc	r23, r19
 8de:	84 1f       	adc	r24, r20
 8e0:	48 f4       	brcc	.+18     	; 0x8f4 <__stack+0x95>
 8e2:	87 95       	ror	r24
 8e4:	77 95       	ror	r23
 8e6:	67 95       	ror	r22
 8e8:	b7 95       	ror	r27
 8ea:	f7 95       	ror	r31
 8ec:	9e 3f       	cpi	r25, 0xFE	; 254
 8ee:	08 f0       	brcs	.+2      	; 0x8f2 <__stack+0x93>
 8f0:	b3 cf       	rjmp	.-154    	; 0x858 <__addsf3+0x1e>
 8f2:	93 95       	inc	r25
 8f4:	88 0f       	add	r24, r24
 8f6:	08 f0       	brcs	.+2      	; 0x8fa <__stack+0x9b>
 8f8:	99 27       	eor	r25, r25
 8fa:	ee 0f       	add	r30, r30
 8fc:	97 95       	ror	r25
 8fe:	87 95       	ror	r24
 900:	08 95       	ret

00000902 <__fixunssfsi>:
 902:	98 d0       	rcall	.+304    	; 0xa34 <__fp_splitA>
 904:	88 f0       	brcs	.+34     	; 0x928 <__fixunssfsi+0x26>
 906:	9f 57       	subi	r25, 0x7F	; 127
 908:	90 f0       	brcs	.+36     	; 0x92e <__fixunssfsi+0x2c>
 90a:	b9 2f       	mov	r27, r25
 90c:	99 27       	eor	r25, r25
 90e:	b7 51       	subi	r27, 0x17	; 23
 910:	a0 f0       	brcs	.+40     	; 0x93a <__fixunssfsi+0x38>
 912:	d1 f0       	breq	.+52     	; 0x948 <__fixunssfsi+0x46>
 914:	66 0f       	add	r22, r22
 916:	77 1f       	adc	r23, r23
 918:	88 1f       	adc	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	1a f0       	brmi	.+6      	; 0x924 <__fixunssfsi+0x22>
 91e:	ba 95       	dec	r27
 920:	c9 f7       	brne	.-14     	; 0x914 <__fixunssfsi+0x12>
 922:	12 c0       	rjmp	.+36     	; 0x948 <__fixunssfsi+0x46>
 924:	b1 30       	cpi	r27, 0x01	; 1
 926:	81 f0       	breq	.+32     	; 0x948 <__fixunssfsi+0x46>
 928:	9f d0       	rcall	.+318    	; 0xa68 <__fp_zero>
 92a:	b1 e0       	ldi	r27, 0x01	; 1
 92c:	08 95       	ret
 92e:	9c c0       	rjmp	.+312    	; 0xa68 <__fp_zero>
 930:	67 2f       	mov	r22, r23
 932:	78 2f       	mov	r23, r24
 934:	88 27       	eor	r24, r24
 936:	b8 5f       	subi	r27, 0xF8	; 248
 938:	39 f0       	breq	.+14     	; 0x948 <__fixunssfsi+0x46>
 93a:	b9 3f       	cpi	r27, 0xF9	; 249
 93c:	cc f3       	brlt	.-14     	; 0x930 <__fixunssfsi+0x2e>
 93e:	86 95       	lsr	r24
 940:	77 95       	ror	r23
 942:	67 95       	ror	r22
 944:	b3 95       	inc	r27
 946:	d9 f7       	brne	.-10     	; 0x93e <__fixunssfsi+0x3c>
 948:	3e f4       	brtc	.+14     	; 0x958 <__fixunssfsi+0x56>
 94a:	90 95       	com	r25
 94c:	80 95       	com	r24
 94e:	70 95       	com	r23
 950:	61 95       	neg	r22
 952:	7f 4f       	sbci	r23, 0xFF	; 255
 954:	8f 4f       	sbci	r24, 0xFF	; 255
 956:	9f 4f       	sbci	r25, 0xFF	; 255
 958:	08 95       	ret

0000095a <__floatunsisf>:
 95a:	e8 94       	clt
 95c:	09 c0       	rjmp	.+18     	; 0x970 <__floatsisf+0x12>

0000095e <__floatsisf>:
 95e:	97 fb       	bst	r25, 7
 960:	3e f4       	brtc	.+14     	; 0x970 <__floatsisf+0x12>
 962:	90 95       	com	r25
 964:	80 95       	com	r24
 966:	70 95       	com	r23
 968:	61 95       	neg	r22
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	8f 4f       	sbci	r24, 0xFF	; 255
 96e:	9f 4f       	sbci	r25, 0xFF	; 255
 970:	99 23       	and	r25, r25
 972:	a9 f0       	breq	.+42     	; 0x99e <__floatsisf+0x40>
 974:	f9 2f       	mov	r31, r25
 976:	96 e9       	ldi	r25, 0x96	; 150
 978:	bb 27       	eor	r27, r27
 97a:	93 95       	inc	r25
 97c:	f6 95       	lsr	r31
 97e:	87 95       	ror	r24
 980:	77 95       	ror	r23
 982:	67 95       	ror	r22
 984:	b7 95       	ror	r27
 986:	f1 11       	cpse	r31, r1
 988:	f8 cf       	rjmp	.-16     	; 0x97a <__floatsisf+0x1c>
 98a:	fa f4       	brpl	.+62     	; 0x9ca <__floatsisf+0x6c>
 98c:	bb 0f       	add	r27, r27
 98e:	11 f4       	brne	.+4      	; 0x994 <__floatsisf+0x36>
 990:	60 ff       	sbrs	r22, 0
 992:	1b c0       	rjmp	.+54     	; 0x9ca <__floatsisf+0x6c>
 994:	6f 5f       	subi	r22, 0xFF	; 255
 996:	7f 4f       	sbci	r23, 0xFF	; 255
 998:	8f 4f       	sbci	r24, 0xFF	; 255
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	16 c0       	rjmp	.+44     	; 0x9ca <__floatsisf+0x6c>
 99e:	88 23       	and	r24, r24
 9a0:	11 f0       	breq	.+4      	; 0x9a6 <__floatsisf+0x48>
 9a2:	96 e9       	ldi	r25, 0x96	; 150
 9a4:	11 c0       	rjmp	.+34     	; 0x9c8 <__floatsisf+0x6a>
 9a6:	77 23       	and	r23, r23
 9a8:	21 f0       	breq	.+8      	; 0x9b2 <__floatsisf+0x54>
 9aa:	9e e8       	ldi	r25, 0x8E	; 142
 9ac:	87 2f       	mov	r24, r23
 9ae:	76 2f       	mov	r23, r22
 9b0:	05 c0       	rjmp	.+10     	; 0x9bc <__floatsisf+0x5e>
 9b2:	66 23       	and	r22, r22
 9b4:	71 f0       	breq	.+28     	; 0x9d2 <__floatsisf+0x74>
 9b6:	96 e8       	ldi	r25, 0x86	; 134
 9b8:	86 2f       	mov	r24, r22
 9ba:	70 e0       	ldi	r23, 0x00	; 0
 9bc:	60 e0       	ldi	r22, 0x00	; 0
 9be:	2a f0       	brmi	.+10     	; 0x9ca <__floatsisf+0x6c>
 9c0:	9a 95       	dec	r25
 9c2:	66 0f       	add	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	da f7       	brpl	.-10     	; 0x9c0 <__floatsisf+0x62>
 9ca:	88 0f       	add	r24, r24
 9cc:	96 95       	lsr	r25
 9ce:	87 95       	ror	r24
 9d0:	97 f9       	bld	r25, 7
 9d2:	08 95       	ret

000009d4 <__fp_inf>:
 9d4:	97 f9       	bld	r25, 7
 9d6:	9f 67       	ori	r25, 0x7F	; 127
 9d8:	80 e8       	ldi	r24, 0x80	; 128
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	60 e0       	ldi	r22, 0x00	; 0
 9de:	08 95       	ret

000009e0 <__fp_nan>:
 9e0:	9f ef       	ldi	r25, 0xFF	; 255
 9e2:	80 ec       	ldi	r24, 0xC0	; 192
 9e4:	08 95       	ret

000009e6 <__fp_pscA>:
 9e6:	00 24       	eor	r0, r0
 9e8:	0a 94       	dec	r0
 9ea:	16 16       	cp	r1, r22
 9ec:	17 06       	cpc	r1, r23
 9ee:	18 06       	cpc	r1, r24
 9f0:	09 06       	cpc	r0, r25
 9f2:	08 95       	ret

000009f4 <__fp_pscB>:
 9f4:	00 24       	eor	r0, r0
 9f6:	0a 94       	dec	r0
 9f8:	12 16       	cp	r1, r18
 9fa:	13 06       	cpc	r1, r19
 9fc:	14 06       	cpc	r1, r20
 9fe:	05 06       	cpc	r0, r21
 a00:	08 95       	ret

00000a02 <__fp_round>:
 a02:	09 2e       	mov	r0, r25
 a04:	03 94       	inc	r0
 a06:	00 0c       	add	r0, r0
 a08:	11 f4       	brne	.+4      	; 0xa0e <__fp_round+0xc>
 a0a:	88 23       	and	r24, r24
 a0c:	52 f0       	brmi	.+20     	; 0xa22 <__fp_round+0x20>
 a0e:	bb 0f       	add	r27, r27
 a10:	40 f4       	brcc	.+16     	; 0xa22 <__fp_round+0x20>
 a12:	bf 2b       	or	r27, r31
 a14:	11 f4       	brne	.+4      	; 0xa1a <__fp_round+0x18>
 a16:	60 ff       	sbrs	r22, 0
 a18:	04 c0       	rjmp	.+8      	; 0xa22 <__fp_round+0x20>
 a1a:	6f 5f       	subi	r22, 0xFF	; 255
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	08 95       	ret

00000a24 <__fp_split3>:
 a24:	57 fd       	sbrc	r21, 7
 a26:	90 58       	subi	r25, 0x80	; 128
 a28:	44 0f       	add	r20, r20
 a2a:	55 1f       	adc	r21, r21
 a2c:	59 f0       	breq	.+22     	; 0xa44 <__fp_splitA+0x10>
 a2e:	5f 3f       	cpi	r21, 0xFF	; 255
 a30:	71 f0       	breq	.+28     	; 0xa4e <__fp_splitA+0x1a>
 a32:	47 95       	ror	r20

00000a34 <__fp_splitA>:
 a34:	88 0f       	add	r24, r24
 a36:	97 fb       	bst	r25, 7
 a38:	99 1f       	adc	r25, r25
 a3a:	61 f0       	breq	.+24     	; 0xa54 <__fp_splitA+0x20>
 a3c:	9f 3f       	cpi	r25, 0xFF	; 255
 a3e:	79 f0       	breq	.+30     	; 0xa5e <__fp_splitA+0x2a>
 a40:	87 95       	ror	r24
 a42:	08 95       	ret
 a44:	12 16       	cp	r1, r18
 a46:	13 06       	cpc	r1, r19
 a48:	14 06       	cpc	r1, r20
 a4a:	55 1f       	adc	r21, r21
 a4c:	f2 cf       	rjmp	.-28     	; 0xa32 <__fp_split3+0xe>
 a4e:	46 95       	lsr	r20
 a50:	f1 df       	rcall	.-30     	; 0xa34 <__fp_splitA>
 a52:	08 c0       	rjmp	.+16     	; 0xa64 <__fp_splitA+0x30>
 a54:	16 16       	cp	r1, r22
 a56:	17 06       	cpc	r1, r23
 a58:	18 06       	cpc	r1, r24
 a5a:	99 1f       	adc	r25, r25
 a5c:	f1 cf       	rjmp	.-30     	; 0xa40 <__fp_splitA+0xc>
 a5e:	86 95       	lsr	r24
 a60:	71 05       	cpc	r23, r1
 a62:	61 05       	cpc	r22, r1
 a64:	08 94       	sec
 a66:	08 95       	ret

00000a68 <__fp_zero>:
 a68:	e8 94       	clt

00000a6a <__fp_szero>:
 a6a:	bb 27       	eor	r27, r27
 a6c:	66 27       	eor	r22, r22
 a6e:	77 27       	eor	r23, r23
 a70:	cb 01       	movw	r24, r22
 a72:	97 f9       	bld	r25, 7
 a74:	08 95       	ret

00000a76 <__mulsf3>:
 a76:	0b d0       	rcall	.+22     	; 0xa8e <__mulsf3x>
 a78:	c4 cf       	rjmp	.-120    	; 0xa02 <__fp_round>
 a7a:	b5 df       	rcall	.-150    	; 0x9e6 <__fp_pscA>
 a7c:	28 f0       	brcs	.+10     	; 0xa88 <__mulsf3+0x12>
 a7e:	ba df       	rcall	.-140    	; 0x9f4 <__fp_pscB>
 a80:	18 f0       	brcs	.+6      	; 0xa88 <__mulsf3+0x12>
 a82:	95 23       	and	r25, r21
 a84:	09 f0       	breq	.+2      	; 0xa88 <__mulsf3+0x12>
 a86:	a6 cf       	rjmp	.-180    	; 0x9d4 <__fp_inf>
 a88:	ab cf       	rjmp	.-170    	; 0x9e0 <__fp_nan>
 a8a:	11 24       	eor	r1, r1
 a8c:	ee cf       	rjmp	.-36     	; 0xa6a <__fp_szero>

00000a8e <__mulsf3x>:
 a8e:	ca df       	rcall	.-108    	; 0xa24 <__fp_split3>
 a90:	a0 f3       	brcs	.-24     	; 0xa7a <__mulsf3+0x4>

00000a92 <__mulsf3_pse>:
 a92:	95 9f       	mul	r25, r21
 a94:	d1 f3       	breq	.-12     	; 0xa8a <__mulsf3+0x14>
 a96:	95 0f       	add	r25, r21
 a98:	50 e0       	ldi	r21, 0x00	; 0
 a9a:	55 1f       	adc	r21, r21
 a9c:	62 9f       	mul	r22, r18
 a9e:	f0 01       	movw	r30, r0
 aa0:	72 9f       	mul	r23, r18
 aa2:	bb 27       	eor	r27, r27
 aa4:	f0 0d       	add	r31, r0
 aa6:	b1 1d       	adc	r27, r1
 aa8:	63 9f       	mul	r22, r19
 aaa:	aa 27       	eor	r26, r26
 aac:	f0 0d       	add	r31, r0
 aae:	b1 1d       	adc	r27, r1
 ab0:	aa 1f       	adc	r26, r26
 ab2:	64 9f       	mul	r22, r20
 ab4:	66 27       	eor	r22, r22
 ab6:	b0 0d       	add	r27, r0
 ab8:	a1 1d       	adc	r26, r1
 aba:	66 1f       	adc	r22, r22
 abc:	82 9f       	mul	r24, r18
 abe:	22 27       	eor	r18, r18
 ac0:	b0 0d       	add	r27, r0
 ac2:	a1 1d       	adc	r26, r1
 ac4:	62 1f       	adc	r22, r18
 ac6:	73 9f       	mul	r23, r19
 ac8:	b0 0d       	add	r27, r0
 aca:	a1 1d       	adc	r26, r1
 acc:	62 1f       	adc	r22, r18
 ace:	83 9f       	mul	r24, r19
 ad0:	a0 0d       	add	r26, r0
 ad2:	61 1d       	adc	r22, r1
 ad4:	22 1f       	adc	r18, r18
 ad6:	74 9f       	mul	r23, r20
 ad8:	33 27       	eor	r19, r19
 ada:	a0 0d       	add	r26, r0
 adc:	61 1d       	adc	r22, r1
 ade:	23 1f       	adc	r18, r19
 ae0:	84 9f       	mul	r24, r20
 ae2:	60 0d       	add	r22, r0
 ae4:	21 1d       	adc	r18, r1
 ae6:	82 2f       	mov	r24, r18
 ae8:	76 2f       	mov	r23, r22
 aea:	6a 2f       	mov	r22, r26
 aec:	11 24       	eor	r1, r1
 aee:	9f 57       	subi	r25, 0x7F	; 127
 af0:	50 40       	sbci	r21, 0x00	; 0
 af2:	8a f0       	brmi	.+34     	; 0xb16 <__mulsf3_pse+0x84>
 af4:	e1 f0       	breq	.+56     	; 0xb2e <__mulsf3_pse+0x9c>
 af6:	88 23       	and	r24, r24
 af8:	4a f0       	brmi	.+18     	; 0xb0c <__mulsf3_pse+0x7a>
 afa:	ee 0f       	add	r30, r30
 afc:	ff 1f       	adc	r31, r31
 afe:	bb 1f       	adc	r27, r27
 b00:	66 1f       	adc	r22, r22
 b02:	77 1f       	adc	r23, r23
 b04:	88 1f       	adc	r24, r24
 b06:	91 50       	subi	r25, 0x01	; 1
 b08:	50 40       	sbci	r21, 0x00	; 0
 b0a:	a9 f7       	brne	.-22     	; 0xaf6 <__mulsf3_pse+0x64>
 b0c:	9e 3f       	cpi	r25, 0xFE	; 254
 b0e:	51 05       	cpc	r21, r1
 b10:	70 f0       	brcs	.+28     	; 0xb2e <__mulsf3_pse+0x9c>
 b12:	60 cf       	rjmp	.-320    	; 0x9d4 <__fp_inf>
 b14:	aa cf       	rjmp	.-172    	; 0xa6a <__fp_szero>
 b16:	5f 3f       	cpi	r21, 0xFF	; 255
 b18:	ec f3       	brlt	.-6      	; 0xb14 <__mulsf3_pse+0x82>
 b1a:	98 3e       	cpi	r25, 0xE8	; 232
 b1c:	dc f3       	brlt	.-10     	; 0xb14 <__mulsf3_pse+0x82>
 b1e:	86 95       	lsr	r24
 b20:	77 95       	ror	r23
 b22:	67 95       	ror	r22
 b24:	b7 95       	ror	r27
 b26:	f7 95       	ror	r31
 b28:	e7 95       	ror	r30
 b2a:	9f 5f       	subi	r25, 0xFF	; 255
 b2c:	c1 f7       	brne	.-16     	; 0xb1e <__mulsf3_pse+0x8c>
 b2e:	fe 2b       	or	r31, r30
 b30:	88 0f       	add	r24, r24
 b32:	91 1d       	adc	r25, r1
 b34:	96 95       	lsr	r25
 b36:	87 95       	ror	r24
 b38:	97 f9       	bld	r25, 7
 b3a:	08 95       	ret

00000b3c <_exit>:
 b3c:	f8 94       	cli

00000b3e <__stop_program>:
 b3e:	ff cf       	rjmp	.-2      	; 0xb3e <__stop_program>

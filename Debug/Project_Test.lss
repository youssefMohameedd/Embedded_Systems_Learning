
Project_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000007d6  0000086a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800078  00800078  00000882  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019d7  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac2  00000000  00000000  000023df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d9  00000000  00000000  00002ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00003f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b38  00000000  00000000  00004208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015c5  00000000  00000000  00008d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000a305  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001639  00000000  00000000  0000a3dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	02 d0       	rcall	.+4      	; 0x8c <main>
  88:	a4 c3       	rjmp	.+1864   	; 0x7d2 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <main>:
#include <ADC.h>


int main(void)
{
		Keypad_Init();
  8c:	14 d0       	rcall	.+40     	; 0xb6 <Keypad_Init>
		LCD_Init();
  8e:	e8 d0       	rcall	.+464    	; 0x260 <LCD_Init>
		uint8 val = 'N';

		while(1)
		{
			val = Keypad_Read_Char();
  90:	47 d0       	rcall	.+142    	; 0x120 <Keypad_Read_Char>
  92:	c8 2f       	mov	r28, r24
			if(val!='N')
  94:	8e 34       	cpi	r24, 0x4E	; 78
  96:	e1 f3       	breq	.-8      	; 0x90 <main+0x4>
			{
				LCD_Write_Char(val);
  98:	35 d1       	rcall	.+618    	; 0x304 <LCD_Write_Char>
				if(val=='*') LCD_Write_Cmd(DISPLAY_CLEAR);
  9a:	ca 32       	cpi	r28, 0x2A	; 42
  9c:	11 f4       	brne	.+4      	; 0xa2 <main+0x16>
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	b9 d0       	rcall	.+370    	; 0x214 <LCD_Write_Cmd>
  a2:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	81 ee       	ldi	r24, 0xE1	; 225
  a6:	94 e0       	ldi	r25, 0x04	; 4
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x1c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x26>
  b2:	00 00       	nop
  b4:	ed cf       	rjmp	.-38     	; 0x90 <main+0x4>

000000b6 <Keypad_Init>:
  b6:	ef 92       	push	r14
#include <Keypad.h>
#include <Keypad_CFG.h>


void Keypad_Init(void)
{
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	04 e7       	ldi	r16, 0x74	; 116
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	0f 2e       	mov	r0, r31
  c8:	f8 e7       	ldi	r31, 0x78	; 120
  ca:	ef 2e       	mov	r14, r31
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	ff 2e       	mov	r15, r31
  d0:	f0 2d       	mov	r31, r0
  d2:	e8 01       	movw	r28, r16
	for(uint8 i = 0 ; i<4 ; i++) Set_Channel_Direction(rows[i],OUTPUT);	
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	89 91       	ld	r24, Y+
  d8:	42 d1       	rcall	.+644    	; 0x35e <Set_Channel_Direction>
  da:	ce 15       	cp	r28, r14
  dc:	df 05       	cpc	r29, r15
  de:	d1 f7       	brne	.-12     	; 0xd4 <Keypad_Init+0x1e>
  e0:	c0 e7       	ldi	r28, 0x70	; 112
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	0f 2e       	mov	r0, r31
  e6:	f4 e7       	ldi	r31, 0x74	; 116
  e8:	ef 2e       	mov	r14, r31
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	ff 2e       	mov	r15, r31
  ee:	f0 2d       	mov	r31, r0
	}
	#elif (KEYPAD_INIT_MODE == INPUT)
	{
		for(uint8 i = 0 ; i<4 ; i++)
		{
			Set_Channel_Direction(cols[i],INPUT);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	89 91       	ld	r24, Y+
  f4:	34 d1       	rcall	.+616    	; 0x35e <Set_Channel_Direction>
			Write_Channel(rows[i],LOW);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	f8 01       	movw	r30, r16
  fa:	81 91       	ld	r24, Z+
  fc:	8f 01       	movw	r16, r30
  fe:	1e d2       	rcall	.+1084   	; 0x53c <Write_Channel>
			Write_Channel(rows[i],HIGH);	
		}
	}
	#elif (KEYPAD_INIT_MODE == INPUT)
	{
		for(uint8 i = 0 ; i<4 ; i++)
 100:	ce 15       	cp	r28, r14
 102:	df 05       	cpc	r29, r15
 104:	a9 f7       	brne	.-22     	; 0xf0 <Keypad_Init+0x3a>
 106:	81 ee       	ldi	r24, 0xE1	; 225
 108:	94 e0       	ldi	r25, 0x04	; 4
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <Keypad_Init+0x54>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <Keypad_Init+0x5a>
 110:	00 00       	nop
		}
	}
	
	#endif
	_delay_ms(5);
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	08 95       	ret

00000120 <Keypad_Read_Char>:



uint8 Keypad_Read_Char(void)
{
 120:	6f 92       	push	r6
 122:	7f 92       	push	r7
 124:	8f 92       	push	r8
 126:	9f 92       	push	r9
 128:	af 92       	push	r10
 12a:	bf 92       	push	r11
 12c:	cf 92       	push	r12
 12e:	df 92       	push	r13
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	04 e7       	ldi	r16, 0x74	; 116
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	e1 2c       	mov	r14, r1
 142:	f1 2c       	mov	r15, r1
	}
	#elif(KEYPAD_INIT_MODE == INPUT)
	{
		for (uint8 i = 0 ; i<NUM_OF_ROWS ; i++)
		{
			Write_Channel(rows[i],HIGH);
 144:	37 01       	movw	r6, r14
 146:	58 01       	movw	r10, r16
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	f8 01       	movw	r30, r16
 14c:	80 81       	ld	r24, Z
 14e:	f6 d1       	rcall	.+1004   	; 0x53c <Write_Channel>
 150:	0f 2e       	mov	r0, r31
 152:	f0 e7       	ldi	r31, 0x70	; 112
 154:	8f 2e       	mov	r8, r31
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	9f 2e       	mov	r9, r31
 15a:	f0 2d       	mov	r31, r0
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	d0 e0       	ldi	r29, 0x00	; 0
	
			for(uint8 j = 0 ; j <NUM_OF_COLS ; j++)
			{
				if(Read_Channel(cols[j]))
 160:	6e 01       	movw	r12, r28
 162:	f4 01       	movw	r30, r8
 164:	80 81       	ld	r24, Z
 166:	77 d2       	rcall	.+1262   	; 0x656 <Read_Channel>
 168:	88 23       	and	r24, r24
 16a:	e1 f0       	breq	.+56     	; 0x1a4 <Keypad_Read_Char+0x84>
 16c:	85 ea       	ldi	r24, 0xA5	; 165
 16e:	9e e0       	ldi	r25, 0x0E	; 14
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <Keypad_Read_Char+0x50>
 174:	00 c0       	rjmp	.+0      	; 0x176 <Keypad_Read_Char+0x56>
 176:	00 00       	nop
				{
					_delay_ms(15); // for debouncing
					
					if(Read_Channel(cols[j]))
 178:	f4 01       	movw	r30, r8
 17a:	80 81       	ld	r24, Z
 17c:	6c d2       	rcall	.+1240   	; 0x656 <Read_Channel>
 17e:	88 23       	and	r24, r24
 180:	89 f0       	breq	.+34     	; 0x1a4 <Keypad_Read_Char+0x84>
					{
						while(Read_Channel(cols[j])); // halt CPU Operation
 182:	c0 59       	subi	r28, 0x90	; 144
 184:	df 4f       	sbci	r29, 0xFF	; 255
 186:	88 81       	ld	r24, Y
 188:	66 d2       	rcall	.+1228   	; 0x656 <Read_Channel>
 18a:	81 11       	cpse	r24, r1
 18c:	fc cf       	rjmp	.-8      	; 0x186 <Keypad_Read_Char+0x66>
						return KeyPad[i][j];
 18e:	f3 01       	movw	r30, r6
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e0 5a       	subi	r30, 0xA0	; 160
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	ec 0d       	add	r30, r12
 19e:	fd 1d       	adc	r31, r13
 1a0:	80 81       	ld	r24, Z
 1a2:	16 c0       	rjmp	.+44     	; 0x1d0 <Keypad_Read_Char+0xb0>
 1a4:	21 96       	adiw	r28, 0x01	; 1
 1a6:	ff ef       	ldi	r31, 0xFF	; 255
 1a8:	8f 1a       	sub	r8, r31
 1aa:	9f 0a       	sbc	r9, r31
	{
		for (uint8 i = 0 ; i<NUM_OF_ROWS ; i++)
		{
			Write_Channel(rows[i],HIGH);
	
			for(uint8 j = 0 ; j <NUM_OF_COLS ; j++)
 1ac:	c4 30       	cpi	r28, 0x04	; 4
 1ae:	d1 05       	cpc	r29, r1
 1b0:	b9 f6       	brne	.-82     	; 0x160 <Keypad_Read_Char+0x40>
 1b2:	0f 5f       	subi	r16, 0xFF	; 255
					}
				}
				
			}
			
			Write_Channel(rows[i],LOW);
 1b4:	1f 4f       	sbci	r17, 0xFF	; 255
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	f5 01       	movw	r30, r10
 1ba:	80 81       	ld	r24, Z
 1bc:	bf d1       	rcall	.+894    	; 0x53c <Write_Channel>
 1be:	ff ef       	ldi	r31, 0xFF	; 255
 1c0:	ef 1a       	sub	r14, r31
 1c2:	ff 0a       	sbc	r15, r31
			Write_Channel(rows[i],HIGH);
		}
	}
	#elif(KEYPAD_INIT_MODE == INPUT)
	{
		for (uint8 i = 0 ; i<NUM_OF_ROWS ; i++)
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	e8 16       	cp	r14, r24
 1c8:	f1 04       	cpc	r15, r1
 1ca:	09 f0       	breq	.+2      	; 0x1ce <Keypad_Read_Char+0xae>
 1cc:	bb cf       	rjmp	.-138    	; 0x144 <Keypad_Read_Char+0x24>
			Write_Channel(rows[i],LOW);
		}
	}
	#endif
	
	return 'N';
 1ce:	8e e4       	ldi	r24, 0x4E	; 78
	
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	df 90       	pop	r13
 1de:	cf 90       	pop	r12
 1e0:	bf 90       	pop	r11
 1e2:	af 90       	pop	r10
 1e4:	9f 90       	pop	r9
 1e6:	8f 90       	pop	r8
 1e8:	7f 90       	pop	r7
 1ea:	6f 90       	pop	r6
 1ec:	08 95       	ret

000001ee <LCD_Latch>:

static uint8 AC = 0; // Address Counter initialization 
static uint8 Init_Flag = 0;

void LCD_Latch(void) {
	Write_Channel(LCD_E, HIGH);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	8b e0       	ldi	r24, 0x0B	; 11
 1f2:	a4 d1       	rcall	.+840    	; 0x53c <Write_Channel>
 1f4:	89 ef       	ldi	r24, 0xF9	; 249
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_Latch+0xa>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_Latch+0x10>
 1fe:	00 00       	nop
	_delay_ms(1); 
	Write_Channel(LCD_E, LOW);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	8b e0       	ldi	r24, 0x0B	; 11
 204:	9b d1       	rcall	.+822    	; 0x53c <Write_Channel>
 206:	89 ef       	ldi	r24, 0xF9	; 249
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCD_Latch+0x1c>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <LCD_Latch+0x22>
 210:	00 00       	nop
 212:	08 95       	ret

00000214 <LCD_Write_Cmd>:
	_delay_ms(1);
}
// Logic : __HigherNibble__|‾‾Latch‾‾|__LowerNibble__|‾‾Latch‾‾|__
void LCD_Write_Cmd(uint8 cmd) {
 214:	cf 93       	push	r28
 216:	c8 2f       	mov	r28, r24
	
	Write_Channel(LCD_RS, LOW);
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	89 e0       	ldi	r24, 0x09	; 9
 21c:	8f d1       	rcall	.+798    	; 0x53c <Write_Channel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LCD_Write_Cmd+0xc>
	_delay_us(2);
	
	#if(INIT_MODE==0)
	if(Init_Flag == 1)
 220:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	39 f4       	brne	.+14     	; 0x236 <LCD_Write_Cmd+0x22>
	{	
	Write_Nibble(LCD_PORT, LCD_SIG, cmd >> 4); // Send higher nibble
 228:	4c 2f       	mov	r20, r28
 22a:	42 95       	swap	r20
 22c:	4f 70       	andi	r20, 0x0F	; 15
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 232:	b8 d2       	rcall	.+1392   	; 0x7a4 <Write_Nibble>
 234:	dc df       	rcall	.-72     	; 0x1ee <LCD_Latch>
	}
	Write_Nibble(LCD_PORT, LCD_SIG, cmd & 0x0F); // Send lower nibble
 236:	4c 2f       	mov	r20, r28
 238:	4f 70       	andi	r20, 0x0F	; 15
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 23e:	b2 d2       	rcall	.+1380   	; 0x7a4 <Write_Nibble>
 240:	d6 df       	rcall	.-84     	; 0x1ee <LCD_Latch>
 242:	80 e1       	ldi	r24, 0x10	; 16
 244:	8a 95       	dec	r24
 246:	f1 f7       	brne	.-4      	; 0x244 <LCD_Write_Cmd+0x30>
 248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_Write_Cmd+0x36>
	Write_Port(LCD_PORT,cmd);
	LCD_Latch();
	
	#endif
	_delay_us(50);
	if(cmd == 0x01 || cmd == 0x02 ) _delay_ms(2);
 24a:	c1 50       	subi	r28, 0x01	; 1
 24c:	c2 30       	cpi	r28, 0x02	; 2
 24e:	30 f4       	brcc	.+12     	; 0x25c <LCD_Write_Cmd+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	83 ef       	ldi	r24, 0xF3	; 243
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCD_Write_Cmd+0x40>
 258:	00 c0       	rjmp	.+0      	; 0x25a <LCD_Write_Cmd+0x46>
 25a:	00 00       	nop
}
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <LCD_Init>:

void LCD_Init(void) 
{	
	Set_Channel_Direction(LCD_E, OUTPUT);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	8b e0       	ldi	r24, 0x0B	; 11
 264:	7c d0       	rcall	.+248    	; 0x35e <Set_Channel_Direction>
	Set_Channel_Direction(LCD_RS, OUTPUT);
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	89 e0       	ldi	r24, 0x09	; 9
 26a:	79 d0       	rcall	.+242    	; 0x35e <Set_Channel_Direction>
	Set_Channel_Direction(LCD_RW, OUTPUT);
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	8a e0       	ldi	r24, 0x0A	; 10
 270:	76 d0       	rcall	.+236    	; 0x35e <Set_Channel_Direction>
 272:	83 ed       	ldi	r24, 0xD3	; 211
 274:	90 e3       	ldi	r25, 0x30	; 48
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_Init+0x16>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_Init+0x1c>
	
	_delay_ms(50); // Wait for LCD power-up
	Write_Channel(LCD_RW, LOW); // Always in write mode
 27c:	00 00       	nop
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	8a e0       	ldi	r24, 0x0A	; 10

	#if(INIT_MODE==0)
	
		Set_Nibble_Direction(LCD_PORT,LCD_SIG,0xF);
 282:	5c d1       	rcall	.+696    	; 0x53c <Write_Channel>
 284:	4f e0       	ldi	r20, 0x0F	; 15
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	80 e0       	ldi	r24, 0x00	; 0
		//Initially, we configure the LCD as an 8-bit interface until it's completely stable to convert to a 4 bit-interface(Kinda Formalities) 
		LCD_Write_Cmd(EIGHT_BIT_MODE);	_delay_ms(5); 
 28a:	3c d2       	rcall	.+1144   	; 0x704 <Set_Nibble_Direction>
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	c2 df       	rcall	.-124    	; 0x214 <LCD_Write_Cmd>
 290:	81 ee       	ldi	r24, 0xE1	; 225
 292:	94 e0       	ldi	r25, 0x04	; 4
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_Init+0x34>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_Init+0x3a>
		LCD_Write_Cmd(EIGHT_BIT_MODE);	_delay_us(150);
 29a:	00 00       	nop
 29c:	83 e0       	ldi	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	ba df       	rcall	.-140    	; 0x214 <LCD_Write_Cmd>
 2a0:	92 e3       	ldi	r25, 0x32	; 50
 2a2:	9a 95       	dec	r25
		LCD_Write_Cmd(EIGHT_BIT_MODE);
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_Init+0x42>
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	b5 df       	rcall	.-150    	; 0x214 <LCD_Write_Cmd>
		LCD_Write_Cmd(FOUR_BIT_MODE);	_delay_ms(1);  // Ensure LCD properly latches 4-bit modeSome LCDs need a brief delay before fully transitioning
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	b3 df       	rcall	.-154    	; 0x214 <LCD_Write_Cmd>
 2ae:	89 ef       	ldi	r24, 0xF9	; 249
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_Init+0x52>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_Init+0x58>
		Init_Flag = 1;
 2b8:	00 00       	nop
 2ba:	81 e0       	ldi	r24, 0x01	; 1
		LCD_Write_Cmd(FUNCTION_SET);
 2bc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 2c0:	88 e2       	ldi	r24, 0x28	; 40
		LCD_Write_Cmd(DISPLAY_CONTROL);
 2c2:	a8 df       	rcall	.-176    	; 0x214 <LCD_Write_Cmd>
 2c4:	8f e0       	ldi	r24, 0x0F	; 15
 2c6:	a6 df       	rcall	.-180    	; 0x214 <LCD_Write_Cmd>
		LCD_Write_Cmd(DISPLAY_CLEAR); 
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	a4 df       	rcall	.-184    	; 0x214 <LCD_Write_Cmd>
 2cc:	86 e0       	ldi	r24, 0x06	; 6
		LCD_Write_Cmd(ENTRY_MODE_SET); //optional
 2ce:	a2 cf       	rjmp	.-188    	; 0x214 <LCD_Write_Cmd>
 2d0:	08 95       	ret

000002d2 <LCD_Move_Pos>:
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	40 f4       	brcc	.+16     	; 0x2e6 <LCD_Move_Pos+0x14>
}

void LCD_Move_Pos(uint8 row, uint8 col)
{
	uint8 index = 0;
	if(row <2 && col <16)	index =(row*LINE_2_BASE_ADDRESS) + col;
 2d6:	60 31       	cpi	r22, 0x10	; 16
 2d8:	48 f4       	brcc	.+18     	; 0x2ec <LCD_Move_Pos+0x1a>
 2da:	90 e4       	ldi	r25, 0x40	; 64
 2dc:	89 9f       	mul	r24, r25
 2de:	60 0d       	add	r22, r0
 2e0:	11 24       	eor	r1, r1
 2e2:	86 2f       	mov	r24, r22
 2e4:	0a c0       	rjmp	.+20     	; 0x2fa <LCD_Move_Pos+0x28>
	else if (row >1 )		index = LINE_2_BASE_ADDRESS + col ;
 2e6:	80 e4       	ldi	r24, 0x40	; 64
 2e8:	86 0f       	add	r24, r22
 2ea:	07 c0       	rjmp	.+14     	; 0x2fa <LCD_Move_Pos+0x28>
	else if (col >16)		index = LINE_2_BASE_ADDRESS + (col%16); // wrapping exceeding columns
 2ec:	61 31       	cpi	r22, 0x11	; 17
 2ee:	20 f0       	brcs	.+8      	; 0x2f8 <LCD_Move_Pos+0x26>
 2f0:	86 2f       	mov	r24, r22
 2f2:	8f 70       	andi	r24, 0x0F	; 15
 2f4:	80 5c       	subi	r24, 0xC0	; 192
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <LCD_Move_Pos+0x28>

}

void LCD_Move_Pos(uint8 row, uint8 col)
{
	uint8 index = 0;
 2f8:	80 e0       	ldi	r24, 0x00	; 0
	if(row <2 && col <16)	index =(row*LINE_2_BASE_ADDRESS) + col;
	else if (row >1 )		index = LINE_2_BASE_ADDRESS + col ;
	else if (col >16)		index = LINE_2_BASE_ADDRESS + (col%16); // wrapping exceeding columns
	AC = index;			// necessary for end of line string bug handling
 2fa:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <AC>
	SET_BIT(index,7);   // Command Selection to modify the Address Counter value
	LCD_Write_Cmd(index);
 2fe:	80 68       	ori	r24, 0x80	; 128
 300:	89 cf       	rjmp	.-238    	; 0x214 <LCD_Write_Cmd>
 302:	08 95       	ret

00000304 <LCD_Write_Char>:

}

void LCD_Write_Char(uint8 character)
 {	
 304:	cf 93       	push	r28
 306:	c8 2f       	mov	r28, r24
	 //Handling end of Line string initiations
	if(AC == 0x10) LCD_Move_Pos(1,0);
 308:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <AC>
 30c:	80 31       	cpi	r24, 0x10	; 16
 30e:	19 f4       	brne	.+6      	; 0x316 <LCD_Write_Char+0x12>
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	de df       	rcall	.-68     	; 0x2d2 <LCD_Move_Pos>
	if(AC > 0x4F)
 316:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <AC>
 31a:	80 35       	cpi	r24, 0x50	; 80
 31c:	20 f0       	brcs	.+8      	; 0x326 <LCD_Write_Char+0x22>
	 {
		 AC = 0 ;
 31e:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <AC>
		 LCD_Write_Cmd(RETURN_HOME);
 322:	80 e8       	ldi	r24, 0x80	; 128
 324:	77 df       	rcall	.-274    	; 0x214 <LCD_Write_Cmd>
	 }
	
	Write_Channel(LCD_RS, HIGH);
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	89 e0       	ldi	r24, 0x09	; 9
 32a:	08 d1       	rcall	.+528    	; 0x53c <Write_Channel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32c:	00 c0       	rjmp	.+0      	; 0x32e <LCD_Write_Char+0x2a>
	_delay_us(2);
	
	#if(INIT_MODE==0)
	
	Write_Nibble(LCD_PORT,LCD_SIG, character >> 4);   // Send higher nibble
 32e:	4c 2f       	mov	r20, r28
 330:	42 95       	swap	r20
 332:	4f 70       	andi	r20, 0x0F	; 15
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 338:	35 d2       	rcall	.+1130   	; 0x7a4 <Write_Nibble>

	Write_Nibble(LCD_PORT,LCD_SIG, character & 0x0F); // Send lower nibble
 33a:	59 df       	rcall	.-334    	; 0x1ee <LCD_Latch>
 33c:	4c 2f       	mov	r20, r28
 33e:	4f 70       	andi	r20, 0x0F	; 15
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Latch();
 344:	2f d2       	rcall	.+1118   	; 0x7a4 <Write_Nibble>
 346:	53 df       	rcall	.-346    	; 0x1ee <LCD_Latch>
 348:	80 e1       	ldi	r24, 0x10	; 16
 34a:	8a 95       	dec	r24
 34c:	f1 f7       	brne	.-4      	; 0x34a <LCD_Write_Char+0x46>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <LCD_Write_Char+0x4c>
	Write_Port(LCD_PORT,character);
	LCD_Latch();
	
	#endif
	_delay_us(50);
	AC++;
 350:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <AC>
 354:	8f 5f       	subi	r24, 0xFF	; 255
 356:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <AC>
	
}
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <Set_Channel_Direction>:
	uint8 value = Read_Port(Port_ID);
	if(Significance == HIGH)	value =  (value & 0xF0) >> 4 ; 
	else if (Significance == LOW) value = (value &0x0F) ;
	
	return value ;
}
 35e:	98 2f       	mov	r25, r24
 360:	97 70       	andi	r25, 0x07	; 7
 362:	86 95       	lsr	r24
 364:	86 95       	lsr	r24
 366:	86 95       	lsr	r24
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	09 f4       	brne	.+2      	; 0x36e <Set_Channel_Direction+0x10>
 36c:	40 c0       	rjmp	.+128    	; 0x3ee <Set_Channel_Direction+0x90>
 36e:	38 f0       	brcs	.+14     	; 0x37e <Set_Channel_Direction+0x20>
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	09 f4       	brne	.+2      	; 0x376 <Set_Channel_Direction+0x18>
 374:	74 c0       	rjmp	.+232    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	09 f4       	brne	.+2      	; 0x37c <Set_Channel_Direction+0x1e>
 37a:	a9 c0       	rjmp	.+338    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 37c:	08 95       	ret
 37e:	61 11       	cpse	r22, r1
 380:	12 c0       	rjmp	.+36     	; 0x3a6 <Set_Channel_Direction+0x48>
 382:	4a b3       	in	r20, 0x1a	; 26
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	b9 01       	movw	r22, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <Set_Channel_Direction+0x32>
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	9a 95       	dec	r25
 392:	e2 f7       	brpl	.-8      	; 0x38c <Set_Channel_Direction+0x2e>
 394:	cb 01       	movw	r24, r22
 396:	80 95       	com	r24
 398:	94 2f       	mov	r25, r20
 39a:	98 23       	and	r25, r24
 39c:	9a bb       	out	0x1a, r25	; 26
 39e:	9b b3       	in	r25, 0x1b	; 27
 3a0:	89 23       	and	r24, r25
 3a2:	8b bb       	out	0x1b, r24	; 27
 3a4:	08 95       	ret
 3a6:	62 30       	cpi	r22, 0x02	; 2
 3a8:	91 f4       	brne	.+36     	; 0x3ce <Set_Channel_Direction+0x70>
 3aa:	4a b3       	in	r20, 0x1a	; 26
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	b9 01       	movw	r22, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <Set_Channel_Direction+0x5a>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	9a 95       	dec	r25
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <Set_Channel_Direction+0x56>
 3bc:	cb 01       	movw	r24, r22
 3be:	96 2f       	mov	r25, r22
 3c0:	90 95       	com	r25
 3c2:	94 23       	and	r25, r20
 3c4:	9a bb       	out	0x1a, r25	; 26
 3c6:	9b b3       	in	r25, 0x1b	; 27
 3c8:	89 2b       	or	r24, r25
 3ca:	8b bb       	out	0x1b, r24	; 27
 3cc:	08 95       	ret
 3ce:	61 30       	cpi	r22, 0x01	; 1
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <Set_Channel_Direction+0x76>
 3d2:	b3 c0       	rjmp	.+358    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 3d4:	4a b3       	in	r20, 0x1a	; 26
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	b9 01       	movw	r22, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <Set_Channel_Direction+0x84>
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	9a 95       	dec	r25
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <Set_Channel_Direction+0x80>
 3e6:	cb 01       	movw	r24, r22
 3e8:	84 2b       	or	r24, r20
 3ea:	8a bb       	out	0x1a, r24	; 26
 3ec:	08 95       	ret
 3ee:	61 11       	cpse	r22, r1
 3f0:	12 c0       	rjmp	.+36     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3f2:	47 b3       	in	r20, 0x17	; 23
 3f4:	21 e0       	ldi	r18, 0x01	; 1
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	b9 01       	movw	r22, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	9a 95       	dec	r25
 402:	e2 f7       	brpl	.-8      	; 0x3fc <Set_Channel_Direction+0x9e>
 404:	cb 01       	movw	r24, r22
 406:	80 95       	com	r24
 408:	94 2f       	mov	r25, r20
 40a:	98 23       	and	r25, r24
 40c:	97 bb       	out	0x17, r25	; 23
 40e:	98 b3       	in	r25, 0x18	; 24
 410:	89 23       	and	r24, r25
 412:	88 bb       	out	0x18, r24	; 24
 414:	08 95       	ret
 416:	62 30       	cpi	r22, 0x02	; 2
 418:	91 f4       	brne	.+36     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 41a:	47 b3       	in	r20, 0x17	; 23
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	b9 01       	movw	r22, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	9a 95       	dec	r25
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	cb 01       	movw	r24, r22
 42e:	96 2f       	mov	r25, r22
 430:	90 95       	com	r25
 432:	94 23       	and	r25, r20
 434:	97 bb       	out	0x17, r25	; 23
 436:	98 b3       	in	r25, 0x18	; 24
 438:	89 2b       	or	r24, r25
 43a:	88 bb       	out	0x18, r24	; 24
 43c:	08 95       	ret
 43e:	61 30       	cpi	r22, 0x01	; 1
 440:	09 f0       	breq	.+2      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 442:	7b c0       	rjmp	.+246    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 444:	47 b3       	in	r20, 0x17	; 23
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	b9 01       	movw	r22, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	9a 95       	dec	r25
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	cb 01       	movw	r24, r22
 458:	84 2b       	or	r24, r20
 45a:	87 bb       	out	0x17, r24	; 23
 45c:	08 95       	ret
 45e:	61 11       	cpse	r22, r1
 460:	12 c0       	rjmp	.+36     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 462:	44 b3       	in	r20, 0x14	; 20
 464:	21 e0       	ldi	r18, 0x01	; 1
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	b9 01       	movw	r22, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	9a 95       	dec	r25
 472:	e2 f7       	brpl	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 474:	cb 01       	movw	r24, r22
 476:	80 95       	com	r24
 478:	94 2f       	mov	r25, r20
 47a:	98 23       	and	r25, r24
 47c:	94 bb       	out	0x14, r25	; 20
 47e:	95 b3       	in	r25, 0x15	; 21
 480:	89 23       	and	r24, r25
 482:	85 bb       	out	0x15, r24	; 21
 484:	08 95       	ret
 486:	62 30       	cpi	r22, 0x02	; 2
 488:	91 f4       	brne	.+36     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 48a:	44 b3       	in	r20, 0x14	; 20
 48c:	21 e0       	ldi	r18, 0x01	; 1
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	b9 01       	movw	r22, r18
 492:	02 c0       	rjmp	.+4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	9a 95       	dec	r25
 49a:	e2 f7       	brpl	.-8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 49c:	cb 01       	movw	r24, r22
 49e:	96 2f       	mov	r25, r22
 4a0:	90 95       	com	r25
 4a2:	94 23       	and	r25, r20
 4a4:	94 bb       	out	0x14, r25	; 20
 4a6:	95 b3       	in	r25, 0x15	; 21
 4a8:	89 2b       	or	r24, r25
 4aa:	85 bb       	out	0x15, r24	; 21
 4ac:	08 95       	ret
 4ae:	61 30       	cpi	r22, 0x01	; 1
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b2:	43 c0       	rjmp	.+134    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 4b4:	44 b3       	in	r20, 0x14	; 20
 4b6:	21 e0       	ldi	r18, 0x01	; 1
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	b9 01       	movw	r22, r18
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4be:	66 0f       	add	r22, r22
 4c0:	77 1f       	adc	r23, r23
 4c2:	9a 95       	dec	r25
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4c6:	cb 01       	movw	r24, r22
 4c8:	84 2b       	or	r24, r20
 4ca:	84 bb       	out	0x14, r24	; 20
 4cc:	08 95       	ret
 4ce:	61 11       	cpse	r22, r1
 4d0:	12 c0       	rjmp	.+36     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4d2:	41 b3       	in	r20, 0x11	; 17
 4d4:	21 e0       	ldi	r18, 0x01	; 1
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	b9 01       	movw	r22, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	9a 95       	dec	r25
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4e4:	cb 01       	movw	r24, r22
 4e6:	80 95       	com	r24
 4e8:	94 2f       	mov	r25, r20
 4ea:	98 23       	and	r25, r24
 4ec:	91 bb       	out	0x11, r25	; 17
 4ee:	92 b3       	in	r25, 0x12	; 18
 4f0:	89 23       	and	r24, r25
 4f2:	82 bb       	out	0x12, r24	; 18
 4f4:	08 95       	ret
 4f6:	62 30       	cpi	r22, 0x02	; 2
 4f8:	91 f4       	brne	.+36     	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 4fa:	41 b3       	in	r20, 0x11	; 17
 4fc:	21 e0       	ldi	r18, 0x01	; 1
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	b9 01       	movw	r22, r18
 502:	02 c0       	rjmp	.+4      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	9a 95       	dec	r25
 50a:	e2 f7       	brpl	.-8      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 50c:	cb 01       	movw	r24, r22
 50e:	96 2f       	mov	r25, r22
 510:	90 95       	com	r25
 512:	94 23       	and	r25, r20
 514:	91 bb       	out	0x11, r25	; 17
 516:	92 b3       	in	r25, 0x12	; 18
 518:	89 2b       	or	r24, r25
 51a:	82 bb       	out	0x12, r24	; 18
 51c:	08 95       	ret
 51e:	61 30       	cpi	r22, 0x01	; 1
 520:	61 f4       	brne	.+24     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 522:	41 b3       	in	r20, 0x11	; 17
 524:	21 e0       	ldi	r18, 0x01	; 1
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	b9 01       	movw	r22, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	9a 95       	dec	r25
 532:	e2 f7       	brpl	.-8      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 534:	cb 01       	movw	r24, r22
 536:	84 2b       	or	r24, r20
 538:	81 bb       	out	0x11, r24	; 17
 53a:	08 95       	ret

0000053c <Write_Channel>:
 53c:	98 2f       	mov	r25, r24
 53e:	97 70       	andi	r25, 0x07	; 7
 540:	86 95       	lsr	r24
 542:	86 95       	lsr	r24
 544:	86 95       	lsr	r24
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	41 f1       	breq	.+80     	; 0x59a <Write_Channel+0x5e>
 54a:	38 f0       	brcs	.+14     	; 0x55a <Write_Channel+0x1e>
 54c:	82 30       	cpi	r24, 0x02	; 2
 54e:	09 f4       	brne	.+2      	; 0x552 <Write_Channel+0x16>
 550:	44 c0       	rjmp	.+136    	; 0x5da <Write_Channel+0x9e>
 552:	83 30       	cpi	r24, 0x03	; 3
 554:	09 f4       	brne	.+2      	; 0x558 <Write_Channel+0x1c>
 556:	60 c0       	rjmp	.+192    	; 0x618 <Write_Channel+0xdc>
 558:	08 95       	ret
 55a:	61 11       	cpse	r22, r1
 55c:	0e c0       	rjmp	.+28     	; 0x57a <Write_Channel+0x3e>
 55e:	4b b3       	in	r20, 0x1b	; 27
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	b9 01       	movw	r22, r18
 566:	02 c0       	rjmp	.+4      	; 0x56c <Write_Channel+0x30>
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	9a 95       	dec	r25
 56e:	e2 f7       	brpl	.-8      	; 0x568 <Write_Channel+0x2c>
 570:	cb 01       	movw	r24, r22
 572:	80 95       	com	r24
 574:	84 23       	and	r24, r20
 576:	8b bb       	out	0x1b, r24	; 27
 578:	08 95       	ret
 57a:	61 30       	cpi	r22, 0x01	; 1
 57c:	09 f0       	breq	.+2      	; 0x580 <Write_Channel+0x44>
 57e:	6a c0       	rjmp	.+212    	; 0x654 <Write_Channel+0x118>
 580:	4b b3       	in	r20, 0x1b	; 27
 582:	21 e0       	ldi	r18, 0x01	; 1
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	b9 01       	movw	r22, r18
 588:	02 c0       	rjmp	.+4      	; 0x58e <Write_Channel+0x52>
 58a:	66 0f       	add	r22, r22
 58c:	77 1f       	adc	r23, r23
 58e:	9a 95       	dec	r25
 590:	e2 f7       	brpl	.-8      	; 0x58a <Write_Channel+0x4e>
 592:	cb 01       	movw	r24, r22
 594:	84 2b       	or	r24, r20
 596:	8b bb       	out	0x1b, r24	; 27
 598:	08 95       	ret
 59a:	61 11       	cpse	r22, r1
 59c:	0e c0       	rjmp	.+28     	; 0x5ba <Write_Channel+0x7e>
 59e:	48 b3       	in	r20, 0x18	; 24
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	b9 01       	movw	r22, r18
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <Write_Channel+0x70>
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	9a 95       	dec	r25
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <Write_Channel+0x6c>
 5b0:	cb 01       	movw	r24, r22
 5b2:	80 95       	com	r24
 5b4:	84 23       	and	r24, r20
 5b6:	88 bb       	out	0x18, r24	; 24
 5b8:	08 95       	ret
 5ba:	61 30       	cpi	r22, 0x01	; 1
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <Write_Channel+0x84>
 5be:	4a c0       	rjmp	.+148    	; 0x654 <Write_Channel+0x118>
 5c0:	48 b3       	in	r20, 0x18	; 24
 5c2:	21 e0       	ldi	r18, 0x01	; 1
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	b9 01       	movw	r22, r18
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <Write_Channel+0x92>
 5ca:	66 0f       	add	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	9a 95       	dec	r25
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <Write_Channel+0x8e>
 5d2:	cb 01       	movw	r24, r22
 5d4:	84 2b       	or	r24, r20
 5d6:	88 bb       	out	0x18, r24	; 24
 5d8:	08 95       	ret
 5da:	61 11       	cpse	r22, r1
 5dc:	0e c0       	rjmp	.+28     	; 0x5fa <Write_Channel+0xbe>
 5de:	45 b3       	in	r20, 0x15	; 21
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	b9 01       	movw	r22, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <Write_Channel+0xb0>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	9a 95       	dec	r25
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <Write_Channel+0xac>
 5f0:	cb 01       	movw	r24, r22
 5f2:	80 95       	com	r24
 5f4:	84 23       	and	r24, r20
 5f6:	85 bb       	out	0x15, r24	; 21
 5f8:	08 95       	ret
 5fa:	61 30       	cpi	r22, 0x01	; 1
 5fc:	59 f5       	brne	.+86     	; 0x654 <Write_Channel+0x118>
 5fe:	45 b3       	in	r20, 0x15	; 21
 600:	21 e0       	ldi	r18, 0x01	; 1
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	b9 01       	movw	r22, r18
 606:	02 c0       	rjmp	.+4      	; 0x60c <Write_Channel+0xd0>
 608:	66 0f       	add	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	9a 95       	dec	r25
 60e:	e2 f7       	brpl	.-8      	; 0x608 <Write_Channel+0xcc>
 610:	cb 01       	movw	r24, r22
 612:	84 2b       	or	r24, r20
 614:	85 bb       	out	0x15, r24	; 21
 616:	08 95       	ret
 618:	61 11       	cpse	r22, r1
 61a:	0e c0       	rjmp	.+28     	; 0x638 <Write_Channel+0xfc>
 61c:	42 b3       	in	r20, 0x12	; 18
 61e:	21 e0       	ldi	r18, 0x01	; 1
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	b9 01       	movw	r22, r18
 624:	02 c0       	rjmp	.+4      	; 0x62a <Write_Channel+0xee>
 626:	66 0f       	add	r22, r22
 628:	77 1f       	adc	r23, r23
 62a:	9a 95       	dec	r25
 62c:	e2 f7       	brpl	.-8      	; 0x626 <Write_Channel+0xea>
 62e:	cb 01       	movw	r24, r22
 630:	80 95       	com	r24
 632:	84 23       	and	r24, r20
 634:	82 bb       	out	0x12, r24	; 18
 636:	08 95       	ret
 638:	61 30       	cpi	r22, 0x01	; 1
 63a:	61 f4       	brne	.+24     	; 0x654 <Write_Channel+0x118>
 63c:	42 b3       	in	r20, 0x12	; 18
 63e:	21 e0       	ldi	r18, 0x01	; 1
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	b9 01       	movw	r22, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <Write_Channel+0x10e>
 646:	66 0f       	add	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	9a 95       	dec	r25
 64c:	e2 f7       	brpl	.-8      	; 0x646 <Write_Channel+0x10a>
 64e:	cb 01       	movw	r24, r22
 650:	84 2b       	or	r24, r20
 652:	82 bb       	out	0x12, r24	; 18
 654:	08 95       	ret

00000656 <Read_Channel>:
 656:	28 2f       	mov	r18, r24
 658:	27 70       	andi	r18, 0x07	; 7
 65a:	86 95       	lsr	r24
 65c:	86 95       	lsr	r24
 65e:	86 95       	lsr	r24
 660:	81 30       	cpi	r24, 0x01	; 1
 662:	81 f0       	breq	.+32     	; 0x684 <Read_Channel+0x2e>
 664:	28 f0       	brcs	.+10     	; 0x670 <Read_Channel+0x1a>
 666:	82 30       	cpi	r24, 0x02	; 2
 668:	b9 f0       	breq	.+46     	; 0x698 <Read_Channel+0x42>
 66a:	83 30       	cpi	r24, 0x03	; 3
 66c:	f9 f0       	breq	.+62     	; 0x6ac <Read_Channel+0x56>
 66e:	27 c0       	rjmp	.+78     	; 0x6be <Read_Channel+0x68>
 670:	89 b3       	in	r24, 0x19	; 25
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <Read_Channel+0x24>
 676:	95 95       	asr	r25
 678:	87 95       	ror	r24
 67a:	2a 95       	dec	r18
 67c:	e2 f7       	brpl	.-8      	; 0x676 <Read_Channel+0x20>
 67e:	98 2f       	mov	r25, r24
 680:	91 70       	andi	r25, 0x01	; 1
 682:	1d c0       	rjmp	.+58     	; 0x6be <Read_Channel+0x68>
 684:	86 b3       	in	r24, 0x16	; 22
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	02 c0       	rjmp	.+4      	; 0x68e <Read_Channel+0x38>
 68a:	95 95       	asr	r25
 68c:	87 95       	ror	r24
 68e:	2a 95       	dec	r18
 690:	e2 f7       	brpl	.-8      	; 0x68a <Read_Channel+0x34>
 692:	98 2f       	mov	r25, r24
 694:	91 70       	andi	r25, 0x01	; 1
 696:	13 c0       	rjmp	.+38     	; 0x6be <Read_Channel+0x68>
 698:	83 b3       	in	r24, 0x13	; 19
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <Read_Channel+0x4c>
 69e:	95 95       	asr	r25
 6a0:	87 95       	ror	r24
 6a2:	2a 95       	dec	r18
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <Read_Channel+0x48>
 6a6:	98 2f       	mov	r25, r24
 6a8:	91 70       	andi	r25, 0x01	; 1
 6aa:	09 c0       	rjmp	.+18     	; 0x6be <Read_Channel+0x68>
 6ac:	80 b3       	in	r24, 0x10	; 16
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <Read_Channel+0x60>
 6b2:	95 95       	asr	r25
 6b4:	87 95       	ror	r24
 6b6:	2a 95       	dec	r18
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <Read_Channel+0x5c>
 6ba:	98 2f       	mov	r25, r24
 6bc:	91 70       	andi	r25, 0x01	; 1
 6be:	89 2f       	mov	r24, r25
 6c0:	08 95       	ret

000006c2 <Write_Port>:
 6c2:	81 30       	cpi	r24, 0x01	; 1
 6c4:	41 f0       	breq	.+16     	; 0x6d6 <Write_Port+0x14>
 6c6:	28 f0       	brcs	.+10     	; 0x6d2 <Write_Port+0x10>
 6c8:	82 30       	cpi	r24, 0x02	; 2
 6ca:	39 f0       	breq	.+14     	; 0x6da <Write_Port+0x18>
 6cc:	83 30       	cpi	r24, 0x03	; 3
 6ce:	39 f0       	breq	.+14     	; 0x6de <Write_Port+0x1c>
 6d0:	08 95       	ret
 6d2:	6b bb       	out	0x1b, r22	; 27
 6d4:	08 95       	ret
 6d6:	68 bb       	out	0x18, r22	; 24
 6d8:	08 95       	ret
 6da:	65 bb       	out	0x15, r22	; 21
 6dc:	08 95       	ret
 6de:	62 bb       	out	0x12, r22	; 18
 6e0:	08 95       	ret

000006e2 <Read_Port>:
 6e2:	81 30       	cpi	r24, 0x01	; 1
 6e4:	41 f0       	breq	.+16     	; 0x6f6 <Read_Port+0x14>
 6e6:	28 f0       	brcs	.+10     	; 0x6f2 <Read_Port+0x10>
 6e8:	82 30       	cpi	r24, 0x02	; 2
 6ea:	39 f0       	breq	.+14     	; 0x6fa <Read_Port+0x18>
 6ec:	83 30       	cpi	r24, 0x03	; 3
 6ee:	39 f0       	breq	.+14     	; 0x6fe <Read_Port+0x1c>
 6f0:	07 c0       	rjmp	.+14     	; 0x700 <Read_Port+0x1e>
 6f2:	99 b3       	in	r25, 0x19	; 25
 6f4:	05 c0       	rjmp	.+10     	; 0x700 <Read_Port+0x1e>
 6f6:	96 b3       	in	r25, 0x16	; 22
 6f8:	03 c0       	rjmp	.+6      	; 0x700 <Read_Port+0x1e>
 6fa:	93 b3       	in	r25, 0x13	; 19
 6fc:	01 c0       	rjmp	.+2      	; 0x700 <Read_Port+0x1e>
 6fe:	90 b3       	in	r25, 0x10	; 16
 700:	89 2f       	mov	r24, r25
 702:	08 95       	ret

00000704 <Set_Nibble_Direction>:
 704:	81 30       	cpi	r24, 0x01	; 1
 706:	c1 f0       	breq	.+48     	; 0x738 <Set_Nibble_Direction+0x34>
 708:	28 f0       	brcs	.+10     	; 0x714 <Set_Nibble_Direction+0x10>
 70a:	82 30       	cpi	r24, 0x02	; 2
 70c:	39 f1       	breq	.+78     	; 0x75c <Set_Nibble_Direction+0x58>
 70e:	83 30       	cpi	r24, 0x03	; 3
 710:	b9 f1       	breq	.+110    	; 0x780 <Set_Nibble_Direction+0x7c>
 712:	08 95       	ret
 714:	61 30       	cpi	r22, 0x01	; 1
 716:	49 f4       	brne	.+18     	; 0x72a <Set_Nibble_Direction+0x26>
 718:	8a b3       	in	r24, 0x1a	; 26
 71a:	8f 70       	andi	r24, 0x0F	; 15
 71c:	90 e1       	ldi	r25, 0x10	; 16
 71e:	49 9f       	mul	r20, r25
 720:	a0 01       	movw	r20, r0
 722:	11 24       	eor	r1, r1
 724:	48 2b       	or	r20, r24
 726:	4a bb       	out	0x1a, r20	; 26
 728:	08 95       	ret
 72a:	61 11       	cpse	r22, r1
 72c:	3a c0       	rjmp	.+116    	; 0x7a2 <Set_Nibble_Direction+0x9e>
 72e:	8a b3       	in	r24, 0x1a	; 26
 730:	80 7f       	andi	r24, 0xF0	; 240
 732:	48 2b       	or	r20, r24
 734:	4a bb       	out	0x1a, r20	; 26
 736:	08 95       	ret
 738:	61 30       	cpi	r22, 0x01	; 1
 73a:	49 f4       	brne	.+18     	; 0x74e <Set_Nibble_Direction+0x4a>
 73c:	87 b3       	in	r24, 0x17	; 23
 73e:	8f 70       	andi	r24, 0x0F	; 15
 740:	90 e1       	ldi	r25, 0x10	; 16
 742:	49 9f       	mul	r20, r25
 744:	a0 01       	movw	r20, r0
 746:	11 24       	eor	r1, r1
 748:	48 2b       	or	r20, r24
 74a:	47 bb       	out	0x17, r20	; 23
 74c:	08 95       	ret
 74e:	61 11       	cpse	r22, r1
 750:	28 c0       	rjmp	.+80     	; 0x7a2 <Set_Nibble_Direction+0x9e>
 752:	87 b3       	in	r24, 0x17	; 23
 754:	80 7f       	andi	r24, 0xF0	; 240
 756:	48 2b       	or	r20, r24
 758:	47 bb       	out	0x17, r20	; 23
 75a:	08 95       	ret
 75c:	61 30       	cpi	r22, 0x01	; 1
 75e:	49 f4       	brne	.+18     	; 0x772 <Set_Nibble_Direction+0x6e>
 760:	84 b3       	in	r24, 0x14	; 20
 762:	8f 70       	andi	r24, 0x0F	; 15
 764:	90 e1       	ldi	r25, 0x10	; 16
 766:	49 9f       	mul	r20, r25
 768:	a0 01       	movw	r20, r0
 76a:	11 24       	eor	r1, r1
 76c:	48 2b       	or	r20, r24
 76e:	44 bb       	out	0x14, r20	; 20
 770:	08 95       	ret
 772:	61 11       	cpse	r22, r1
 774:	16 c0       	rjmp	.+44     	; 0x7a2 <Set_Nibble_Direction+0x9e>
 776:	84 b3       	in	r24, 0x14	; 20
 778:	80 7f       	andi	r24, 0xF0	; 240
 77a:	48 2b       	or	r20, r24
 77c:	44 bb       	out	0x14, r20	; 20
 77e:	08 95       	ret
 780:	61 30       	cpi	r22, 0x01	; 1
 782:	49 f4       	brne	.+18     	; 0x796 <Set_Nibble_Direction+0x92>
 784:	81 b3       	in	r24, 0x11	; 17
 786:	8f 70       	andi	r24, 0x0F	; 15
 788:	90 e1       	ldi	r25, 0x10	; 16
 78a:	49 9f       	mul	r20, r25
 78c:	a0 01       	movw	r20, r0
 78e:	11 24       	eor	r1, r1
 790:	48 2b       	or	r20, r24
 792:	41 bb       	out	0x11, r20	; 17
 794:	08 95       	ret
 796:	61 11       	cpse	r22, r1
 798:	04 c0       	rjmp	.+8      	; 0x7a2 <Set_Nibble_Direction+0x9e>
 79a:	81 b3       	in	r24, 0x11	; 17
 79c:	80 7f       	andi	r24, 0xF0	; 240
 79e:	48 2b       	or	r20, r24
 7a0:	41 bb       	out	0x11, r20	; 17
 7a2:	08 95       	ret

000007a4 <Write_Nibble>:

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	d8 2f       	mov	r29, r24
 7aa:	c4 2f       	mov	r28, r20
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 7ac:	61 30       	cpi	r22, 0x01	; 1
 7ae:	41 f4       	brne	.+16     	; 0x7c0 <Write_Nibble+0x1c>
}
			
uint8 Read_Nibble(DIO_Port Port_ID , uint8 Significance)
{
	
	uint8 value = Read_Port(Port_ID);
 7b0:	98 df       	rcall	.-208    	; 0x6e2 <Read_Port>
	return value ;
}

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 7b2:	8f 70       	andi	r24, 0x0F	; 15
 7b4:	90 e1       	ldi	r25, 0x10	; 16
 7b6:	c9 9f       	mul	r28, r25
 7b8:	b0 01       	movw	r22, r0
 7ba:	11 24       	eor	r1, r1
 7bc:	68 2b       	or	r22, r24
}
			
uint8 Read_Nibble(DIO_Port Port_ID , uint8 Significance)
{
	
	uint8 value = Read_Port(Port_ID);
 7be:	04 c0       	rjmp	.+8      	; 0x7c8 <Write_Nibble+0x24>
 7c0:	90 df       	rcall	.-224    	; 0x6e2 <Read_Port>
	return value ;
}

void Write_Nibble(DIO_Port Port_ID , uint8 Significance , uint8 Value)
{
	Value = (Significance==HIGH)?(Read_Nibble(Port_ID,LOW)|(Value <<4)):((Read_Nibble(Port_ID,HIGH)<<4))|(Value);
 7c2:	80 7f       	andi	r24, 0xF0	; 240
 7c4:	68 2f       	mov	r22, r24
	Write_Port(Port_ID,Value);
 7c6:	6c 2b       	or	r22, r28
 7c8:	8d 2f       	mov	r24, r29
 7ca:	7b df       	rcall	.-266    	; 0x6c2 <Write_Port>
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	08 95       	ret

000007d2 <_exit>:
 7d2:	f8 94       	cli

000007d4 <__stop_program>:
 7d4:	ff cf       	rjmp	.-2      	; 0x7d4 <__stop_program>
